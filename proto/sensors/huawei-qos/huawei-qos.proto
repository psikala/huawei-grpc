syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2019-06-25 08:04:18
// ProtoYang-version 1
// module huawei-qos
// revision 2019-04-06
// namespace urn:huawei:yang:huawei-qos

package huawei_qos;

message Qos {
   message WredTemplate {
      message FlowWreds {
         message FlowWred {
            string name = 1 [json_name = "name"];
            uint32 queue_depth = 2 [json_name = "queue-depth"];
            message WredColors {
               message WredColor {
                  enum Color {
                     Color_GREEN = 0;
                     Color_YELLOW = 1;
                     Color_RED = 2;
                  };
                  Color color = 1 [json_name = "color"];
                  uint32 low_limit_percentage = 2 [json_name = "low-limit-percentage"];
                  uint32 high_limit_percentage = 3 [json_name = "high-limit-percentage"];
                  uint32 discard_percentage = 4 [json_name = "discard-percentage"];
               }
               repeated WredColor wred_color = 1 [json_name = "wred-color"];
            }
            WredColors wred_colors = 3 [json_name = "wred-colors"];
         }
         repeated FlowWred flow_wred = 1 [json_name = "flow-wred"];
      }
      FlowWreds flow_wreds = 1 [json_name = "flow-wreds"];
      message PortWreds {
         message PortWred {
            string name = 1 [json_name = "name"];
            uint32 queue_depth = 2 [json_name = "queue-depth"];
            message WredColors {
               message WredColor {
                  enum Color {
                     Color_GREEN = 0;
                     Color_YELLOW = 1;
                     Color_RED = 2;
                  };
                  Color color = 1 [json_name = "color"];
                  uint32 low_limit_percentage = 2 [json_name = "low-limit-percentage"];
                  uint32 high_limit_percentage = 3 [json_name = "high-limit-percentage"];
                  uint32 discard_percentage = 4 [json_name = "discard-percentage"];
               }
               repeated WredColor wred_color = 1 [json_name = "wred-color"];
            }
            WredColors wred_colors = 3 [json_name = "wred-colors"];
         }
         repeated PortWred port_wred = 1 [json_name = "port-wred"];
      }
      PortWreds port_wreds = 2 [json_name = "port-wreds"];
   }
   WredTemplate wred_template = 1 [json_name = "wred-template"];
   message QueueSchedulerTemplate {
      message FlowQueues {
         message FlowQueue {
            string name = 1 [json_name = "name"];
            enum Mode {
               Mode_NORMAL = 0;
               Mode_PRIORITY = 1;
               Mode_X_4COS = 2;
            };
            Mode mode = 2 [json_name = "mode"];
            message NormalModeQueues {
               message NormalModeQueue {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  string flow_wred_name = 2 [json_name = "flow-wred-name"];
                  message ConfigType {
                     message ShapingMode {
                        enum ScheduleMode {
                           ScheduleMode_PQ = 0;
                           ScheduleMode_WFQ = 1;
                           ScheduleMode_LPQ = 2;
                        };
                        ScheduleMode schedule_mode = 1 [json_name = "schedule-mode"];
                        uint32 weight = 2 [json_name = "weight"];
                        uint32 pbs = 3 [json_name = "pbs"];
                        enum LowLatency {
                           INVALID_ENUM_VALUE_LowLatency = 0;
                           LowLatency_ENABLE = 1;
                        };
                        LowLatency low_latency = 4 [json_name = "low-latency"];
                        enum LowJitter {
                           INVALID_ENUM_VALUE_LowJitter = 0;
                           LowJitter_ENABLE = 1;
                        };
                        LowJitter low_jitter = 5 [json_name = "low-jitter"];
                        message ShapingParameters {
                           message Shaping {
                              uint32 shaping_value = 1 [json_name = "shaping-value"];
                           }
                           Shaping shaping = 1 [json_name = "shaping"];
                           message ShapingPercent {
                              uint32 shaping_percentage = 1 [json_name = "shaping-percentage"];
                           }
                           ShapingPercent shaping_percent = 2 [json_name = "shaping-percent"];
                           message Car {
                              uint32 car_value = 1 [json_name = "car-value"];
                           }
                           Car car = 3 [json_name = "car"];
                           message CarPercent {
                              uint32 car_percentage = 1 [json_name = "car-percentage"];
                           }
                           CarPercent car_percent = 4 [json_name = "car-percent"];
                        }
                        ShapingParameters shaping_parameters = 6 [json_name = "shaping-parameters"];
                     }
                     ShapingMode shaping_mode = 1 [json_name = "shaping-mode"];
                     message CirMode {
                        enum CirScheduleMode {
                           CirScheduleMode_PQ = 0;
                        };
                        CirScheduleMode cir_schedule_mode = 1 [json_name = "cir-schedule-mode"];
                        enum PirScheduleMode {
                           PirScheduleMode_PQ = 0;
                           PirScheduleMode_WFQ = 1;
                           PirScheduleMode_LPQ = 2;
                        };
                        PirScheduleMode pir_schedule_mode = 2 [json_name = "pir-schedule-mode"];
                        uint32 pir_weight = 3 [json_name = "pir-weight"];
                        uint32 cbs = 4 [json_name = "cbs"];
                        uint32 pir_pbs = 5 [json_name = "pir-pbs"];
                        message CirParameters {
                           message Cir {
                              uint32 cir_value = 1 [json_name = "cir-value"];
                              uint32 pir_value = 2 [json_name = "pir-value"];
                           }
                           Cir cir = 1 [json_name = "cir"];
                           message CirPercent {
                              uint32 cir_percentage = 1 [json_name = "cir-percentage"];
                              uint32 pir_percentage = 2 [json_name = "pir-percentage"];
                           }
                           CirPercent cir_percent = 2 [json_name = "cir-percent"];
                        }
                        CirParameters cir_parameters = 6 [json_name = "cir-parameters"];
                     }
                     CirMode cir_mode = 2 [json_name = "cir-mode"];
                  }
                  ConfigType config_type = 3 [json_name = "config-type"];
               }
               repeated NormalModeQueue normal_mode_queue = 1 [json_name = "normal-mode-queue"];
            }
            NormalModeQueues normal_mode_queues = 3 [json_name = "normal-mode-queues"];
            message ShareShapings {
               message ShareShaping {
                  enum Be {
                     Be_TRUE = 0;
                     Be_FALSE = 8;
                  };
                  Be be = 1 [json_name = "be"];
                  enum Af1 {
                     INVALID_ENUM_VALUE_Af1 = 0;
                     Af1_TRUE = 1;
                     Af1_FALSE = 8;
                  };
                  Af1 af1 = 2 [json_name = "af1"];
                  enum Af2 {
                     INVALID_ENUM_VALUE_Af2 = 0;
                     Af2_TRUE = 2;
                     Af2_FALSE = 8;
                  };
                  Af2 af2 = 3 [json_name = "af2"];
                  enum Af3 {
                     INVALID_ENUM_VALUE_Af3 = 0;
                     Af3_TRUE = 3;
                     Af3_FALSE = 8;
                  };
                  Af3 af3 = 4 [json_name = "af3"];
                  enum Af4 {
                     INVALID_ENUM_VALUE_Af4 = 0;
                     Af4_TRUE = 4;
                     Af4_FALSE = 8;
                  };
                  Af4 af4 = 5 [json_name = "af4"];
                  enum Ef {
                     INVALID_ENUM_VALUE_Ef = 0;
                     Ef_TRUE = 5;
                     Ef_FALSE = 8;
                  };
                  Ef ef = 6 [json_name = "ef"];
                  enum Cs6 {
                     INVALID_ENUM_VALUE_Cs6 = 0;
                     Cs6_TRUE = 6;
                     Cs6_FALSE = 8;
                  };
                  Cs6 cs6 = 7 [json_name = "cs6"];
                  enum Cs7 {
                     INVALID_ENUM_VALUE_Cs7 = 0;
                     Cs7_TRUE = 7;
                     Cs7_FALSE = 8;
                  };
                  Cs7 cs7 = 8 [json_name = "cs7"];
                  enum QueueScheduleMode {
                     QueueScheduleMode_PQ = 0;
                     QueueScheduleMode_WFQ = 1;
                     QueueScheduleMode_LPQ = 2;
                     QueueScheduleMode_NOTX_CONFIG = 3;
                  };
                  QueueScheduleMode queue_schedule_mode = 9 [json_name = "queue-schedule-mode"];
                  uint32 weight = 10 [json_name = "weight"];
                  uint32 share_shaping_pir = 11 [json_name = "share-shaping-pir"];
                  uint32 pbs = 12 [json_name = "pbs"];
               }
               ShareShaping share_shaping = 1 [json_name = "share-shaping"];
            }
            ShareShapings share_shapings = 4 [json_name = "share-shapings"];
            message ShareShapingIds {
               message ShareShapingId {
                  enum ShapId {
                     INVALID_ENUM_VALUE_ShapId = 0;
                     ShapId_X_1 = 1;
                  };
                  ShapId shapId = 1 [json_name = "shapId"];
                  enum Be {
                     Be_TRUE = 0;
                     Be_FALSE = 8;
                  };
                  Be be = 2 [json_name = "be"];
                  enum Af1 {
                     INVALID_ENUM_VALUE_Af1 = 0;
                     Af1_TRUE = 1;
                     Af1_FALSE = 8;
                  };
                  Af1 af1 = 3 [json_name = "af1"];
                  enum Af2 {
                     INVALID_ENUM_VALUE_Af2 = 0;
                     Af2_TRUE = 2;
                     Af2_FALSE = 8;
                  };
                  Af2 af2 = 4 [json_name = "af2"];
                  enum Af3 {
                     INVALID_ENUM_VALUE_Af3 = 0;
                     Af3_TRUE = 3;
                     Af3_FALSE = 8;
                  };
                  Af3 af3 = 5 [json_name = "af3"];
                  enum Af4 {
                     INVALID_ENUM_VALUE_Af4 = 0;
                     Af4_TRUE = 4;
                     Af4_FALSE = 8;
                  };
                  Af4 af4 = 6 [json_name = "af4"];
                  enum Ef {
                     INVALID_ENUM_VALUE_Ef = 0;
                     Ef_TRUE = 5;
                     Ef_FALSE = 8;
                  };
                  Ef ef = 7 [json_name = "ef"];
                  enum Cs6 {
                     INVALID_ENUM_VALUE_Cs6 = 0;
                     Cs6_TRUE = 6;
                     Cs6_FALSE = 8;
                  };
                  Cs6 cs6 = 8 [json_name = "cs6"];
                  enum Cs7 {
                     INVALID_ENUM_VALUE_Cs7 = 0;
                     Cs7_TRUE = 7;
                     Cs7_FALSE = 8;
                  };
                  Cs7 cs7 = 9 [json_name = "cs7"];
                  enum QueueScheduleMode {
                     QueueScheduleMode_PQ = 0;
                     QueueScheduleMode_WFQ = 1;
                     QueueScheduleMode_LPQ = 2;
                     QueueScheduleMode_NOTX_CONFIG = 3;
                  };
                  QueueScheduleMode queue_schedule_mode = 10 [json_name = "queue-schedule-mode"];
                  uint32 weight = 11 [json_name = "weight"];
                  uint32 share_shaping_pir = 12 [json_name = "share-shaping-pir"];
                  uint32 pbs = 13 [json_name = "pbs"];
               }
               repeated ShareShapingId share_shaping_id = 1 [json_name = "share-shaping-id"];
            }
            ShareShapingIds share_shaping_ids = 5 [json_name = "share-shaping-ids"];
            message ShareShapeRandomDiscards {
               message ShareShapeRandomDiscard {
                  enum Be {
                     Be_TRUE = 0;
                     Be_FALSE = 8;
                  };
                  Be be = 1 [json_name = "be"];
                  enum Af1 {
                     INVALID_ENUM_VALUE_Af1 = 0;
                     Af1_TRUE = 1;
                     Af1_FALSE = 8;
                  };
                  Af1 af1 = 2 [json_name = "af1"];
                  enum Af2 {
                     INVALID_ENUM_VALUE_Af2 = 0;
                     Af2_TRUE = 2;
                     Af2_FALSE = 8;
                  };
                  Af2 af2 = 3 [json_name = "af2"];
                  enum Af3 {
                     INVALID_ENUM_VALUE_Af3 = 0;
                     Af3_TRUE = 3;
                     Af3_FALSE = 8;
                  };
                  Af3 af3 = 4 [json_name = "af3"];
                  enum Af4 {
                     INVALID_ENUM_VALUE_Af4 = 0;
                     Af4_TRUE = 4;
                     Af4_FALSE = 8;
                  };
                  Af4 af4 = 5 [json_name = "af4"];
                  enum Ef {
                     INVALID_ENUM_VALUE_Ef = 0;
                     Ef_TRUE = 5;
                     Ef_FALSE = 8;
                  };
                  Ef ef = 6 [json_name = "ef"];
                  enum Cs6 {
                     INVALID_ENUM_VALUE_Cs6 = 0;
                     Cs6_TRUE = 6;
                     Cs6_FALSE = 8;
                  };
                  Cs6 cs6 = 7 [json_name = "cs6"];
                  enum Cs7 {
                     INVALID_ENUM_VALUE_Cs7 = 0;
                     Cs7_TRUE = 7;
                     Cs7_FALSE = 8;
                  };
                  Cs7 cs7 = 8 [json_name = "cs7"];
                  string random_discard = 9 [json_name = "random-discard"];
               }
               ShareShapeRandomDiscard share_shape_random_discard = 1 [json_name = "share-shape-random-discard"];
            }
            ShareShapeRandomDiscards share_shape_random_discards = 6 [json_name = "share-shape-random-discards"];
            message NormalModeRandomDiscards {
               message NormalModeRandomDiscard {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  string random_discard = 2 [json_name = "random-discard"];
               }
               repeated NormalModeRandomDiscard normal_mode_random_discard = 1 [json_name = "normal-mode-random-discard"];
            }
            NormalModeRandomDiscards normal_mode_random_discards = 7 [json_name = "normal-mode-random-discards"];
            message FourCosModeQueues {
               message FourCosModeQueue {
                  enum CosValue {
                     CosValue_COS0 = 0;
                     CosValue_COS1 = 1;
                     CosValue_COS2 = 2;
                     CosValue_COS3 = 3;
                  };
                  CosValue cos_value = 1 [json_name = "cos-value"];
                  enum ScheduleMode {
                     ScheduleMode_PQ = 0;
                     ScheduleMode_WFQ = 1;
                     ScheduleMode_LPQ = 2;
                  };
                  ScheduleMode schedule_mode = 2 [json_name = "schedule-mode"];
                  uint32 weight = 3 [json_name = "weight"];
                  uint32 shaping = 4 [json_name = "shaping"];
                  uint32 shaping_percentage = 5 [json_name = "shaping-percentage"];
                  uint32 pbs = 6 [json_name = "pbs"];
                  string flow_wred_name = 7 [json_name = "flow-wred-name"];
               }
               repeated FourCosModeQueue four_cos_mode_queue = 1 [json_name = "four-cos-mode-queue"];
            }
            FourCosModeQueues four_cos_mode_queues = 8 [json_name = "four-cos-mode-queues"];
            message PriorityModeQueues {
               message PriorityModeQueue {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  uint32 priority = 2 [json_name = "priority"];
                  uint32 weight = 3 [json_name = "weight"];
                  uint32 shaping = 4 [json_name = "shaping"];
                  uint32 shaping_percentage = 5 [json_name = "shaping-percentage"];
                  uint32 pbs = 6 [json_name = "pbs"];
                  string flow_wred_name = 7 [json_name = "flow-wred-name"];
               }
               repeated PriorityModeQueue priority_mode_queue = 1 [json_name = "priority-mode-queue"];
            }
            PriorityModeQueues priority_mode_queues = 9 [json_name = "priority-mode-queues"];
            message PriorityModeSchedules {
               message PriorityModeSchedule {
                  uint32 priority = 1 [json_name = "priority"];
                  enum ScheduleMode {
                     INVALID_ENUM_VALUE_ScheduleMode = 0;
                     ScheduleMode_PQ = 1;
                     ScheduleMode_WFQ = 2;
                  };
                  ScheduleMode schedule_mode = 2 [json_name = "schedule-mode"];
               }
               repeated PriorityModeSchedule priority_mode_schedule = 1 [json_name = "priority-mode-schedule"];
            }
            PriorityModeSchedules priority_mode_schedules = 10 [json_name = "priority-mode-schedules"];
            message PriorityModeShareShapings {
               message PriorityModeShareShaping {
                  enum ShapId {
                     INVALID_ENUM_VALUE_ShapId = 0;
                     ShapId_X_1 = 1;
                     ShapId_NOTX_CONFIG = 2;
                  };
                  ShapId shap_id = 1 [json_name = "shap-id"];
                  enum Be {
                     Be_TRUE = 0;
                  };
                  Be be = 2 [json_name = "be"];
                  enum Af1 {
                     INVALID_ENUM_VALUE_Af1 = 0;
                     Af1_TRUE = 1;
                  };
                  Af1 af1 = 3 [json_name = "af1"];
                  enum Af2 {
                     INVALID_ENUM_VALUE_Af2 = 0;
                     Af2_TRUE = 2;
                  };
                  Af2 af2 = 4 [json_name = "af2"];
                  enum Af3 {
                     INVALID_ENUM_VALUE_Af3 = 0;
                     Af3_TRUE = 3;
                  };
                  Af3 af3 = 5 [json_name = "af3"];
                  enum Af4 {
                     INVALID_ENUM_VALUE_Af4 = 0;
                     Af4_TRUE = 4;
                  };
                  Af4 af4 = 6 [json_name = "af4"];
                  enum Ef {
                     INVALID_ENUM_VALUE_Ef = 0;
                     Ef_TRUE = 5;
                  };
                  Ef ef = 7 [json_name = "ef"];
                  enum Cs6 {
                     INVALID_ENUM_VALUE_Cs6 = 0;
                     Cs6_TRUE = 6;
                  };
                  Cs6 cs6 = 8 [json_name = "cs6"];
                  enum Cs7 {
                     INVALID_ENUM_VALUE_Cs7 = 0;
                     Cs7_TRUE = 7;
                  };
                  Cs7 cs7 = 9 [json_name = "cs7"];
                  enum ScheduleMode {
                     INVALID_ENUM_VALUE_ScheduleMode = 0;
                     ScheduleMode_PQ = 1;
                     ScheduleMode_WFQ = 2;
                  };
                  ScheduleMode schedule_mode = 10 [json_name = "schedule-mode"];
                  uint32 weight = 11 [json_name = "weight"];
                  uint32 share_shaping_pir = 12 [json_name = "share-shaping-pir"];
                  uint32 pbs = 13 [json_name = "pbs"];
               }
               repeated PriorityModeShareShaping priority_mode_share_shaping = 1 [json_name = "priority-mode-share-shaping"];
            }
            PriorityModeShareShapings priority_mode_share_shapings = 11 [json_name = "priority-mode-share-shapings"];
         }
         repeated FlowQueue flow_queue = 1 [json_name = "flow-queue"];
      }
      FlowQueues flow_queues = 1 [json_name = "flow-queues"];
      message Profiles {
         message Profile {
            string name = 1 [json_name = "name"];
            enum Mode {
               Mode_NORMAL = 0;
               Mode_TIMEX_RANGE = 1;
            };
            Mode mode = 2 [json_name = "mode"];
            string description = 3 [json_name = "description"];
            message UserQueues {
               message UserQueue {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                     Direction_ALL = 2;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  message ConfigType {
                     message CirMode {
                        uint32 cir = 1 [json_name = "cir"];
                        uint32 pir = 2 [json_name = "pir"];
                     }
                     CirMode cir_mode = 1 [json_name = "cir-mode"];
                     message CirPercentMode {
                        uint32 cir_percent = 1 [json_name = "cir-percent"];
                        uint32 pir_percent = 2 [json_name = "pir-percent"];
                     }
                     CirPercentMode cir_percent_mode = 2 [json_name = "cir-percent-mode"];
                  }
                  ConfigType config_type = 2 [json_name = "config-type"];
                  uint32 cbs = 3 [json_name = "cbs"];
                  uint32 pbs = 4 [json_name = "pbs"];
                  enum PriorityLevelId {
                     INVALID_ENUM_VALUE_PriorityLevelId = 0;
                     PriorityLevelId_HIGH = 1;
                     PriorityLevelId_LOW = 255;
                  };
                  PriorityLevelId priority_level_id = 5 [json_name = "priority-level-id"];
                  string flow_queue_name = 6 [json_name = "flow-queue-name"];
                  string flow_mapping_name = 7 [json_name = "flow-mapping-name"];
                  string user_group_queue_name = 8 [json_name = "user-group-queue-name"];
                  string service_template_name = 9 [json_name = "service-template-name"];
                  enum AdjustOnCard {
                     AdjustOnCard_DISABLE = 0;
                     AdjustOnCard_ENABLE = 1;
                  };
                  AdjustOnCard adjust_on_card = 10 [json_name = "adjust-on-card"];
               }
               repeated UserQueue user_queue = 1 [json_name = "user-queue"];
            }
            UserQueues user_queues = 4 [json_name = "user-queues"];
            message UserQueueWeights {
               message UserQueueWeight {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                     Direction_ALL = 2;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 weight = 2 [json_name = "weight"];
               }
               repeated UserQueueWeight user_queue_weight = 1 [json_name = "user-queue-weight"];
            }
            UserQueueWeights user_queue_weights = 5 [json_name = "user-queue-weights"];
            message MplsTunnelFlowQueues {
               message MplsTunnelFlowQueue {
                  string flow_queue_name = 1 [json_name = "flow-queue-name"];
                  string flow_mapping_name = 2 [json_name = "flow-mapping-name"];
                  string user_group_queue_name = 3 [json_name = "user-group-queue-name"];
                  string service_template_name = 4 [json_name = "service-template-name"];
               }
               MplsTunnelFlowQueue mpls_tunnel_flow_queue = 1 [json_name = "mpls-tunnel-flow-queue"];
            }
            MplsTunnelFlowQueues mpls_tunnel_flow_queues = 6 [json_name = "mpls-tunnel-flow-queues"];
         }
         repeated Profile profile = 1 [json_name = "profile"];
      }
      Profiles profiles = 2 [json_name = "profiles"];
      message FlowMappings {
         message FlowMapping {
            string name = 1 [json_name = "name"];
            message Parameters {
               message Parameter {
                  enum FlowQueueServiceClass {
                     FlowQueueServiceClass_BE = 0;
                     FlowQueueServiceClass_AF1 = 1;
                     FlowQueueServiceClass_AF2 = 2;
                     FlowQueueServiceClass_AF3 = 3;
                     FlowQueueServiceClass_AF4 = 4;
                     FlowQueueServiceClass_EF = 5;
                     FlowQueueServiceClass_CS6 = 6;
                     FlowQueueServiceClass_CS7 = 7;
                  };
                  FlowQueueServiceClass flow_queue_service_class = 1 [json_name = "flow-queue-service-class"];
                  enum PortQueueServiceClass {
                     PortQueueServiceClass_BE = 0;
                     PortQueueServiceClass_AF1 = 1;
                     PortQueueServiceClass_AF2 = 2;
                     PortQueueServiceClass_AF3 = 3;
                     PortQueueServiceClass_AF4 = 4;
                     PortQueueServiceClass_EF = 5;
                     PortQueueServiceClass_CS6 = 6;
                     PortQueueServiceClass_CS7 = 7;
                  };
                  PortQueueServiceClass port_queue_service_class = 2 [json_name = "port-queue-service-class"];
               }
               repeated Parameter parameter = 1 [json_name = "parameter"];
            }
            Parameters parameters = 2 [json_name = "parameters"];
         }
         repeated FlowMapping flow_mapping = 1 [json_name = "flow-mapping"];
      }
      FlowMappings flow_mappings = 3 [json_name = "flow-mappings"];
      message Queue4CosMappings {
         message Queue4CosMapping {
            string name = 1 [json_name = "name"];
            message Parameters {
               message Parameter {
                  enum FlowQueueServiceClass {
                     FlowQueueServiceClass_BE = 0;
                     FlowQueueServiceClass_AF1 = 1;
                     FlowQueueServiceClass_AF2 = 2;
                     FlowQueueServiceClass_AF3 = 3;
                     FlowQueueServiceClass_AF4 = 4;
                     FlowQueueServiceClass_EF = 5;
                     FlowQueueServiceClass_CS6 = 6;
                     FlowQueueServiceClass_CS7 = 7;
                  };
                  FlowQueueServiceClass flow_queue_service_class = 1 [json_name = "flow-queue-service-class"];
                  enum FourQueueServiceClass {
                     FourQueueServiceClass_COS0 = 0;
                     FourQueueServiceClass_COS1 = 1;
                     FourQueueServiceClass_COS2 = 2;
                     FourQueueServiceClass_COS3 = 3;
                  };
                  FourQueueServiceClass four_queue_service_class = 2 [json_name = "four-queue-service-class"];
               }
               repeated Parameter parameter = 1 [json_name = "parameter"];
            }
            Parameters parameters = 2 [json_name = "parameters"];
         }
         repeated Queue4CosMapping queue_4cos_mapping = 1 [json_name = "queue-4cos-mapping"];
      }
      Queue4CosMappings queue_4cos_mappings = 4 [json_name = "queue-4cos-mappings"];
      message UserGroupQueues {
         message UserGroupQueue {
            string name = 1 [json_name = "name"];
            enum Mode {
               Mode_NOTPRIORITY = 0;
               Mode_ISPRIORITY = 1;
            };
            Mode mode = 2 [json_name = "mode"];
            enum ModeTemplate {
               ModeTemplate_DISABLE = 0;
               ModeTemplate_ENABLE = 1;
            };
            ModeTemplate mode_template = 3 [json_name = "mode-template"];
            message Shapings {
               message Shaping {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 pir = 2 [json_name = "pir"];
                  uint32 pbs = 3 [json_name = "pbs"];
               }
               repeated Shaping shaping = 1 [json_name = "shaping"];
            }
            Shapings shapings = 4 [json_name = "shapings"];
            message ShapingPriortys {
               message ShapingPriorty {
                  enum Priority {
                     Priority_PRIORITY0 = 0;
                     Priority_PRIORITY1 = 1;
                     Priority_PRIORITY2 = 2;
                     Priority_NOPRIORITY = 255;
                  };
                  Priority priority = 1 [json_name = "priority"];
                  uint32 pir = 2 [json_name = "pir"];
                  uint32 pbs = 3 [json_name = "pbs"];
                  enum Direction {
                     INVALID_ENUM_VALUE_Direction = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 4 [json_name = "direction"];
               }
               repeated ShapingPriorty shaping_priorty = 1 [json_name = "shaping-priorty"];
            }
            ShapingPriortys shaping_priortys = 5 [json_name = "shaping-priortys"];
            message CirPirs {
               message CirPir {
                  enum Direction {
                     INVALID_ENUM_VALUE_Direction = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 cir = 2 [json_name = "cir"];
                  uint32 cbs = 3 [json_name = "cbs"];
                  uint32 pir = 4 [json_name = "pir"];
                  uint32 pbs = 5 [json_name = "pbs"];
               }
               repeated CirPir cir_pir = 1 [json_name = "cir-pir"];
            }
            CirPirs cir_pirs = 6 [json_name = "cir-pirs"];
            message UserGroupQueueStats {
               message UserGroupQueueStat {
                  string slot_id = 1 [json_name = "slot-id"];
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 2 [json_name = "direction"];
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                     ServiceClass_TOTAL = 8;
                  };
                  ServiceClass service_class = 3 [json_name = "service-class"];
                  string group_name = 4 [json_name = "group-name"];
                  uint64 pass_packets = 5 [json_name = "pass-packets"];
                  uint64 pass_bytes = 6 [json_name = "pass-bytes"];
                  uint64 pass_packet_rate = 7 [json_name = "pass-packet-rate"];
                  uint64 pass_byte_rate = 8 [json_name = "pass-byte-rate"];
                  uint64 drop_packets = 9 [json_name = "drop-packets"];
                  uint64 drop_bytes = 10 [json_name = "drop-bytes"];
                  uint64 drop_packet_rate = 11 [json_name = "drop-packet-rate"];
                  uint64 drop_byte_rate = 12 [json_name = "drop-byte-rate"];
               }
               repeated UserGroupQueueStat user_group_queue_stat = 1 [json_name = "user-group-queue-stat"];
            }
            UserGroupQueueStats user_group_queue_stats = 7 [json_name = "user-group-queue-stats"];
         }
         repeated UserGroupQueue user_group_queue = 1 [json_name = "user-group-queue"];
      }
      UserGroupQueues user_group_queues = 5 [json_name = "user-group-queues"];
      message ServiceTemplates {
         message ServiceTemplate {
            string name = 1 [json_name = "name"];
            string slot_id = 2 [json_name = "slot-id"];
            message ServiceLengths {
               message ServiceLength {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  int32 value = 2 [json_name = "value"];
               }
               repeated ServiceLength service_length = 1 [json_name = "service-length"];
            }
            ServiceLengths service_lengths = 3 [json_name = "service-lengths"];
         }
         repeated ServiceTemplate service_template = 1 [json_name = "service-template"];
      }
      ServiceTemplates service_templates = 6 [json_name = "service-templates"];
      message PortQueueTemplates {
         message PortQueueTemplate {
            string name = 1 [json_name = "name"];
            message Parameters {
               message Parameter {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  string port_wred_name = 2 [json_name = "port-wred-name"];
                  message ConfigType {
                     message ShapingMode {
                        enum QueueScheduleMode {
                           QueueScheduleMode_PQ = 0;
                           QueueScheduleMode_WFQ = 1;
                           QueueScheduleMode_LPQ = 2;
                        };
                        QueueScheduleMode queue_schedule_mode = 1 [json_name = "queue-schedule-mode"];
                        uint32 weight = 2 [json_name = "weight"];
                        uint32 pbs = 3 [json_name = "pbs"];
                        message ShapingParameters {
                           message Shaping {
                              uint32 shaping_value = 1 [json_name = "shaping-value"];
                           }
                           Shaping shaping = 1 [json_name = "shaping"];
                           message ShapingPercent {
                              uint32 shaping_percentage = 1 [json_name = "shaping-percentage"];
                           }
                           ShapingPercent shaping_percent = 2 [json_name = "shaping-percent"];
                        }
                        ShapingParameters shaping_parameters = 4 [json_name = "shaping-parameters"];
                        enum LowLatency {
                           LowLatency_DISABLE = 0;
                           LowLatency_ENABLE = 1;
                        };
                        LowLatency low_latency = 5 [json_name = "low-latency"];
                     }
                     ShapingMode shaping_mode = 1 [json_name = "shaping-mode"];
                     message CirMode {
                        message CirParameters {
                           message Cir {
                              uint32 cir_value = 1 [json_name = "cir-value"];
                              uint32 pir_value = 2 [json_name = "pir-value"];
                           }
                           Cir cir = 1 [json_name = "cir"];
                           message CirPercent {
                              uint32 cir_percentage = 1 [json_name = "cir-percentage"];
                              uint32 pir_percentage = 2 [json_name = "pir-percentage"];
                           }
                           CirPercent cir_percent = 2 [json_name = "cir-percent"];
                        }
                        CirParameters cir_parameters = 1 [json_name = "cir-parameters"];
                        enum CirScheduleMode {
                           CirScheduleMode_PQ = 0;
                        };
                        CirScheduleMode cir_schedule_mode = 2 [json_name = "cir-schedule-mode"];
                        uint32 cir_weight = 3 [json_name = "cir-weight"];
                        uint32 cir_pbs = 4 [json_name = "cir-pbs"];
                        enum PirScheduleMode {
                           PirScheduleMode_PQ = 0;
                           PirScheduleMode_WFQ = 1;
                           PirScheduleMode_LPQ = 2;
                        };
                        PirScheduleMode pir_schedule_mode = 5 [json_name = "pir-schedule-mode"];
                        uint32 pir_weight = 6 [json_name = "pir-weight"];
                        uint32 cbs = 7 [json_name = "cbs"];
                     }
                     CirMode cir_mode = 2 [json_name = "cir-mode"];
                  }
                  ConfigType config_type = 3 [json_name = "config-type"];
               }
               repeated Parameter parameter = 1 [json_name = "parameter"];
            }
            Parameters parameters = 2 [json_name = "parameters"];
            message ShareShapes {
               message ShareShape {
                  enum Be {
                     Be_TRUE = 0;
                     Be_FALSE = 8;
                  };
                  Be be = 1 [json_name = "be"];
                  enum Af1 {
                     INVALID_ENUM_VALUE_Af1 = 0;
                     Af1_TRUE = 1;
                     Af1_FALSE = 8;
                  };
                  Af1 af1 = 2 [json_name = "af1"];
                  enum Af2 {
                     INVALID_ENUM_VALUE_Af2 = 0;
                     Af2_TRUE = 2;
                     Af2_FALSE = 8;
                  };
                  Af2 af2 = 3 [json_name = "af2"];
                  enum Af3 {
                     INVALID_ENUM_VALUE_Af3 = 0;
                     Af3_TRUE = 3;
                     Af3_FALSE = 8;
                  };
                  Af3 af3 = 4 [json_name = "af3"];
                  enum Af4 {
                     INVALID_ENUM_VALUE_Af4 = 0;
                     Af4_TRUE = 4;
                     Af4_FALSE = 8;
                  };
                  Af4 af4 = 5 [json_name = "af4"];
                  enum Ef {
                     INVALID_ENUM_VALUE_Ef = 0;
                     Ef_TRUE = 5;
                     Ef_FALSE = 8;
                  };
                  Ef ef = 6 [json_name = "ef"];
                  enum Cs6 {
                     INVALID_ENUM_VALUE_Cs6 = 0;
                     Cs6_TRUE = 6;
                     Cs6_FALSE = 8;
                  };
                  Cs6 cs6 = 7 [json_name = "cs6"];
                  enum Cs7 {
                     INVALID_ENUM_VALUE_Cs7 = 0;
                     Cs7_TRUE = 7;
                     Cs7_FALSE = 8;
                  };
                  Cs7 cs7 = 8 [json_name = "cs7"];
                  enum QueueScheduleMode {
                     QueueScheduleMode_PQ = 0;
                     QueueScheduleMode_WFQ = 1;
                     QueueScheduleMode_LPQ = 2;
                     QueueScheduleMode_NOTX_CONFIG = 3;
                  };
                  QueueScheduleMode queue_schedule_mode = 9 [json_name = "queue-schedule-mode"];
                  uint32 weight = 10 [json_name = "weight"];
                  uint32 pir = 11 [json_name = "pir"];
                  uint32 percent = 12 [json_name = "percent"];
                  uint32 pbs = 13 [json_name = "pbs"];
               }
               ShareShape share_shape = 1 [json_name = "share-shape"];
            }
            ShareShapes share_shapes = 3 [json_name = "share-shapes"];
         }
         repeated PortQueueTemplate port_queue_template = 1 [json_name = "port-queue-template"];
      }
      PortQueueTemplates port_queue_templates = 7 [json_name = "port-queue-templates"];
      message ChannelProfiles {
         message ChannelProfile {
            string name = 1 [json_name = "name"];
            message ChannelConfigs {
               message ChannelConfig {
                  uint32 channel_id = 1 [json_name = "channel-id"];
                  uint32 bandwidth = 2 [json_name = "bandwidth"];
                  uint32 quantity = 3 [json_name = "quantity"];
               }
               repeated ChannelConfig channel_config = 1 [json_name = "channel-config"];
            }
            ChannelConfigs channel_configs = 2 [json_name = "channel-configs"];
         }
         repeated ChannelProfile channel_profile = 1 [json_name = "channel-profile"];
      }
      ChannelProfiles channel_profiles = 8 [json_name = "channel-profiles"];
      message BufferPolicys {
         message BufferPolicy {
            string name = 1 [json_name = "name"];
            message BufferModeSlots {
               message BufferModeSlot {
                  string slot_id = 1 [json_name = "slot-id"];
                  enum BufferModeGe {
                     BufferModeGe_NORMAL = 0;
                     BufferModeGe_LARGE = 1;
                  };
                  BufferModeGe buffer_mode_ge = 2 [json_name = "buffer-mode-ge"];
                  enum BufferMode10Ge {
                     BufferMode10Ge_NORMAL = 0;
                     BufferMode10Ge_LARGE = 1;
                  };
                  BufferMode10Ge buffer_mode_10ge = 3 [json_name = "buffer-mode-10ge"];
               }
               repeated BufferModeSlot buffer_mode_slot = 1 [json_name = "buffer-mode-slot"];
            }
            BufferModeSlots buffer_mode_slots = 2 [json_name = "buffer-mode-slots"];
            message BufferModeInterfaces {
               message BufferModeInterface {
                  string ifname = 1 [json_name = "ifname"];
                  enum BufferMode {
                     BufferMode_NORMAL = 0;
                     BufferMode_LARGE = 1;
                  };
                  BufferMode buffer_mode = 2 [json_name = "buffer-mode"];
               }
               repeated BufferModeInterface buffer_mode_interface = 1 [json_name = "buffer-mode-interface"];
            }
            BufferModeInterfaces buffer_mode_interfaces = 3 [json_name = "buffer-mode-interfaces"];
         }
         repeated BufferPolicy buffer_policy = 1 [json_name = "buffer-policy"];
      }
      BufferPolicys buffer_policys = 9 [json_name = "buffer-policys"];
   }
   QueueSchedulerTemplate queue_scheduler_template = 2 [json_name = "queue-scheduler-template"];
   message ClassifierTemplate {
      message DiffservDomains {
         message DiffservDomain {
            string name = 1 [json_name = "name"];
            message BehaviorAggregations {
               message BehaviorAggregation {
                  enum Type {
                     Type_X_8021P = 0;
                     Type_IPX_DSCP = 1;
                     Type_MPLSX_EXP = 2;
                     Type_USERX_PRIORITY = 3;
                     Type_IPX_PRECEDENCE = 11;
                  };
                  Type type = 1 [json_name = "type"];
                  uint32 value = 2 [json_name = "value"];
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 3 [json_name = "service-class"];
                  enum Color {
                     Color_GREEN = 0;
                     Color_YELLOW = 1;
                     Color_RED = 2;
                  };
                  Color color = 4 [json_name = "color"];
               }
               repeated BehaviorAggregation behavior_aggregation = 1 [json_name = "behavior-aggregation"];
            }
            BehaviorAggregations behavior_aggregations = 2 [json_name = "behavior-aggregations"];
            message PerHopBehaviors {
               message PerHopBehavior {
                  enum Type {
                     Type_X_8021P = 0;
                     Type_IPX_DSCP = 1;
                     Type_MPLSX_EXP = 2;
                     Type_IPX_PRECEDENCE = 11;
                  };
                  Type type = 1 [json_name = "type"];
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 2 [json_name = "service-class"];
                  enum Color {
                     Color_GREEN = 0;
                     Color_YELLOW = 1;
                     Color_RED = 2;
                  };
                  Color color = 3 [json_name = "color"];
                  uint32 value = 4 [json_name = "value"];
               }
               repeated PerHopBehavior per_hop_behavior = 1 [json_name = "per-hop-behavior"];
            }
            PerHopBehaviors per_hop_behaviors = 3 [json_name = "per-hop-behaviors"];
         }
         repeated DiffservDomain diffserv_domain = 1 [json_name = "diffserv-domain"];
      }
      DiffservDomains diffserv_domains = 1 [json_name = "diffserv-domains"];
      message TrafficClassifiers {
         message TrafficClassifier {
            string name = 1 [json_name = "name"];
            enum Operator {
               Operator_OR = 0;
               Operator_AND = 1;
            };
            Operator operator = 2 [json_name = "operator"];
            string description = 3 [json_name = "description"];
            message RuleAcls {
               message RuleAcl {
                  string acl_name = 1 [json_name = "acl-name"];
               }
               repeated RuleAcl rule_acl = 1 [json_name = "rule-acl"];
            }
            RuleAcls rule_acls = 4 [json_name = "rule-acls"];
            message RuleAclIpv6S {
               message RuleAclIpv6 {
                  string acl_name = 1 [json_name = "acl-name"];
               }
               repeated RuleAclIpv6 rule_acl_ipv6 = 1 [json_name = "rule-acl-ipv6"];
            }
            RuleAclIpv6S rule_acl_ipv6s = 5 [json_name = "rule-acl-ipv6s"];
            message RuleAnys {
               message RuleAny {
                  enum ProtocolFamily {
                     INVALID_ENUM_VALUE_ProtocolFamily = 0;
                     ProtocolFamily_IPV4 = 1;
                     ProtocolFamily_IPV6 = 2;
                  };
                  ProtocolFamily protocol_family = 1 [json_name = "protocol-family"];
               }
               repeated RuleAny rule_any = 1 [json_name = "rule-any"];
            }
            RuleAnys rule_anys = 6 [json_name = "rule-anys"];
         }
         repeated TrafficClassifier traffic_classifier = 1 [json_name = "traffic-classifier"];
      }
      TrafficClassifiers traffic_classifiers = 2 [json_name = "traffic-classifiers"];
      message TrafficBehaviors {
         message TrafficBehavior {
            string name = 1 [json_name = "name"];
            string description = 2 [json_name = "description"];
            message FilterAction {
               enum Filter {
                  Filter_PERMIT = 0;
                  Filter_DENY = 1;
               };
               Filter filter = 1 [json_name = "filter"];
            }
            FilterAction filter_action = 3 [json_name = "filter-action"];
            message ServiceClassActions {
               message ServiceClassAction {
                  enum ActionType {
                     ActionType_SERVICEX_CLASS = 0;
                     ActionType_SERVICEX_CLASSX_MASTERX_BFD = 1;
                     ActionType_SERVICEX_CLASSX_SLAVEX_BFD = 2;
                  };
                  ActionType action_type = 1 [json_name = "action-type"];
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 2 [json_name = "service-class"];
                  enum Color {
                     Color_GREEN = 0;
                     Color_YELLOW = 1;
                     Color_RED = 2;
                  };
                  Color color = 3 [json_name = "color"];
                  enum RemarkSwitch {
                     RemarkSwitch_ENABLE = 0;
                     RemarkSwitch_DISABLE = 1;
                  };
                  RemarkSwitch remark_switch = 4 [json_name = "remark-switch"];
                  string bfd_session_name = 5 [json_name = "bfd-session-name"];
               }
               repeated ServiceClassAction service_class_action = 1 [json_name = "service-class-action"];
            }
            ServiceClassActions service_class_actions = 4 [json_name = "service-class-actions"];
         }
         repeated TrafficBehavior traffic_behavior = 1 [json_name = "traffic-behavior"];
      }
      TrafficBehaviors traffic_behaviors = 3 [json_name = "traffic-behaviors"];
      message TrafficPolicys {
         message TrafficPolicy {
            string name = 1 [json_name = "name"];
            string description = 2 [json_name = "description"];
            uint32 step = 3 [json_name = "step"];
            enum ShareMode {
               ShareMode_DISABLE = 0;
               ShareMode_ENABLE = 1;
            };
            ShareMode share_mode = 4 [json_name = "share-mode"];
            enum StatFlag {
               StatFlag_DISABLE = 0;
               StatFlag_ENABLE = 1;
            };
            StatFlag stat_flag = 5 [json_name = "stat-flag"];
            enum LinkExclude {
               LinkExclude_DISABLE = 0;
               LinkExclude_ENABLE = 1;
            };
            LinkExclude link_exclude = 6 [json_name = "link-exclude"];
            message PolicyNodes {
               message PolicyNode {
                  string classifier_name = 1 [json_name = "classifier-name"];
                  string behavior_name = 2 [json_name = "behavior-name"];
                  uint32 priority = 3 [json_name = "priority"];
               }
               repeated PolicyNode policy_node = 1 [json_name = "policy-node"];
            }
            PolicyNodes policy_nodes = 7 [json_name = "policy-nodes"];
            message GroupModePolicyNodes {
               message GroupModePolicyNode {
                  string classifier_name = 1 [json_name = "classifier-name"];
                  enum Direction {
                     INVALID_ENUM_VALUE_Direction = 0;
                     Direction_SOURCE = 1;
                     Direction_DESTINATION = 2;
                  };
                  Direction direction = 2 [json_name = "direction"];
                  enum GroupType {
                     INVALID_ENUM_VALUE_GroupType = 0;
                     GroupType_SERVICEX_GROUP = 1;
                     GroupType_USERX_GROUP = 2;
                  };
                  GroupType group_type = 3 [json_name = "group-type"];
                  string group_name = 4 [json_name = "group-name"];
                  string behavior_name = 5 [json_name = "behavior-name"];
                  uint32 priority = 6 [json_name = "priority"];
               }
               repeated GroupModePolicyNode group_mode_policy_node = 1 [json_name = "group-mode-policy-node"];
            }
            GroupModePolicyNodes group_mode_policy_nodes = 8 [json_name = "group-mode-policy-nodes"];
            message Ipv6QosLocalIdEnables {
               message Ipv6QosLocalIdEnable {
                  enum Enable {
                     INVALID_ENUM_VALUE_Enable = 0;
                     Enable_ENABLE = 1;
                  };
                  Enable enable = 1 [json_name = "enable"];
               }
               Ipv6QosLocalIdEnable ipv6_qos_local_id_enable = 1 [json_name = "ipv6-qos-local-id-enable"];
            }
            Ipv6QosLocalIdEnables ipv6_qos_local_id_enables = 9 [json_name = "ipv6-qos-local-id-enables"];
         }
         repeated TrafficPolicy traffic_policy = 1 [json_name = "traffic-policy"];
      }
      TrafficPolicys traffic_policys = 4 [json_name = "traffic-policys"];
   }
   ClassifierTemplate classifier_template = 3 [json_name = "classifier-template"];
   message GlobalConfig {
      message GlobalPolicys {
         message GlobalPolicy {
            enum Direction {
               Direction_INBOUND = 0;
               Direction_OUTBOUND = 1;
            };
            Direction direction = 1 [json_name = "direction"];
            string policy_name = 2 [json_name = "policy-name"];
            uint32 up_id = 3 [json_name = "up-id"];
            enum UclType {
               UclType_UCL = 0;
               UclType_ACL = 1;
            };
            UclType ucl_type = 4 [json_name = "ucl-type"];
         }
         repeated GlobalPolicy global_policy = 1 [json_name = "global-policy"];
      }
      GlobalPolicys global_policys = 1 [json_name = "global-policys"];
      message TrafficPolicyMatchs {
         message TrafficPolicyMatch {
            enum Type {
               Type_IPX_LAYERX_PUSH = 0;
               Type_IPV6X_ADDRESSX_RULEX_MASK = 1;
               Type_PROTOCOLX_MCX_RESERVED = 2;
               Type_MPLSX_LAYERX_PUSH = 3;
               Type_MPLSX_LAYERX_L2X_INBOUND = 4;
               Type_RULEX_PACKET = 5;
               Type_MPLSX_LAYERX_POP = 6;
               Type_IPX_LAYERX_POP = 7;
            };
            Type type = 1 [json_name = "type"];
         }
         repeated TrafficPolicyMatch traffic_policy_match = 1 [json_name = "traffic-policy-match"];
      }
      TrafficPolicyMatchs traffic_policy_matchs = 2 [json_name = "traffic-policy-matchs"];
      message AclLog {
         uint32 entry_num = 1 [json_name = "entry-num"];
         uint32 agging_time = 2 [json_name = "agging-time"];
      }
      AclLog acl_log = 3 [json_name = "acl-log"];
      message GlobalSetQueueStat {
         enum Interval {
            INVALID_ENUM_VALUE_Interval = 0;
            Interval_X_5S = 5;
            Interval_X_30S = 30;
            Interval_X_300S = 300;
         };
         Interval interval = 1 [json_name = "interval"];
      }
      GlobalSetQueueStat global_set_queue_stat = 4 [json_name = "global-set-queue-stat"];
      message BufferPolicyApplys {
         message BufferPolicyApply {
            string name = 1 [json_name = "name"];
         }
         repeated BufferPolicyApply buffer_policy_apply = 1 [json_name = "buffer-policy-apply"];
      }
      BufferPolicyApplys buffer_policy_applys = 5 [json_name = "buffer-policy-applys"];
   }
   GlobalConfig global_config = 4 [json_name = "global-config"];
   message GlobalQuery {
      message DefaultQueueStatisticss {
         message DefaultQueueStatistics {
            string interface_name = 1 [json_name = "interface-name"];
            enum ServiceClass {
               ServiceClass_BE = 0;
               ServiceClass_AF1 = 1;
               ServiceClass_AF2 = 2;
               ServiceClass_AF3 = 3;
               ServiceClass_AF4 = 4;
               ServiceClass_EF = 5;
               ServiceClass_CS6 = 6;
               ServiceClass_CS7 = 7;
            };
            ServiceClass service_class = 2 [json_name = "service-class"];
            uint64 dropped_packets = 3 [json_name = "dropped-packets"];
            uint64 dropped_bytes = 4 [json_name = "dropped-bytes"];
            uint64 passed_pps = 5 [json_name = "passed-pps"];
            uint64 passed_bps = 6 [json_name = "passed-bps"];
            uint64 total_packets = 7 [json_name = "total-packets"];
            uint64 total_bytes = 8 [json_name = "total-bytes"];
            uint32 total_buffer = 9 [json_name = "total-buffer"];
            uint32 current_buffer = 10 [json_name = "current-buffer"];
            uint32 buffer_percent = 11 [json_name = "buffer-percent"];
            uint32 max_buffer_percent = 12 [json_name = "max-buffer-percent"];
            uint64 buffer_time = 13 [json_name = "buffer-time"];
            uint64 clean_time = 14 [json_name = "clean-time"];
         }
         repeated DefaultQueueStatistics default_queue_statistics = 1 [json_name = "default-queue-statistics"];
      }
      DefaultQueueStatisticss default_queue_statisticss = 1 [json_name = "default-queue-statisticss"];
      message AllQueueStatisticss {
         message AllQueueStatistics {
            string interface_name = 1 [json_name = "interface-name"];
            enum ServiceClass {
               ServiceClass_BE = 0;
               ServiceClass_AF1 = 1;
               ServiceClass_AF2 = 2;
               ServiceClass_AF3 = 3;
               ServiceClass_AF4 = 4;
               ServiceClass_EF = 5;
               ServiceClass_CS6 = 6;
               ServiceClass_CS7 = 7;
            };
            ServiceClass service_class = 2 [json_name = "service-class"];
            uint64 dropped_packets = 3 [json_name = "dropped-packets"];
            uint64 dropped_bytes = 4 [json_name = "dropped-bytes"];
            uint64 passed_pps = 5 [json_name = "passed-pps"];
            uint64 passed_bps = 6 [json_name = "passed-bps"];
            uint64 total_packets = 7 [json_name = "total-packets"];
            uint64 total_bytes = 8 [json_name = "total-bytes"];
         }
         repeated AllQueueStatistics all_queue_statistics = 1 [json_name = "all-queue-statistics"];
      }
      AllQueueStatisticss all_queue_statisticss = 2 [json_name = "all-queue-statisticss"];
      message ChannelQueueStatisticss {
         message ChannelQueueStatistics {
            string interface_name = 1 [json_name = "interface-name"];
            enum ServiceClass {
               ServiceClass_BE = 0;
               ServiceClass_AF1 = 1;
               ServiceClass_AF2 = 2;
               ServiceClass_AF3 = 3;
               ServiceClass_AF4 = 4;
               ServiceClass_EF = 5;
               ServiceClass_CS6 = 6;
               ServiceClass_CS7 = 7;
            };
            ServiceClass service_class = 2 [json_name = "service-class"];
            uint64 dropped_packets = 3 [json_name = "dropped-packets"];
            uint64 dropped_bytes = 4 [json_name = "dropped-bytes"];
            uint64 passed_pps = 5 [json_name = "passed-pps"];
            uint64 passed_bps = 6 [json_name = "passed-bps"];
            uint64 total_packets = 7 [json_name = "total-packets"];
            uint64 total_bytes = 8 [json_name = "total-bytes"];
            uint32 total_buffer = 9 [json_name = "total-buffer"];
            uint32 current_buffer = 10 [json_name = "current-buffer"];
            uint32 buffer_percent = 11 [json_name = "buffer-percent"];
            uint32 max_buffer_percent = 12 [json_name = "max-buffer-percent"];
            uint64 buffer_time = 13 [json_name = "buffer-time"];
            uint64 clean_time = 14 [json_name = "clean-time"];
         }
         repeated ChannelQueueStatistics channel_queue_statistics = 1 [json_name = "channel-queue-statistics"];
      }
      ChannelQueueStatisticss channel_queue_statisticss = 3 [json_name = "channel-queue-statisticss"];
      message UserInformations {
         message UserInformation {
            uint32 id = 1 [json_name = "id"];
            enum Direction {
               Direction_INBOUND = 0;
               Direction_OUTBOUND = 1;
            };
            Direction direction = 2 [json_name = "direction"];
            message UserQueueStatisticss {
               message UserQueueStatistics {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                     ServiceClass_TOTAL = 8;
                     ServiceClass_COS0 = 9;
                     ServiceClass_COS1 = 10;
                     ServiceClass_COS2 = 11;
                     ServiceClass_COS3 = 12;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  uint64 pass_packet_rate = 2 [json_name = "pass-packet-rate"];
                  uint64 pass_byte_rate = 3 [json_name = "pass-byte-rate"];
                  uint64 pass_packets = 4 [json_name = "pass-packets"];
                  uint64 pass_bytes = 5 [json_name = "pass-bytes"];
                  uint64 discard_packet_rate = 6 [json_name = "discard-packet-rate"];
                  uint64 discard_byte_rate = 7 [json_name = "discard-byte-rate"];
                  uint64 discard_packets = 8 [json_name = "discard-packets"];
                  uint64 discard_bytes = 9 [json_name = "discard-bytes"];
                  string pass_peak_packet_time = 10 [json_name = "pass-peak-packet-time"];
                  uint64 pass_peak_packet_rate = 11 [json_name = "pass-peak-packet-rate"];
                  string pass_peak_byte_time = 12 [json_name = "pass-peak-byte-time"];
                  uint64 pass_peak_byte_rate = 13 [json_name = "pass-peak-byte-rate"];
                  string drop_peak_packet_time = 14 [json_name = "drop-peak-packet-time"];
                  uint64 drop_peak_packet_rate = 15 [json_name = "drop-peak-packet-rate"];
                  string drop_peak_byte_time = 16 [json_name = "drop-peak-byte-time"];
                  uint64 drop_peak_byte_rate = 17 [json_name = "drop-peak-byte-rate"];
                  string tail_peak_packet_time = 18 [json_name = "tail-peak-packet-time"];
                  uint64 tail_peak_packet_rate = 19 [json_name = "tail-peak-packet-rate"];
                  string tail_peak_byte_time = 20 [json_name = "tail-peak-byte-time"];
                  uint64 tail_peak_byte_rate = 21 [json_name = "tail-peak-byte-rate"];
               }
               repeated UserQueueStatistics user_queue_statistics = 1 [json_name = "user-queue-statistics"];
            }
            UserQueueStatisticss user_queue_statisticss = 3 [json_name = "user-queue-statisticss"];
            message CarStatisticss {
               message CarStatistics {
                  enum ResourceType {
                     ResourceType_NULL = 0;
                     ResourceType_SQ = 1;
                     ResourceType_CAR = 2;
                     ResourceType_SQX_CAR = 3;
                     ResourceType_L2X_CAR = 4;
                     ResourceType_L2X_L3X_CAR = 5;
                     ResourceType_L3X_CAR = 6;
                  };
                  ResourceType resource_type = 1 [json_name = "resource-type"];
                  uint64 pass_packet_rate = 2 [json_name = "pass-packet-rate"];
                  uint64 pass_byte_rate = 3 [json_name = "pass-byte-rate"];
                  uint64 pass_packets = 4 [json_name = "pass-packets"];
                  uint64 pass_bytes = 5 [json_name = "pass-bytes"];
                  uint64 discard_packet_rate = 6 [json_name = "discard-packet-rate"];
                  uint64 discard_byte_rate = 7 [json_name = "discard-byte-rate"];
                  uint64 discard_packets = 8 [json_name = "discard-packets"];
                  uint64 discard_bytes = 9 [json_name = "discard-bytes"];
                  string pass_peak_packet_time = 10 [json_name = "pass-peak-packet-time"];
                  uint64 pass_peak_packet_rate = 11 [json_name = "pass-peak-packet-rate"];
                  string pass_peak_byte_time = 12 [json_name = "pass-peak-byte-time"];
                  uint64 pass_peak_byte_rate = 13 [json_name = "pass-peak-byte-rate"];
                  string drop_peak_packet_time = 14 [json_name = "drop-peak-packet-time"];
                  uint64 drop_peak_packet_rate = 15 [json_name = "drop-peak-packet-rate"];
                  string drop_peak_byte_time = 16 [json_name = "drop-peak-byte-time"];
                  uint64 drop_peak_byte_rate = 17 [json_name = "drop-peak-byte-rate"];
                  string v6_pass_peak_packet_time = 18 [json_name = "v6-pass-peak-packet-time"];
                  uint64 v6_pass_peak_packet_rate = 19 [json_name = "v6-pass-peak-packet-rate"];
                  string v6_pass_peak_byte_time = 20 [json_name = "v6-pass-peak-byte-time"];
                  uint64 v6_pass_peak_byte_rate = 21 [json_name = "v6-pass-peak-byte-rate"];
                  string v6_tail_peak_packet_time = 22 [json_name = "v6-tail-peak-packet-time"];
                  uint64 v6_tail_peak_packet_rate = 23 [json_name = "v6-tail-peak-packet-rate"];
                  string v6_tail_peak_byte_time = 24 [json_name = "v6-tail-peak-byte-time"];
                  uint64 v6_tail_peak_byte_rate = 25 [json_name = "v6-tail-peak-byte-rate"];
               }
               repeated CarStatistics car_statistics = 1 [json_name = "car-statistics"];
            }
            CarStatisticss car_statisticss = 4 [json_name = "car-statisticss"];
            message FlowQueueInfos {
               message FlowQueueInfo {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                     ServiceClass_TOTAL = 8;
                     ServiceClass_COS0 = 9;
                     ServiceClass_COS1 = 10;
                     ServiceClass_COS2 = 11;
                     ServiceClass_COS3 = 12;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  enum ScheduleType {
                     ScheduleType_PQ = 0;
                     ScheduleType_WFQ = 1;
                     ScheduleType_LPQ = 2;
                  };
                  ScheduleType schedule_type = 2 [json_name = "schedule-type"];
                  uint32 weight = 3 [json_name = "weight"];
                  uint32 shaping = 4 [json_name = "shaping"];
                  uint32 priority = 5 [json_name = "priority"];
               }
               repeated FlowQueueInfo flow_queue_info = 1 [json_name = "flow-queue-info"];
            }
            FlowQueueInfos flow_queue_infos = 5 [json_name = "flow-queue-infos"];
            message CirInfo {
               uint32 cir = 1 [json_name = "cir"];
               uint32 pir = 2 [json_name = "pir"];
            }
            CirInfo cir_info = 6 [json_name = "cir-info"];
         }
         repeated UserInformation user_information = 1 [json_name = "user-information"];
      }
      UserInformations user_informations = 4 [json_name = "user-informations"];
      message InterfaceTrafficPolicyStatisticss {
         message InterfaceTrafficPolicyStatistics {
            string interface_name = 1 [json_name = "interface-name"];
            uint32 pe_vlan_id = 2 [json_name = "pe-vlan-id"];
            uint32 vlan_id = 3 [json_name = "vlan-id"];
            enum Direction {
               Direction_INBOUND = 0;
               Direction_OUTBOUND = 1;
            };
            Direction direction = 4 [json_name = "direction"];
            string slot_id = 5 [json_name = "slot-id"];
            string traffic_policy_name = 6 [json_name = "traffic-policy-name"];
            string apply_time = 7 [json_name = "apply-time"];
            enum SwitchStatus {
               SwitchStatus_DISABLE = 0;
               SwitchStatus_ENABLE = 1;
            };
            SwitchStatus switch_status = 8 [json_name = "switch-status"];
            string switch_time = 9 [json_name = "switch-time"];
            string clear_time = 10 [json_name = "clear-time"];
            bool clear_flag = 11 [json_name = "clear-flag"];
            uint64 match_packets = 12 [json_name = "match-packets"];
            uint64 match_bytes = 13 [json_name = "match-bytes"];
            uint64 match_packet_rate = 14 [json_name = "match-packet-rate"];
            uint64 match_byte_rate = 15 [json_name = "match-byte-rate"];
            uint64 match_pass_packets = 16 [json_name = "match-pass-packets"];
            uint64 match_pass_bytes = 17 [json_name = "match-pass-bytes"];
            uint64 match_pass_packet_rate = 18 [json_name = "match-pass-packet-rate"];
            uint64 match_pass_byte_rate = 19 [json_name = "match-pass-byte-rate"];
            uint64 match_drop_packets = 20 [json_name = "match-drop-packets"];
            uint64 match_drop_bytes = 21 [json_name = "match-drop-bytes"];
            uint64 match_drop_packet_rate = 22 [json_name = "match-drop-packet-rate"];
            uint64 match_drop_byte_rate = 23 [json_name = "match-drop-byte-rate"];
            uint64 miss_packets = 24 [json_name = "miss-packets"];
            uint64 miss_bytes = 25 [json_name = "miss-bytes"];
            uint64 miss_packet_rate = 26 [json_name = "miss-packet-rate"];
            uint64 miss_byte_rate = 27 [json_name = "miss-byte-rate"];
            uint64 urpf_packets = 28 [json_name = "urpf-packets"];
            uint64 urpf_bytes = 29 [json_name = "urpf-bytes"];
            uint64 urpf_packet_rate = 30 [json_name = "urpf-packet-rate"];
            uint64 urpf_byte_rate = 31 [json_name = "urpf-byte-rate"];
            uint64 car_packets = 32 [json_name = "car-packets"];
            uint64 car_bytes = 33 [json_name = "car-bytes"];
            uint64 car_packet_rate = 34 [json_name = "car-packet-rate"];
            uint64 car_byte_rate = 35 [json_name = "car-byte-rate"];
            uint64 filter_packets = 36 [json_name = "filter-packets"];
            uint64 filter_bytes = 37 [json_name = "filter-bytes"];
            uint64 filter_packet_rate = 38 [json_name = "filter-packet-rate"];
            uint64 filter_byte_rate = 39 [json_name = "filter-byte-rate"];
            message RuleBasedStaticss {
               message RuleBasedStatics {
                  string classifier_name = 1 [json_name = "classifier-name"];
                  string traffic_policy_name = 2 [json_name = "traffic-policy-name"];
                  enum ServiceType {
                     ServiceType_NORMAL = 0;
                     ServiceType_VBDX_IF = 1;
                     ServiceType_MULTIX_TYPE = 2;
                     ServiceType_VLANX_IF = 3;
                  };
                  ServiceType service_type = 3 [json_name = "service-type"];
                  uint32 ifmatch_id = 4 [json_name = "ifmatch-id"];
                  string acl_name = 5 [json_name = "acl-name"];
                  enum ProtocolFamily {
                     INVALID_ENUM_VALUE_ProtocolFamily = 0;
                     ProtocolFamily_IPV4 = 1;
                     ProtocolFamily_IPV6 = 2;
                  };
                  ProtocolFamily protocol_family = 6 [json_name = "protocol-family"];
                  uint32 rule_id = 7 [json_name = "rule-id"];
                  uint64 match_pass_packets = 8 [json_name = "match-pass-packets"];
                  uint64 match_pass_bytes = 9 [json_name = "match-pass-bytes"];
                  uint64 match_drop_packets = 10 [json_name = "match-drop-packets"];
                  uint64 match_drop_bytes = 11 [json_name = "match-drop-bytes"];
               }
               repeated RuleBasedStatics rule_based_statics = 1 [json_name = "rule-based-statics"];
            }
            RuleBasedStaticss rule_based_staticss = 40 [json_name = "rule-based-staticss"];
            message ClassifierBasedStaticss {
               message ClassifierBasedStatics {
                  string classifier_name = 1 [json_name = "classifier-name"];
                  string traffic_policy_name = 2 [json_name = "traffic-policy-name"];
                  enum ServiceType {
                     ServiceType_NORMAL = 0;
                     ServiceType_VBDX_IF = 1;
                     ServiceType_MULTIX_TYPE = 2;
                     ServiceType_VLANX_IF = 3;
                  };
                  ServiceType service_type = 3 [json_name = "service-type"];
                  enum ShareMode {
                     ShareMode_DISABLE = 0;
                     ShareMode_ENABLE = 1;
                  };
                  ShareMode share_mode = 4 [json_name = "share-mode"];
                  uint64 match_pass_packets = 5 [json_name = "match-pass-packets"];
                  uint64 match_pass_bytes = 6 [json_name = "match-pass-bytes"];
                  uint64 match_drop_packets = 7 [json_name = "match-drop-packets"];
                  uint64 match_drop_bytes = 8 [json_name = "match-drop-bytes"];
               }
               repeated ClassifierBasedStatics classifier_based_statics = 1 [json_name = "classifier-based-statics"];
            }
            ClassifierBasedStaticss classifier_based_staticss = 41 [json_name = "classifier-based-staticss"];
            message ClassifierStatisticss {
               message ClassifierStatistics {
                  string classifier_name = 1 [json_name = "classifier-name"];
                  uint64 match_packets = 2 [json_name = "match-packets"];
                  uint64 match_bytes = 3 [json_name = "match-bytes"];
                  uint64 match_packet_rate = 4 [json_name = "match-packet-rate"];
                  uint64 match_byte_rate = 5 [json_name = "match-byte-rate"];
                  uint64 match_pass_packets = 6 [json_name = "match-pass-packets"];
                  uint64 match_pass_bytes = 7 [json_name = "match-pass-bytes"];
                  uint64 match_pass_packet_rate = 8 [json_name = "match-pass-packet-rate"];
                  uint64 match_pass_byte_rate = 9 [json_name = "match-pass-byte-rate"];
                  uint64 match_drop_packets = 10 [json_name = "match-drop-packets"];
                  uint64 match_drop_bytes = 11 [json_name = "match-drop-bytes"];
                  uint64 match_drop_packet_rate = 12 [json_name = "match-drop-packet-rate"];
                  uint64 match_drop_byte_rate = 13 [json_name = "match-drop-byte-rate"];
                  uint64 urpf_drop_packets = 14 [json_name = "urpf-drop-packets"];
                  uint64 urpf_drop_bytes = 15 [json_name = "urpf-drop-bytes"];
                  uint64 urpf_drop_packet_rate = 16 [json_name = "urpf-drop-packet-rate"];
                  uint64 urpf_drop_byte_rate = 17 [json_name = "urpf-drop-byte-rate"];
                  uint64 car_packets = 18 [json_name = "car-packets"];
                  uint64 car_bytes = 19 [json_name = "car-bytes"];
                  uint64 car_packet_rate = 20 [json_name = "car-packet-rate"];
                  uint64 car_byte_rate = 21 [json_name = "car-byte-rate"];
                  uint64 car_pass_packets = 22 [json_name = "car-pass-packets"];
                  uint64 car_pass_bytes = 23 [json_name = "car-pass-bytes"];
                  uint64 car_pass_packet_rate = 24 [json_name = "car-pass-packet-rate"];
                  uint64 car_pass_byte_rate = 25 [json_name = "car-pass-byte-rate"];
                  uint64 car_drop_packets = 26 [json_name = "car-drop-packets"];
                  uint64 car_drop_bytes = 27 [json_name = "car-drop-bytes"];
                  uint64 car_drop_packet_rate = 28 [json_name = "car-drop-packet-rate"];
                  uint64 car_drop_byte_rate = 29 [json_name = "car-drop-byte-rate"];
                  uint64 car_green_packets = 30 [json_name = "car-green-packets"];
                  uint64 car_green_bytes = 31 [json_name = "car-green-bytes"];
                  uint64 car_green_packet_rate = 32 [json_name = "car-green-packet-rate"];
                  uint64 car_green_byte_rate = 33 [json_name = "car-green-byte-rate"];
                  uint64 car_yellow_packets = 34 [json_name = "car-yellow-packets"];
                  uint64 car_yellow_bytes = 35 [json_name = "car-yellow-bytes"];
                  uint64 car_yellow_packet_rate = 36 [json_name = "car-yellow-packet-rate"];
                  uint64 car_yellow_byte_rate = 37 [json_name = "car-yellow-byte-rate"];
                  uint64 car_red_packets = 38 [json_name = "car-red-packets"];
                  uint64 car_red_bytes = 39 [json_name = "car-red-bytes"];
                  uint64 car_red_packet_rate = 40 [json_name = "car-red-packet-rate"];
                  uint64 car_red_byte_rate = 41 [json_name = "car-red-byte-rate"];
                  uint64 filter_packets = 42 [json_name = "filter-packets"];
                  uint64 filter_bytes = 43 [json_name = "filter-bytes"];
                  uint64 filter_packet_rate = 44 [json_name = "filter-packet-rate"];
                  uint64 filter_byte_rate = 45 [json_name = "filter-byte-rate"];
                  uint64 unknownunisup_pass_packets = 46 [json_name = "unknownunisup-pass-packets"];
                  uint64 unknownunisup_pass_bytes = 47 [json_name = "unknownunisup-pass-bytes"];
                  uint64 unknownunisup_pass_packet_rate = 48 [json_name = "unknownunisup-pass-packet-rate"];
                  uint64 unknownunisup_pass_byte_rate = 49 [json_name = "unknownunisup-pass-byte-rate"];
                  uint64 unknownunisup_drop_packets = 50 [json_name = "unknownunisup-drop-packets"];
                  uint64 unknownunisup_drop_bytes = 51 [json_name = "unknownunisup-drop-bytes"];
                  uint64 unknownunisup_drop_packet_rate = 52 [json_name = "unknownunisup-drop-packet-rate"];
                  uint64 unknownunisup_drop_byte_rate = 53 [json_name = "unknownunisup-drop-byte-rate"];
                  uint64 multicastsup_pass_packets = 54 [json_name = "multicastsup-pass-packets"];
                  uint64 multicastsup_pass_bytes = 55 [json_name = "multicastsup-pass-bytes"];
                  uint64 multicastsup_pass_packet_rate = 56 [json_name = "multicastsup-pass-packet-rate"];
                  uint64 multicastsup_pass_byte_rate = 57 [json_name = "multicastsup-pass-byte-rate"];
                  uint64 multicastsup_drop_packets = 58 [json_name = "multicastsup-drop-packets"];
                  uint64 multicastsup_drop_bytes = 59 [json_name = "multicastsup-drop-bytes"];
                  uint64 multicastsup_drop_packet_rate = 60 [json_name = "multicastsup-drop-packet-rate"];
                  uint64 multicastsup_drop_byte_rate = 61 [json_name = "multicastsup-drop-byte-rate"];
                  uint64 broadcastsup_pass_packets = 62 [json_name = "broadcastsup-pass-packets"];
                  uint64 broadcastsup_pass_bytes = 63 [json_name = "broadcastsup-pass-bytes"];
                  uint64 broadcastsup_pass_packet_rate = 64 [json_name = "broadcastsup-pass-packet-rate"];
                  uint64 broadcastsup_pass_byte_rate = 65 [json_name = "broadcastsup-pass-byte-rate"];
                  uint64 broadcastsup_drop_packets = 66 [json_name = "broadcastsup-drop-packets"];
                  uint64 broadcastsup_drop_bytes = 67 [json_name = "broadcastsup-drop-bytes"];
                  uint64 broadcastsup_drop_packet_rate = 68 [json_name = "broadcastsup-drop-packet-rate"];
                  uint64 broadcastsup_drop_byte_rate = 69 [json_name = "broadcastsup-drop-byte-rate"];
               }
               repeated ClassifierStatistics classifier_statistics = 1 [json_name = "classifier-statistics"];
            }
            ClassifierStatisticss classifier_statisticss = 42 [json_name = "classifier-statisticss"];
         }
         repeated InterfaceTrafficPolicyStatistics interface_traffic_policy_statistics = 1 [json_name = "interface-traffic-policy-statistics"];
      }
      InterfaceTrafficPolicyStatisticss interface_traffic_policy_statisticss = 5 [json_name = "interface-traffic-policy-statisticss"];
      message CarResources {
         message CarResource {
            string slot_id = 1 [json_name = "slot-id"];
            string car_type = 2 [json_name = "car-type"];
            uint32 inbound_resource = 3 [json_name = "inbound-resource"];
            uint32 outbound_resource = 4 [json_name = "outbound-resource"];
         }
         repeated CarResource car_resource = 1 [json_name = "car-resource"];
      }
      CarResources car_resources = 6 [json_name = "car-resources"];
      message TrafficBufferUses {
         message TrafficBufferUse {
            string slot_id = 1 [json_name = "slot-id"];
            enum Direction {
               Direction_INBOUND = 0;
               Direction_OUTBOUND = 1;
               Direction_ALL = 2;
            };
            Direction direction = 2 [json_name = "direction"];
            string chip_name = 3 [json_name = "chip-name"];
            string chip_type = 4 [json_name = "chip-type"];
            uint32 total_size = 5 [json_name = "total-size"];
            uint32 used_size = 6 [json_name = "used-size"];
         }
         repeated TrafficBufferUse traffic_buffer_use = 1 [json_name = "traffic-buffer-use"];
      }
      TrafficBufferUses traffic_buffer_uses = 7 [json_name = "traffic-buffer-uses"];
      message TrafficPolicyApplicationResources {
         message TrafficPolicyApplicationResource {
            string slot_id = 1 [json_name = "slot-id"];
            uint32 used = 2 [json_name = "used"];
            uint32 free = 3 [json_name = "free"];
         }
         repeated TrafficPolicyApplicationResource traffic_policy_application_resource = 1 [json_name = "traffic-policy-application-resource"];
      }
      TrafficPolicyApplicationResources traffic_policy_application_resources = 8 [json_name = "traffic-policy-application-resources"];
      message UserGroupQueueResources {
         message UserGroupQueueResource {
            string slot_id = 1 [json_name = "slot-id"];
            enum Direction {
               Direction_INBOUND = 0;
               Direction_OUTBOUND = 1;
            };
            Direction direction = 2 [json_name = "direction"];
            string tm_type = 3 [json_name = "tm-type"];
            string resource_pool = 4 [json_name = "resource-pool"];
            uint32 used_id_resource = 5 [json_name = "used-id-resource"];
            uint32 free_id_resource = 6 [json_name = "free-id-resource"];
         }
         repeated UserGroupQueueResource user_group_queue_resource = 1 [json_name = "user-group-queue-resource"];
      }
      UserGroupQueueResources user_group_queue_resources = 9 [json_name = "user-group-queue-resources"];
      message InterfaceProfileStatistics {
         message UserQueues {
            message UserQueue {
               string interface_name = 1 [json_name = "interface-name"];
               uint32 pe_vlan_id = 2 [json_name = "pe-vlan-id"];
               uint32 vlan_id = 3 [json_name = "vlan-id"];
               enum Direction {
                  Direction_INBOUND = 0;
                  Direction_OUTBOUND = 1;
               };
               Direction direction = 4 [json_name = "direction"];
               enum ServiceClass {
                  ServiceClass_BE = 0;
                  ServiceClass_AF1 = 1;
                  ServiceClass_AF2 = 2;
                  ServiceClass_AF3 = 3;
                  ServiceClass_AF4 = 4;
                  ServiceClass_EF = 5;
                  ServiceClass_CS6 = 6;
                  ServiceClass_CS7 = 7;
                  ServiceClass_TOTAL = 8;
               };
               ServiceClass service_class = 5 [json_name = "service-class"];
               uint64 pass_packets = 6 [json_name = "pass-packets"];
               uint64 pass_bytes = 7 [json_name = "pass-bytes"];
               uint64 pass_packet_rate = 8 [json_name = "pass-packet-rate"];
               uint64 pass_byte_rate = 9 [json_name = "pass-byte-rate"];
               uint64 drop_packets = 10 [json_name = "drop-packets"];
               uint64 drop_bytes = 11 [json_name = "drop-bytes"];
               uint64 drop_packet_rate = 12 [json_name = "drop-packet-rate"];
               uint64 drop_byte_rate = 13 [json_name = "drop-byte-rate"];
               uint64 random_drop_packets = 14 [json_name = "random-drop-packets"];
               uint64 random_drop_bytes = 15 [json_name = "random-drop-bytes"];
               uint64 random_drop_packet_rate = 16 [json_name = "random-drop-packet-rate"];
               uint64 random_drop_byte_rate = 17 [json_name = "random-drop-byte-rate"];
               string time_stamp = 18 [json_name = "time-stamp"];
               uint32 buffer_total = 19 [json_name = "buffer-total"];
               uint32 buffer_used = 20 [json_name = "buffer-used"];
            }
            repeated UserQueue user_queue = 1 [json_name = "user-queue"];
         }
         UserQueues user_queues = 1 [json_name = "user-queues"];
      }
      InterfaceProfileStatistics interface_profile_statistics = 10 [json_name = "interface-profile-statistics"];  
   }
   GlobalQuery global_query = 5 [json_name = "global-query"];
}

message HwXQoSPortQueueAlarm {
  int32 InterfaceIndex = 1;
  string Queue = 2;
  int32 TrunkIndex = 3;
}

message HwXQoSPortQueueAlarmClear {
  int32 InterfaceIndex = 1;
  string Queue = 2;
  int32 TrunkIndex = 3;
}