syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2019-09-27 09:45:29
// ProtoYang-version 1
// module huawei-network-instance
// revision 2019-04-27
// namespace urn:huawei:yang:huawei-network-instance

package huawei_network_instance;

message NetworkInstance {
   message Instances {
      message Instance {
         string name = 1 [json_name = "name"];
         string description = 2 [json_name = "description"];
         message Afs {
            message Af {
               enum Type {
                  INVALID_ENUM_VALUE_Type = 0;
                  Type_IPV4X_UNICAST = 1;
                  Type_IPV6X_UNICAST = 5;
               };
               Type type = 1 [json_name = "type"];
               string route_distinguisher = 2 [json_name = "route-distinguisher"];
               message ImportPolicyType {
                  message RtpRef {
                     string import_policy = 1 [json_name = "import-policy"];
                  }
                  RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
               }
               ImportPolicyType import_policy_type = 3 [json_name = "import-policy-type"];
               message ExportPolicyType {
                  message RtpRef {
                     string export_policy = 1 [json_name = "export-policy"];
                  }
                  RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
               }
               ExportPolicyType export_policy_type = 4 [json_name = "export-policy-type"];
               enum LabelMode {
                  LabelMode_PERX_ROUTE = 0;
                  LabelMode_PERX_INSTANCE = 1;
                  LabelMode_PERX_NEXTHOP = 2;
               };
               LabelMode label_mode = 5 [json_name = "label-mode"];
               bool vpn_frr = 6 [json_name = "vpn-frr"];
               string tunnel_policy = 7 [json_name = "tunnel-policy"];
               message VpnTargets {
                  message VpnTarget {
                     string value = 1 [json_name = "value"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_EXPORTX_EXTCOMMUNITY = 2;
                        Type_IMPORTX_EXTCOMMUNITY = 3;
                     };
                     Type type = 2 [json_name = "type"];
                  }
                  repeated VpnTarget vpn_target = 1 [json_name = "vpn-target"];
               }
               VpnTargets vpn_targets = 8 [json_name = "vpn-targets"];
               message Routing {
                  message RoutingManage {
                     message Topologys {
                        message Topology {
                           string name = 1 [json_name = "name"];
                           message Routes {
                              message Ipv4UnicastRoutes {
                                 message Ipv4UnicastRoute {
                                    string prefix = 1 [json_name = "prefix"];
                                    uint32 mask_length = 2 [json_name = "mask-length"];
                                    enum ProtocolType {
                                       ProtocolType_INIT = 0;
                                       ProtocolType_DIRECT = 1;
                                       ProtocolType_OSPF = 2;
                                       ProtocolType_ISIS = 3;
                                       ProtocolType_STATIC = 4;
                                       ProtocolType_RIP = 5;
                                       ProtocolType_BGP = 6;
                                       ProtocolType_OSPFV3 = 7;
                                       ProtocolType_RIPNG = 8;
                                       ProtocolType_TOTAL = 9;
                                       ProtocolType_NETX_STREAM = 10;
                                       ProtocolType_UNR = 11;
                                       ProtocolType_OPR = 14;
                                    };
                                    ProtocolType protocol_type = 3 [json_name = "protocol-type"];
                                    string interface_name = 4 [json_name = "interface-name"];
                                    uint32 process_id = 5 [json_name = "process-id"];
                                    string direct_nexthop = 6 [json_name = "direct-nexthop"];
                                    string nexthop = 7 [json_name = "nexthop"];
                                    enum FrrType {
                                       FrrType_PRIMARY = 0;
                                       FrrType_BACKUP = 1;
                                    };
                                    FrrType frr_type = 8 [json_name = "frr-type"];
                                    uint32 preference = 9 [json_name = "preference"];
                                    uint32 cost = 10 [json_name = "cost"];
                                    enum Flag {
                                       Flag_INVALID = 0;
                                       Flag_D = 1;
                                       Flag_RD = 2;
                                       Flag_R = 3;
                                       Flag_T = 4;
                                       Flag_DT = 5;
                                       Flag_RDT = 6;
                                       Flag_RT = 7;
                                       Flag_DB = 8;
                                       Flag_RDB = 9;
                                       Flag_RB = 10;
                                       Flag_TB = 11;
                                       Flag_DTB = 12;
                                       Flag_RDTB = 13;
                                       Flag_RTB = 14;
                                       Flag_B = 15;
                                    };
                                    Flag flag = 11 [json_name = "flag"];
                                    string qos_id = 12 [json_name = "qos-id"];
                                    bool active = 13 [json_name = "active"];
                                    uint32 tag = 14 [json_name = "tag"];
                                    enum Priority {
                                       INVALID_ENUM_VALUE_Priority = 0;
                                       Priority_CRITICAL = 1;
                                       Priority_HIGH = 2;
                                       Priority_MEDIUM = 3;
                                       Priority_LOW = 4;
                                    };
                                    Priority priority = 15 [json_name = "priority"];
                                    uint32 label = 16 [json_name = "label"];
                                    string indirect_id = 17 [json_name = "indirect-id"];
                                    enum State {
                                       State_INVALID = 0;
                                       State_ACTIVEX_ADV = 1;
                                       State_ACTIVEX_NOADV = 2;
                                       State_INACTIVEX_ADV = 3;
                                       State_ACTIVEX_ADVX_RELIED = 4;
                                       State_INVALIDX_ADV = 5;
                                       State_ACTIVEX_NOADVX_RELIED = 6;
                                       State_INVALIDX_NOADV = 7;
                                       State_INACTIVEX_NOADV = 8;
                                       State_INACTIVEX_ADVX_RELIED = 9;
                                       State_INACTIVEX_NOADVX_RELIED = 10;
                                    };
                                    State state = 18 [json_name = "state"];
                                    string neighbour = 19 [json_name = "neighbour"];
                                    string age = 20 [json_name = "age"];
                                    enum SubProtocolType {
                                       SubProtocolType_NOX_SUBX_PROTOCOL = 0;
                                       SubProtocolType_INTRAX_AREA = 1;
                                       SubProtocolType_INTERX_AREA = 2;
                                       SubProtocolType_EXTERNAL1 = 3;
                                       SubProtocolType_EXTERNAL2 = 4;
                                       SubProtocolType_NSSA1 = 5;
                                       SubProtocolType_NSSA2 = 6;
                                       SubProtocolType_LEVEL1 = 7;
                                       SubProtocolType_LEVEL2 = 8;
                                       SubProtocolType_IBGP = 9;
                                       SubProtocolType_EBGP = 10;
                                       SubProtocolType_VLINK = 11;
                                       SubProtocolType_UNRX_IPPOOL = 12;
                                       SubProtocolType_UNRX_HOST = 13;
                                       SubProtocolType_UNRX_IPSEC = 14;
                                       SubProtocolType_UNRX_FRAMED = 15;
                                       SubProtocolType_WLRX_BH = 16;
                                       SubProtocolType_WLRX_UD = 17;
                                       SubProtocolType_WLRX_SP = 18;
                                       SubProtocolType_VLINKX_TRM = 19;
                                       SubProtocolType_UNRX_AAAX_DOWNLOAD = 20;
                                    };
                                    SubProtocolType sub_protocol_type = 21 [json_name = "sub-protocol-type"];
                                 }
                                 repeated Ipv4UnicastRoute ipv4_unicast_route = 1 [json_name = "ipv4-unicast-route"];
                              }
                              Ipv4UnicastRoutes ipv4_unicast_routes = 1 [json_name = "ipv4-unicast-routes"];
                           }
                           Routes routes = 2 [json_name = "routes"];
                        }
                        repeated Topology topology = 1 [json_name = "topology"];
                     }
                     Topologys topologys = 1 [json_name = "topologys"];
                     message Option {
                        bool frr_enable = 1 [json_name = "frr-enable"];
                        uint32 prefix_limit_number = 2 [json_name = "prefix-limit-number"];
                        message PrefixAlertType {
                           message Percent {
                              uint32 prefix_alert_percent = 1 [json_name = "prefix-alert-percent"];
                              bool route_unchanged = 2 [json_name = "route-unchanged"];
                           }
                           Percent percent = 1 [json_name = "percent"];
                           message Alert {
                              bool prefix_simply_alert = 1 [json_name = "prefix-simply-alert"];
                           }
                           Alert alert = 2 [json_name = "alert"];
                        }
                        PrefixAlertType prefix_alert_type = 3 [json_name = "prefix-alert-type"];
                        uint32 route_limit_number = 4 [json_name = "route-limit-number"];
                        message RouteAlertType {
                           message Percent {
                              uint32 route_alert_percent = 1 [json_name = "route-alert-percent"];
                           }
                           Percent percent = 1 [json_name = "percent"];
                           message Alert {
                              bool route_simply_alert = 1 [json_name = "route-simply-alert"];
                           }
                           Alert alert = 2 [json_name = "alert"];
                        }
                        RouteAlertType route_alert_type = 5 [json_name = "route-alert-type"];
                     }
                     Option option = 2 [json_name = "option"];
                  }
                  RoutingManage routing_manage = 1 [json_name = "routing-manage"];
                  message StaticRouting {
                     message UnicastRoutes {
                        message UnicastRoute {
                           string topology_name = 1 [json_name = "topology-name"];
                           string prefix = 2 [json_name = "prefix"];
                           uint32 mask_length = 3 [json_name = "mask-length"];
                           string interface_name = 4 [json_name = "interface-name"];
                           string vpn_destination_name = 5 [json_name = "vpn-destination-name"];
                           string next_hop = 6 [json_name = "next-hop"];
                           int32 preference = 7 [json_name = "preference"];
                           string description = 8 [json_name = "description"];
                           uint32 tag = 9 [json_name = "tag"];
                           uint32 cost = 10 [json_name = "cost"];
                           bool inherit_cost = 11 [json_name = "inherit-cost"];
                           bool permanent = 12 [json_name = "permanent"];
                           bool no_advertise = 13 [json_name = "no-advertise"];
                           bool no_install = 14 [json_name = "no-install"];
                           bool relay_host_route = 15 [json_name = "relay-host-route"];
                           bool dhcp_enable = 16 [json_name = "dhcp-enable"];
                           bool ldp_sync = 17 [json_name = "ldp-sync"];
                           bool inter_protocol_ecmp = 18 [json_name = "inter-protocol-ecmp"];
                           message TrackSetting {
                              message Bfd {
                                 string session_name = 1 [json_name = "session-name"];
                              }
                              Bfd bfd = 1 [json_name = "bfd"];
                              message Efm {
                                 string name = 1 [json_name = "name"];
                              }
                              Efm efm = 2 [json_name = "efm"];
                           }
                           TrackSetting track_setting = 19 [json_name = "track-setting"];
                        }
                        repeated UnicastRoute unicast_route = 1 [json_name = "unicast-route"];
                     }
                     UnicastRoutes unicast_routes = 1 [json_name = "unicast-routes"];
                     message ImportRibs {
                        message ImportRib {
                           string source_vpn = 1 [json_name = "source-vpn"];
                           bool valid_route = 2 [json_name = "valid-route"];
                           message PolicyType {
                              message RtpRef {
                                 string policy_name = 1 [json_name = "policy-name"];
                              }
                              RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              message XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              XplRef xpl_ref = 2 [json_name = "xpl-ref"];
                           }
                           PolicyType policy_type = 3 [json_name = "policy-type"];
                        }
                        repeated ImportRib import_rib = 1 [json_name = "import-rib"];
                     }
                     ImportRibs import_ribs = 2 [json_name = "import-ribs"];
                     message RouteFrrSet {
                        bool unicast_route_frr_enable = 1 [json_name = "unicast-route-frr-enable"];
                        bool multicast_route_frr_enable = 2 [json_name = "multicast-route-frr-enable"];
                     }
                     RouteFrrSet route_frr_set = 3 [json_name = "route-frr-set"];
                  }
                  StaticRouting static_routing = 2 [json_name = "static-routing"];
                  message DirectRouting {
                     message ImportRibs {
                        message ImportRib {
                           string source_vpn = 1 [json_name = "source-vpn"];
                           message PolicyType {
                              message RtpRef {
                                 string policy_name = 1 [json_name = "policy-name"];
                              }
                              RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              message XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              XplRef xpl_ref = 2 [json_name = "xpl-ref"];
                           }
                           PolicyType policy_type = 2 [json_name = "policy-type"];
                        }
                        repeated ImportRib import_rib = 1 [json_name = "import-rib"];
                     }
                     ImportRibs import_ribs = 1 [json_name = "import-ribs"];
                  }
                  DirectRouting direct_routing = 3 [json_name = "direct-routing"];
               }
               Routing routing = 9 [json_name = "routing"];
               bool export_policy_add_ert_first = 10 [json_name = "export-policy-add-ert-first"];
               bool transit_vpn = 11 [json_name = "transit-vpn"];
               enum LspOperation {
                  LspOperation_POP = 0;
                  LspOperation_POPX_GO = 1;
               };
               LspOperation lsp_operation = 12 [json_name = "lsp-operation"];
               message State {
                  string create_time = 1 [json_name = "create-time"];
                  uint32 up_time = 2 [json_name = "up-time"];
                  uint32 label = 3 [json_name = "label"];
                  enum Status {
                     INVALID_ENUM_VALUE_Status = 0;
                     Status_UP = 1;
                     Status_DOWN = 2;
                  };
                  Status status = 4 [json_name = "status"];
               }
               State state = 13 [json_name = "state"];
               message Mvpn {
                  string mvpn_id = 1 [json_name = "mvpn-id"];
                  message MvpnType {
                     message NgMvpn {
                        message Ng {
                           enum SignalingMode {
                              SignalingMode_INVALID = 0;
                              SignalingMode_BGP = 2;
                           };
                           SignalingMode signaling_mode = 1 [json_name = "signaling-mode"];
                           bool is_sender_site = 2 [json_name = "is-sender-site"];
                           enum RptSptMode {
                              RptSptMode_NONE = 0;
                              RptSptMode_SPTX_MODE = 1;
                              RptSptMode_RPTX_SPTX_MODE = 2;
                           };
                           RptSptMode rpt_spt_mode = 3 [json_name = "rpt-spt-mode"];
                           bool is_inter_as = 4 [json_name = "is-inter-as"];
                           bool is_c_multicast_frr = 5 [json_name = "is-c-multicast-frr"];
                           string frr_flow_based_acl_name = 6 [json_name = "frr-flow-based-acl-name"];
                           bool is_compatible_draft = 7 [json_name = "is-compatible-draft"];
                           bool is_export_msdp = 8 [json_name = "is-export-msdp"];
                           bool is_import_msdp = 9 [json_name = "is-import-msdp"];
                           uint32 spmsi_tnl_detect_delay = 10 [json_name = "spmsi-tnl-detect-delay"];
                           uint32 rpt_prune_delay = 11 [json_name = "rpt-prune-delay"];
                           bool inter_area_seg_enable = 12 [json_name = "inter-area-seg-enable"];
                           enum UmhSelectType {
                              UmhSelectType_UNICAST = 0;
                              UmhSelectType_HIGHESTX_IP = 1;
                           };
                           UmhSelectType umh_select_type = 13 [json_name = "umh-select-type"];
                           message RouteTargets {
                              message RouteTarget {
                                 enum RtType {
                                    INVALID_ENUM_VALUE_RtType = 0;
                                    RtType_EXPORTX_EXTCOMMUNITY = 2;
                                    RtType_IMPORTX_EXTCOMMUNITY = 3;
                                 };
                                 RtType rt_type = 1 [json_name = "rt-type"];
                                 string rt_value = 2 [json_name = "rt-value"];
                              }
                              repeated RouteTarget route_target = 1 [json_name = "route-target"];
                           }
                           RouteTargets route_targets = 14 [json_name = "route-targets"];
                           message IpmsiTunnel {
                              enum TunnelMode {
                                 INVALID_ENUM_VALUE_TunnelMode = 0;
                                 TunnelMode_P2MPX_TE = 3;
                                 TunnelMode_P2MPX_MLDP = 4;
                              };
                              TunnelMode tunnel_mode = 1 [json_name = "tunnel-mode"];
                              message TunnelAttribute {
                                 message RsvpTeP2Mp {
                                    string rsvp_te_p2mp_template = 1 [json_name = "rsvp-te-p2mp-template"];
                                 }
                                 RsvpTeP2Mp rsvp_te_p2mp = 1 [json_name = "rsvp-te-p2mp"];
                              }
                              TunnelAttribute tunnel_attribute = 2 [json_name = "tunnel-attribute"];
                              message IpmsiInfos {
                                 enum TunnelMode {
                                    INVALID_ENUM_VALUE_TunnelMode = 0;
                                    TunnelMode_P2MPX_TE = 3;
                                    TunnelMode_P2MPX_MLDP = 4;
                                 };
                                 TunnelMode tunnel_mode = 1 [json_name = "tunnel-mode"];
                                 message TunnelAttribute {
                                    message RsvpTeP2Mp {
                                       string te_p2mp_id = 1 [json_name = "te-p2mp-id"];
                                       uint32 te_tunnel_id = 2 [json_name = "te-tunnel-id"];
                                       string te_extend_tunnel_id = 3 [json_name = "te-extend-tunnel-id"];
                                    }
                                    RsvpTeP2Mp rsvp_te_p2mp = 1 [json_name = "rsvp-te-p2mp"];
                                    message MldpP2Mp {
                                       string ldp_route_addr = 1 [json_name = "ldp-route-addr"];
                                       string ldp_lsp_id = 2 [json_name = "ldp-lsp-id"];
                                    }
                                    MldpP2Mp mldp_p2mp = 2 [json_name = "mldp-p2mp"];
                                 }
                                 TunnelAttribute tunnel_attribute = 2 [json_name = "tunnel-attribute"];
                                 message Tunnels {
                                    message Tunnel {
                                       string address = 1 [json_name = "address"];
                                       string role = 2 [json_name = "role"];
                                    }
                                    repeated Tunnel tunnel = 1 [json_name = "tunnel"];
                                 }
                                 Tunnels tunnels = 3 [json_name = "tunnels"];
                                 message Sgs {
                                    message Sg {
                                       string source_addr = 1 [json_name = "source-addr"];
                                       string group_addr = 2 [json_name = "group-addr"];
                                    }
                                    repeated Sg sg = 1 [json_name = "sg"];
                                 }
                                 Sgs sgs = 4 [json_name = "sgs"];
                              }
                              IpmsiInfos ipmsi_infos = 3 [json_name = "ipmsi-infos"];
                           }
                           IpmsiTunnel ipmsi_tunnel = 15 [json_name = "ipmsi-tunnel"];
                           message SpmsiTunnels {
                              uint32 switch_delay_time = 1 [json_name = "switch-delay-time"];
                              uint32 switch_back_holddown_time = 2 [json_name = "switch-back-holddown-time"];
                              uint32 spmsi_tunnel_withdraw_delay_time = 3 [json_name = "spmsi-tunnel-withdraw-delay-time"];
                           }
                           SpmsiTunnels spmsi_tunnels = 16 [json_name = "spmsi-tunnels"];
                           message Spmsis {
                              message TeTunnels {
                                 message TeTunnel {
                                    string te_p2mp_id = 1 [json_name = "te-p2mp-id"];
                                    uint32 te_tunnel_id = 2 [json_name = "te-tunnel-id"];
                                    string te_extend_tunnel_id = 3 [json_name = "te-extend-tunnel-id"];
                                    message Tunnels {
                                       message Tunnel {
                                          string address = 1 [json_name = "address"];
                                          string role = 2 [json_name = "role"];
                                       }
                                       repeated Tunnel tunnel = 1 [json_name = "tunnel"];
                                    }
                                    Tunnels tunnels = 4 [json_name = "tunnels"];
                                    message Sgs {
                                       message Sg {
                                          string source_addr = 1 [json_name = "source-addr"];
                                          string group_addr = 2 [json_name = "group-addr"];
                                       }
                                       repeated Sg sg = 1 [json_name = "sg"];
                                    }
                                    Sgs sgs = 5 [json_name = "sgs"];
                                 }
                                 repeated TeTunnel te_tunnel = 1 [json_name = "te-tunnel"];
                              }
                              TeTunnels te_tunnels = 1 [json_name = "te-tunnels"];
                              message LdpTunnels {
                                 message LdpTunnel {
                                    string ldp_route_addr = 1 [json_name = "ldp-route-addr"];
                                    string opaque_value = 2 [json_name = "opaque-value"];
                                    message Tunnels {
                                       message Tunnel {
                                          string address = 1 [json_name = "address"];
                                          string role = 2 [json_name = "role"];
                                       }
                                       repeated Tunnel tunnel = 1 [json_name = "tunnel"];
                                    }
                                    Tunnels tunnels = 3 [json_name = "tunnels"];
                                    message Sgs {
                                       message Sg {
                                          string source_addr = 1 [json_name = "source-addr"];
                                          string group_addr = 2 [json_name = "group-addr"];
                                       }
                                       repeated Sg sg = 1 [json_name = "sg"];
                                    }
                                    Sgs sgs = 4 [json_name = "sgs"];
                                 }
                                 repeated LdpTunnel ldp_tunnel = 1 [json_name = "ldp-tunnel"];
                              }
                              LdpTunnels ldp_tunnels = 2 [json_name = "ldp-tunnels"];
                           }
                           Spmsis spmsis = 17 [json_name = "spmsis"];
                        }
                        Ng ng = 1 [json_name = "ng"];
                     }
                     NgMvpn ng_mvpn = 1 [json_name = "ng-mvpn"];
                     message RosenMvpn {
                        message Rosen {
                           message ShareGroup {
                              string address = 1 [json_name = "address"];
                              uint32 mtunnel_number = 2 [json_name = "mtunnel-number"];
                              message MtunnelIpConfiguration {
                                 message UseExistInterfaceIp {
                                    string unnumbered_if_name = 1 [json_name = "unnumbered-if-name"];
                                 }
                                 UseExistInterfaceIp use_exist_interface_ip = 1 [json_name = "use-exist-interface-ip"];
                                 message SpecifyMtunnelIp {
                                    string ip_address = 1 [json_name = "ip-address"];
                                    uint32 ip_mask_length = 2 [json_name = "ip-mask-length"];
                                 }
                                 SpecifyMtunnelIp specify_mtunnel_ip = 2 [json_name = "specify-mtunnel-ip"];
                              }
                              MtunnelIpConfiguration mtunnel_ip_configuration = 3 [json_name = "mtunnel-ip-configuration"];
                           }
                           ShareGroup share_group = 1 [json_name = "share-group"];
                           message Attributes {
                              enum AutoDiscoveryMode {
                                 AutoDiscoveryMode_NONE = 0;
                                 AutoDiscoveryMode_MDT = 1;
                              };
                              AutoDiscoveryMode auto_discovery_mode = 1 [json_name = "auto-discovery-mode"];
                              bool is_switch_without_register = 2 [json_name = "is-switch-without-register"];
                              string source_interface_name = 3 [json_name = "source-interface-name"];
                           }
                           Attributes attributes = 2 [json_name = "attributes"];
                        }
                        Rosen rosen = 1 [json_name = "rosen"];
                     }
                     RosenMvpn rosen_mvpn = 2 [json_name = "rosen-mvpn"];
                  }
                  MvpnType mvpn_type = 2 [json_name = "mvpn-type"];
               }
               Mvpn mvpn = 14 [json_name = "mvpn"];
               message Evpn {
                  string import_policy_name = 1 [json_name = "import-policy-name"];
                  string export_policy_name = 2 [json_name = "export-policy-name"];
                  bool mpls_routing = 3 [json_name = "mpls-routing"];
                  string tunnel_policy_name = 4 [json_name = "tunnel-policy-name"];
                  enum Irb2Ip {
                     Irb2Ip_DEFAULT = 0;
                     Irb2Ip_ENABLE = 1;
                     Irb2Ip_DISABLE = 2;
                  };
                  Irb2Ip irb2ip = 5 [json_name = "irb2ip"];
                  message ExtendVpnTargets {
                     message ExtendVpnTarget {
                        string vrf_rt_value = 1 [json_name = "vrf-rt-value"];
                        enum VrfRtType {
                           INVALID_ENUM_VALUE_VrfRtType = 0;
                           VrfRtType_EXPORTX_EXTCOMMUNITY = 2;
                           VrfRtType_IMPORTX_EXTCOMMUNITY = 3;
                        };
                        VrfRtType vrf_rt_type = 2 [json_name = "vrf-rt-type"];
                     }
                     repeated ExtendVpnTarget extend_vpn_target = 1 [json_name = "extend-vpn-target"];
                  }
                  ExtendVpnTargets extend_vpn_targets = 6 [json_name = "extend-vpn-targets"];
                  message State {
                     uint32 label = 1 [json_name = "label"];
                  }
                  State state = 7 [json_name = "state"];
               }
               Evpn evpn = 15 [json_name = "evpn"];
            }
            repeated Af af = 1 [json_name = "af"];
         }
         Afs afs = 3 [json_name = "afs"];
         message Vrrp {
            message Groups {
               message Group {
                  uint32 id = 1 [json_name = "id"];
                  string if_name = 2 [json_name = "if-name"];
                  uint32 priority = 3 [json_name = "priority"];
                  bool preempt_mode = 4 [json_name = "preempt-mode"];
                  uint32 delay_time = 5 [json_name = "delay-time"];
                  message VrrpType {
                     message MemberVrrp {
                        uint32 admin_id = 1 [json_name = "admin-id"];
                        string admin_if_name = 2 [json_name = "admin-if-name"];
                     }
                     MemberVrrp member_vrrp = 1 [json_name = "member-vrrp"];
                     message AdminVrrp {
                        bool admin_flag = 1 [json_name = "admin-flag"];
                        bool admin_ignore_ifdown = 2 [json_name = "admin-ignore-ifdown"];
                     }
                     AdminVrrp admin_vrrp = 2 [json_name = "admin-vrrp"];
                  }
                  VrrpType vrrp_type = 6 [json_name = "vrrp-type"];
                  enum Type {
                     Type_NORMAL = 0;
                     Type_ADMIN = 1;
                     Type_MEMBER = 2;
                     Type_LBRG = 3;
                     Type_LBRGX_MEM = 4;
                     Type_MEMX_LBRG = 5;
                     Type_MEMX_LBRGX_MEM = 6;
                     Type_UNICAST = 7;
                  };
                  Type type = 7 [json_name = "type"];
                  enum State {
                     State_INITIALIZE = 0;
                     State_BACKUP = 1;
                     State_MASTER = 2;
                  };
                  State state = 8 [json_name = "state"];
                  string create_time = 9 [json_name = "create-time"];
                  string last_change_time = 10 [json_name = "last-change-time"];
                  message VirtualIps {
                     message VirtualIp {
                        string address = 1 [json_name = "address"];
                     }
                     repeated VirtualIp virtual_ip = 1 [json_name = "virtual-ip"];
                  }
                  VirtualIps virtual_ips = 11 [json_name = "virtual-ips"];
                  message TrackBfds {
                     message TrackBfd {
                        string session_name = 1 [json_name = "session-name"];
                        enum SessionType {
                           SessionType_NORMAL = 0;
                           SessionType_LINK = 1;
                           SessionType_PEER = 2;
                        };
                        SessionType session_type = 2 [json_name = "session-type"];
                        enum TrackMode {
                           TrackMode_INCREASE = 0;
                           TrackMode_REDUCE = 1;
                        };
                        TrackMode track_mode = 3 [json_name = "track-mode"];
                        uint32 priority_change = 4 [json_name = "priority-change"];
                        uint32 session_id = 5 [json_name = "session-id"];
                        enum SessionState {
                           SessionState_DOWN = 0;
                           SessionState_UP = 1;
                           SessionState_ADMINX_DOWN = 2;
                           SessionState_UNKNOW = 3;
                        };
                        SessionState session_state = 6 [json_name = "session-state"];
                     }
                     repeated TrackBfd track_bfd = 1 [json_name = "track-bfd"];
                  }
                  TrackBfds track_bfds = 12 [json_name = "track-bfds"];
                  uint32 adver_interval = 13 [json_name = "adver-interval"];
                  bool isplain = 14 [json_name = "isplain"];
                  string authentication_key = 15 [json_name = "authentication-key"];
                  enum AuthenticationMode {
                     AuthenticationMode_NONE = 0;
                     AuthenticationMode_SIMPLE = 1;
                     AuthenticationMode_MD5 = 2;
                     AuthenticationMode_HMACX_SHA256 = 3;
                  };
                  AuthenticationMode authentication_mode = 16 [json_name = "authentication-mode"];
                  uint32 hold_multi = 17 [json_name = "hold-multi"];
                  bool backup_forward = 18 [json_name = "backup-forward"];
                  bool fast_resume = 19 [json_name = "fast-resume"];
                  enum V3Sendmode {
                     V3Sendmode_V3X_ONLY = 0;
                     V3Sendmode_V2V3X_BOTH = 1;
                     V3Sendmode_V2X_ONLY = 2;
                  };
                  V3Sendmode v3_sendmode = 20 [json_name = "v3-sendmode"];
                  message TrackInterfaces {
                     message TrackInterface {
                        string ifname = 1 [json_name = "ifname"];
                        enum TrackMode {
                           TrackMode_INCREASE = 0;
                           TrackMode_REDUCE = 1;
                        };
                        TrackMode track_mode = 2 [json_name = "track-mode"];
                        uint32 priority_change = 3 [json_name = "priority-change"];
                     }
                     repeated TrackInterface track_interface = 1 [json_name = "track-interface"];
                  }
                  TrackInterfaces track_interfaces = 21 [json_name = "track-interfaces"];
               }
               repeated Group group = 1 [json_name = "group"];
            }
            Groups groups = 1 [json_name = "groups"];
         }
         Vrrp vrrp = 4 [json_name = "vrrp"];
         message Mpls {
            message Common {
               message MplsInterfaces {
                  message MplsInterface {
                     string name = 1 [json_name = "name"];
                     uint32 mtu_value = 2 [json_name = "mtu-value"];
                     bool ldp_enable = 3 [json_name = "ldp-enable"];
                     bool te_enable = 4 [json_name = "te-enable"];
                     bool rsvp_te_enable = 5 [json_name = "rsvp-te-enable"];
                  }
                  repeated MplsInterface mpls_interface = 1 [json_name = "mpls-interface"];
               }
               MplsInterfaces mpls_interfaces = 1 [json_name = "mpls-interfaces"];
            }
            Common common = 1 [json_name = "common"];
            message Ldp {
               message Instance {
                  string lsr_id = 1 [json_name = "lsr-id"];
                  uint32 igp_sync_delay_time = 2 [json_name = "igp-sync-delay-time"];
                  bool graceful_delete_enable = 3 [json_name = "graceful-delete-enable"];
                  uint32 graceful_delete_time = 4 [json_name = "graceful-delete-time"];
                  bool no_mapping_enable = 5 [json_name = "no-mapping-enable"];
                  bool auto_dod_request_enable = 6 [json_name = "auto-dod-request-enable"];
                  enum AuthenMode {
                     AuthenMode_MODEX_NONE = 0;
                     AuthenMode_MODEX_ENABLE = 1;
                  };
                  AuthenMode authen_mode = 7 [json_name = "authen-mode"];
                  enum AuthenType {
                     INVALID_ENUM_VALUE_AuthenType = 0;
                     AuthenType_MD5 = 1;
                     AuthenType_KEYCHAIN = 2;
                     AuthenType_MD5X_PLAIN = 3;
                  };
                  AuthenType authen_type = 8 [json_name = "authen-type"];
                  string md5_password = 9 [json_name = "md5-password"];
                  string keychain_name = 10 [json_name = "keychain-name"];
                  bool split_horizon = 11 [json_name = "split-horizon"];
                  bool send_all_loopback = 12 [json_name = "send-all-loopback"];
                  bool longest_match = 13 [json_name = "longest-match"];
                  bool loop_detect = 14 [json_name = "loop-detect"];
                  enum LabelCtrlMode {
                     LabelCtrlMode_ORDERED = 0;
                     LabelCtrlMode_INDEPENDENT = 1;
                  };
                  LabelCtrlMode label_ctrl_mode = 15 [json_name = "label-ctrl-mode"];
                  uint32 auto_remote_keep_alive_hold = 16 [json_name = "auto-remote-keep-alive-hold"];
                  message Interfaces {
                     message Interface {
                        string name = 1 [json_name = "name"];
                        uint32 hello_send_time = 2 [json_name = "hello-send-time"];
                        uint32 hello_hold_time = 3 [json_name = "hello-hold-time"];
                        uint32 keep_alive_send_time = 4 [json_name = "keep-alive-send-time"];
                        uint32 keep_alive_hold_time = 5 [json_name = "keep-alive-hold-time"];
                        uint32 igp_sync_delay_time = 6 [json_name = "igp-sync-delay-time"];
                        bool mldp_p2mp_disable = 7 [json_name = "mldp-p2mp-disable"];
                        string transport_address = 8 [json_name = "transport-address"];
                        string local_lsr_id_address = 9 [json_name = "local-lsr-id-address"];
                        enum LabelAdvertiseMode {
                           LabelAdvertiseMode_DU = 0;
                           LabelAdvertiseMode_DOD = 1;
                        };
                        LabelAdvertiseMode label_advertise_mode = 10 [json_name = "label-advertise-mode"];
                        message Status {
                           enum IfState {
                              IfState_ACTIVE = 0;
                              IfState_INACTIVE = 1;
                           };
                           IfState if_state = 1 [json_name = "if-state"];
                           enum LabelDistributionMode {
                              LabelDistributionMode_DU = 0;
                              LabelDistributionMode_DOD = 1;
                              LabelDistributionMode_UNAVAILABLE = 2;
                           };
                           LabelDistributionMode label_distribution_mode = 2 [json_name = "label-distribution-mode"];
                           uint32 negotiated_hello_hold_time = 3 [json_name = "negotiated-hello-hold-time"];
                           uint32 effective_mtu = 4 [json_name = "effective-mtu"];
                           enum AutoTriggerType {
                              AutoTriggerType_DEFAULT = 0;
                              AutoTriggerType_ISIS = 1;
                              AutoTriggerType_OSPF = 2;
                              AutoTriggerType_ISISX_OSPF = 3;
                           };
                           AutoTriggerType auto_trigger_type = 5 [json_name = "auto-trigger-type"];
                        }
                        Status status = 11 [json_name = "status"];
                     }
                     repeated Interface interface = 1 [json_name = "interface"];
                  }
                  Interfaces interfaces = 17 [json_name = "interfaces"];
                  message RemotePeers {
                     message RemotePeer {
                        string name = 1 [json_name = "name"];
                        string remote_ip = 2 [json_name = "remote-ip"];
                        string description = 3 [json_name = "description"];
                        enum NoMapping {
                           NoMapping_DEFAULT = 0;
                           NoMapping_ENABLE = 1;
                           NoMapping_DISABLE = 2;
                        };
                        NoMapping no_mapping = 4 [json_name = "no-mapping"];
                        enum AutoDodRequestMode {
                           AutoDodRequestMode_DEFAULT = 0;
                           AutoDodRequestMode_ENABLE = 1;
                           AutoDodRequestMode_BLOCK = 2;
                        };
                        AutoDodRequestMode auto_dod_request_mode = 5 [json_name = "auto-dod-request-mode"];
                        uint32 hello_send_time = 6 [json_name = "hello-send-time"];
                        uint32 hello_hold_time = 7 [json_name = "hello-hold-time"];
                        uint32 keep_alive_send_time = 8 [json_name = "keep-alive-send-time"];
                        uint32 keep_alive_hold_time = 9 [json_name = "keep-alive-hold-time"];
                        uint32 igp_sync_delay_time = 10 [json_name = "igp-sync-delay-time"];
                        string local_lsr_id_address = 11 [json_name = "local-lsr-id-address"];
                        enum LabelAdvertiseMode {
                           LabelAdvertiseMode_DU = 0;
                           LabelAdvertiseMode_DOD = 1;
                        };
                        LabelAdvertiseMode label_advertise_mode = 12 [json_name = "label-advertise-mode"];
                        message Status {
                           enum RemoteNeighborState {
                              RemoteNeighborState_ACTIVE = 0;
                              RemoteNeighborState_INACTIVE = 1;
                           };
                           RemoteNeighborState remote_neighbor_state = 1 [json_name = "remote-neighbor-state"];
                           uint32 negotiated_hello_hold_time = 2 [json_name = "negotiated-hello-hold-time"];
                           message AutoCreateType {
                              enum L2Vpn {
                                 L2Vpn_DEFAULT = 0;
                                 L2Vpn_L2VPN = 1;
                              };
                              L2Vpn l2vpn = 1 [json_name = "l2vpn"];
                              enum SessionProtection {
                                 SessionProtection_DEFAULT = 0;
                                 SessionProtection_SESSIONX_PROTECT = 1;
                              };
                              SessionProtection session_protection = 2 [json_name = "session-protection"];
                              enum Rlfa {
                                 Rlfa_DEFAULT = 0;
                                 Rlfa_RLFA = 1;
                              };
                              Rlfa rlfa = 3 [json_name = "rlfa"];
                              enum AutoAcceptFunction {
                                 AutoAcceptFunction_DEFAULT = 0;
                                 AutoAcceptFunction_AUTOX_ACCEPT = 1;
                              };
                              AutoAcceptFunction auto_accept_function = 4 [json_name = "auto-accept-function"];
                           }
                           AutoCreateType auto_create_type = 3 [json_name = "auto-create-type"];
                        }
                        Status status = 13 [json_name = "status"];
                     }
                     repeated RemotePeer remote_peer = 1 [json_name = "remote-peer"];
                  }
                  RemotePeers remote_peers = 18 [json_name = "remote-peers"];
                  message AuthPeers {
                     message AuthPeer {
                        string id = 1 [json_name = "id"];
                        enum AuthenMode {
                           AuthenMode_MODEX_NONE = 0;
                           AuthenMode_MODEX_ENABLE = 1;
                           AuthenMode_MODEX_EXCLUDE = 2;
                           AuthenMode_MD5 = 3;
                           AuthenMode_KEYCHAIN = 4;
                        };
                        AuthenMode authen_mode = 2 [json_name = "authen-mode"];
                        enum AuthenType {
                           INVALID_ENUM_VALUE_AuthenType = 0;
                           AuthenType_MD5 = 1;
                           AuthenType_KEYCHAIN = 2;
                           AuthenType_MD5X_PLAIN = 3;
                        };
                        AuthenType authen_type = 3 [json_name = "authen-type"];
                        string md5_password = 4 [json_name = "md5-password"];
                        string keychain_name = 5 [json_name = "keychain-name"];
                        bool out_bound = 6 [json_name = "out-bound"];
                        bool authen_enable = 7 [json_name = "authen-enable"];
                        enum Md5Type {
                           INVALID_ENUM_VALUE_Md5Type = 0;
                           Md5Type_MD5X_CIPER = 1;
                           Md5Type_MD5X_PLAIN = 3;
                        };
                        Md5Type md5_type = 8 [json_name = "md5-type"];
                     }
                     repeated AuthPeer auth_peer = 1 [json_name = "auth-peer"];
                  }
                  AuthPeers auth_peers = 19 [json_name = "auth-peers"];
                  message PeerInfos {
                     message PeerInfo {
                        string lsr_id = 1 [json_name = "lsr-id"];
                        enum LabelAdvertiseMode {
                           LabelAdvertiseMode_DU = 0;
                           LabelAdvertiseMode_DOD = 1;
                           LabelAdvertiseMode_UNAVAILABLE = 2;
                        };
                        LabelAdvertiseMode label_advertise_mode = 2 [json_name = "label-advertise-mode"];
                        uint32 max_pdu_len = 3 [json_name = "max-pdu-len"];
                        bool loop_detect = 4 [json_name = "loop-detect"];
                        bool support_ft_flag = 5 [json_name = "support-ft-flag"];
                        string transport_address = 6 [json_name = "transport-address"];
                        uint32 path_vector_limit = 7 [json_name = "path-vector-limit"];
                        uint32 keep_alive_send_time = 8 [json_name = "keep-alive-send-time"];
                        uint32 recovery_timer = 9 [json_name = "recovery-timer"];
                        uint32 reconnect_timer = 10 [json_name = "reconnect-timer"];
                        bool announcement_capability = 11 [json_name = "announcement-capability"];
                        bool mldp_p2mp_capability = 12 [json_name = "mldp-p2mp-capability"];
                        bool mldp_mbb_capability = 13 [json_name = "mldp-mbb-capability"];
                        repeated string discovery_source = 14 [json_name = "discovery-source"];
                     }
                     repeated PeerInfo peer_info = 1 [json_name = "peer-info"];
                  }
                  PeerInfos peer_infos = 20 [json_name = "peer-infos"];
                  enum TrafficStatisticMode {
                     TrafficStatisticMode_NONE = 0;
                     TrafficStatisticMode_HOST = 1;
                     TrafficStatisticMode_HOSTX_IPX_PREFIX = 2;
                  };
                  TrafficStatisticMode traffic_statistic_mode = 21 [json_name = "traffic-statistic-mode"];
                  string traffic_statistic_ip_prefix_name = 22 [json_name = "traffic-statistic-ip-prefix-name"];
                  message Authentication {
                     enum AuthMode {
                        INVALID_ENUM_VALUE_AuthMode = 0;
                        AuthMode_MD5 = 1;
                        AuthMode_KEYCHAIN = 2;
                     };
                     AuthMode auth_mode = 1 [json_name = "auth-mode"];
                     enum Md5Type {
                        INVALID_ENUM_VALUE_Md5Type = 0;
                        Md5Type_MD5X_CIPER = 1;
                        Md5Type_MD5X_PLAIN = 3;
                     };
                     Md5Type md5_type = 2 [json_name = "md5-type"];
                     string md5_password = 3 [json_name = "md5-password"];
                     string keychain_name = 4 [json_name = "keychain-name"];
                  }
                  Authentication authentication = 23 [json_name = "authentication"];
                  message SessionProtection {
                     enum Mode {
                        Mode_ALL = 0;
                        Mode_PEERX_GROUP = 1;
                     };
                     Mode mode = 1 [json_name = "mode"];
                     string ip_prefix_name = 2 [json_name = "ip-prefix-name"];
                     enum DurationType {
                        DurationType_FIXEDX_DURATION = 0;
                        DurationType_FOREVER = 1;
                     };
                     DurationType duration_type = 3 [json_name = "duration-type"];
                     uint32 duration = 4 [json_name = "duration"];
                  }
                  SessionProtection session_protection = 24 [json_name = "session-protection"];
                  message AcceptTargetHello {
                     enum Mode {
                        Mode_NONE = 0;
                        Mode_ALL = 1;
                        Mode_PEERX_GROUP = 2;
                     };
                     Mode mode = 1 [json_name = "mode"];
                     string ip_prefix_name = 2 [json_name = "ip-prefix-name"];
                  }
                  AcceptTargetHello accept_target_hello = 25 [json_name = "accept-target-hello"];
                  message TopologyInstances {
                     message TopologyInstance {
                        uint32 topology_id = 1 [json_name = "topology-id"];
                        uint32 ip_family = 2 [json_name = "ip-family"];
                        string topology_name = 3 [json_name = "topology-name"];
                        string lsp_transit_policy_name = 4 [json_name = "lsp-transit-policy-name"];
                        enum AutoFrrLspTriggerMode {
                           AutoFrrLspTriggerMode_ALL = 0;
                           AutoFrrLspTriggerMode_HOST = 1;
                           AutoFrrLspTriggerMode_NONE = 2;
                           AutoFrrLspTriggerMode_IPX_PREFIX = 3;
                        };
                        AutoFrrLspTriggerMode auto_frr_lsp_trigger_mode = 5 [json_name = "auto-frr-lsp-trigger-mode"];
                        string auto_frr_lsp_ip_prefix_name = 6 [json_name = "auto-frr-lsp-ip-prefix-name"];
                        message Outbound {
                           message FecPeerAll {
                              enum FecPolicyMode {
                                 INVALID_ENUM_VALUE_FecPolicyMode = 0;
                                 FecPolicyMode_HOST = 1;
                                 FecPolicyMode_NONE = 2;
                                 FecPolicyMode_IPX_PREFIX = 3;
                              };
                              FecPolicyMode fec_policy_mode = 1 [json_name = "fec-policy-mode"];
                              string fec_ip_prefix_name = 2 [json_name = "fec-ip-prefix-name"];
                           }
                           FecPeerAll fec_peer_all = 1 [json_name = "fec-peer-all"];
                           message BgpPeerAll {
                              enum BgpPolicyMode {
                                 INVALID_ENUM_VALUE_BgpPolicyMode = 0;
                                 BgpPolicyMode_NONE = 2;
                                 BgpPolicyMode_IPX_PREFIX = 3;
                              };
                              BgpPolicyMode bgp_policy_mode = 1 [json_name = "bgp-policy-mode"];
                              string bgp_ip_prefix_name = 2 [json_name = "bgp-ip-prefix-name"];
                           }
                           BgpPeerAll bgp_peer_all = 2 [json_name = "bgp-peer-all"];
                           message FecPeerGroups {
                              message FecPeerGroup {
                                 string peer_group_name = 1 [json_name = "peer-group-name"];
                                 enum FecPolicyMode {
                                    INVALID_ENUM_VALUE_FecPolicyMode = 0;
                                    FecPolicyMode_HOST = 1;
                                    FecPolicyMode_NONE = 2;
                                    FecPolicyMode_IPX_PREFIX = 3;
                                 };
                                 FecPolicyMode fec_policy_mode = 2 [json_name = "fec-policy-mode"];
                                 string fec_ip_prefix_name = 3 [json_name = "fec-ip-prefix-name"];
                              }
                              repeated FecPeerGroup fec_peer_group = 1 [json_name = "fec-peer-group"];
                           }
                           FecPeerGroups fec_peer_groups = 3 [json_name = "fec-peer-groups"];
                           message BgpPeerGroups {
                              message BgpPeerGroup {
                                 string peer_group_name = 1 [json_name = "peer-group-name"];
                                 enum BgpPolicyMode {
                                    INVALID_ENUM_VALUE_BgpPolicyMode = 0;
                                    BgpPolicyMode_NONE = 2;
                                    BgpPolicyMode_IPX_PREFIX = 3;
                                 };
                                 BgpPolicyMode bgp_policy_mode = 2 [json_name = "bgp-policy-mode"];
                                 string bgp_ip_prefix_name = 3 [json_name = "bgp-ip-prefix-name"];
                              }
                              repeated BgpPeerGroup bgp_peer_group = 1 [json_name = "bgp-peer-group"];
                           }
                           BgpPeerGroups bgp_peer_groups = 4 [json_name = "bgp-peer-groups"];
                           message FecPeers {
                              message FecPeer {
                                 string peer_id = 1 [json_name = "peer-id"];
                                 enum FecPolicyMode {
                                    INVALID_ENUM_VALUE_FecPolicyMode = 0;
                                    FecPolicyMode_HOST = 1;
                                    FecPolicyMode_NONE = 2;
                                    FecPolicyMode_IPX_PREFIX = 3;
                                 };
                                 FecPolicyMode fec_policy_mode = 2 [json_name = "fec-policy-mode"];
                                 string fec_ip_prefix_name = 3 [json_name = "fec-ip-prefix-name"];
                              }
                              repeated FecPeer fec_peer = 1 [json_name = "fec-peer"];
                           }
                           FecPeers fec_peers = 5 [json_name = "fec-peers"];
                           message BgpPeers {
                              message BgpPeer {
                                 string peer_id = 1 [json_name = "peer-id"];
                                 enum BgpPolicyMode {
                                    INVALID_ENUM_VALUE_BgpPolicyMode = 0;
                                    BgpPolicyMode_NONE = 2;
                                    BgpPolicyMode_IPX_PREFIX = 3;
                                 };
                                 BgpPolicyMode bgp_policy_mode = 2 [json_name = "bgp-policy-mode"];
                                 string bgp_ip_prefix_name = 3 [json_name = "bgp-ip-prefix-name"];
                              }
                              repeated BgpPeer bgp_peer = 1 [json_name = "bgp-peer"];
                           }
                           BgpPeers bgp_peers = 6 [json_name = "bgp-peers"];
                        }
                        Outbound outbound = 7 [json_name = "outbound"];
                        message Inbound {
                           message FecPeerAll {
                              enum FecPolicyMode {
                                 INVALID_ENUM_VALUE_FecPolicyMode = 0;
                                 FecPolicyMode_HOST = 1;
                                 FecPolicyMode_NONE = 2;
                                 FecPolicyMode_IPX_PREFIX = 3;
                              };
                              FecPolicyMode fec_policy_mode = 1 [json_name = "fec-policy-mode"];
                              string fec_ip_prefix_name = 2 [json_name = "fec-ip-prefix-name"];
                           }
                           FecPeerAll fec_peer_all = 1 [json_name = "fec-peer-all"];
                           message FecPeerGroups {
                              message FecPeerGroup {
                                 string peer_group_name = 1 [json_name = "peer-group-name"];
                                 enum FecPolicyMode {
                                    INVALID_ENUM_VALUE_FecPolicyMode = 0;
                                    FecPolicyMode_HOST = 1;
                                    FecPolicyMode_NONE = 2;
                                    FecPolicyMode_IPX_PREFIX = 3;
                                 };
                                 FecPolicyMode fec_policy_mode = 2 [json_name = "fec-policy-mode"];
                                 string fec_ip_prefix_name = 3 [json_name = "fec-ip-prefix-name"];
                              }
                              repeated FecPeerGroup fec_peer_group = 1 [json_name = "fec-peer-group"];
                           }
                           FecPeerGroups fec_peer_groups = 2 [json_name = "fec-peer-groups"];
                           message FecPeers {
                              message FecPeer {
                                 string peer_id = 1 [json_name = "peer-id"];
                                 enum FecPolicyMode {
                                    INVALID_ENUM_VALUE_FecPolicyMode = 0;
                                    FecPolicyMode_HOST = 1;
                                    FecPolicyMode_NONE = 2;
                                    FecPolicyMode_IPX_PREFIX = 3;
                                 };
                                 FecPolicyMode fec_policy_mode = 2 [json_name = "fec-policy-mode"];
                                 string fec_ip_prefix_name = 3 [json_name = "fec-ip-prefix-name"];
                              }
                              repeated FecPeer fec_peer = 1 [json_name = "fec-peer"];
                           }
                           FecPeers fec_peers = 3 [json_name = "fec-peers"];
                        }
                        Inbound inbound = 8 [json_name = "inbound"];
                     }
                     repeated TopologyInstance topology_instance = 1 [json_name = "topology-instance"];
                  }
                  TopologyInstances topology_instances = 26 [json_name = "topology-instances"];
                  message Adjacencys {
                     message Adjacency {
                        string peer_id = 1 [json_name = "peer-id"];
                        string type = 2 [json_name = "type"];
                        string src_address = 3 [json_name = "src-address"];
                        string create_date = 4 [json_name = "create-date"];
                        string create_time = 5 [json_name = "create-time"];
                        string age_time = 6 [json_name = "age-time"];
                        string discovery_source_name = 7 [json_name = "discovery-source-name"];
                        uint32 udp_socket_id = 8 [json_name = "udp-socket-id"];
                        uint32 cfg_hello_hold_time = 9 [json_name = "cfg-hello-hold-time"];
                        uint32 sequence_no = 10 [json_name = "sequence-no"];
                        uint32 received_hello = 11 [json_name = "received-hello"];
                        string crc_error_rate = 12 [json_name = "crc-error-rate"];
                     }
                     repeated Adjacency adjacency = 1 [json_name = "adjacency"];
                  }
                  Adjacencys adjacencys = 27 [json_name = "adjacencys"];
                  message Sessions {
                     message Session {
                        string peer_lsr_id = 1 [json_name = "peer-lsr-id"];
                        string local_lsr_id = 2 [json_name = "local-lsr-id"];
                        string tcp_source_address = 3 [json_name = "tcp-source-address"];
                        string tcp_dest_address = 4 [json_name = "tcp-dest-address"];
                        enum State {
                           State_NONX_EXISTENT = 0;
                           State_INITIALIZED = 1;
                           State_OPENREC = 2;
                           State_OPENSENT = 3;
                           State_OPERATIONAL = 4;
                        };
                        State state = 5 [json_name = "state"];
                        enum Role {
                           Role_ACTIVE = 0;
                           Role_PASSIVE = 1;
                        };
                        Role role = 6 [json_name = "role"];
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_LOCAL = 1;
                           Type_REMOTE = 2;
                           Type_LOCALX_REMOTE = 3;
                        };
                        Type type = 7 [json_name = "type"];
                        uint32 negotiate_keep_alive_hold_time = 8 [json_name = "negotiate-keep-alive-hold-time"];
                        uint32 keep_alive_sent = 9 [json_name = "keep-alive-sent"];
                        uint32 keep_alive_received = 10 [json_name = "keep-alive-received"];
                        enum DistributeMode {
                           DistributeMode_DU = 0;
                           DistributeMode_DOD = 1;
                           DistributeMode_UNAVAILABLE = 2;
                        };
                        DistributeMode distribute_mode = 11 [json_name = "distribute-mode"];
                        enum PeerLabelState {
                           PeerLabelState_AVAILABLE = 0;
                           PeerLabelState_UNAVAILABLE = 1;
                        };
                        PeerLabelState peer_label_state = 12 [json_name = "peer-label-state"];
                        bool ft_flag = 13 [json_name = "ft-flag"];
                        bool md5_flag = 14 [json_name = "md5-flag"];
                        uint32 reconnect_time = 15 [json_name = "reconnect-time"];
                        uint32 recovery_time = 16 [json_name = "recovery-time"];
                        string age = 17 [json_name = "age"];
                        bool announcement_capability = 18 [json_name = "announcement-capability"];
                        bool mldp_p2mp_capability = 19 [json_name = "mldp-p2mp-capability"];
                        bool mldp_mbb_capability = 20 [json_name = "mldp-mbb-capability"];
                        uint32 msg_count_in_last_period = 21 [json_name = "msg-count-in-last-period"];
                        uint32 over_run_period_count = 22 [json_name = "over-run-period-count"];
                     }
                     repeated Session session = 1 [json_name = "session"];
                  }
                  Sessions sessions = 28 [json_name = "sessions"];
                  message Lsps {
                     message Lsp {
                        string address = 1 [json_name = "address"];
                        uint32 prefix_length = 2 [json_name = "prefix-length"];
                        uint32 index = 3 [json_name = "index"];
                        enum Type {
                           Type_INGRESS = 0;
                           Type_TRANSIT = 1;
                           Type_EGRESS = 2;
                           Type_INGRESSX_TRANSIT = 3;
                           Type_BUD = 4;
                        };
                        Type type = 4 [json_name = "type"];
                        string out_interface_name = 5 [json_name = "out-interface-name"];
                        string next_hop = 6 [json_name = "next-hop"];
                        bool is_frr_lsp = 7 [json_name = "is-frr-lsp"];
                        bool is_rlfa_lsp = 8 [json_name = "is-rlfa-lsp"];
                        uint32 mtu = 9 [json_name = "mtu"];
                        uint32 time_stamp = 10 [json_name = "time-stamp"];
                        uint32 in_label = 11 [json_name = "in-label"];
                        uint32 out_label = 12 [json_name = "out-label"];
                        string entropy_label_capability = 13 [json_name = "entropy-label-capability"];
                     }
                     repeated Lsp lsp = 1 [json_name = "lsp"];
                  }
                  Lsps lsps = 29 [json_name = "lsps"];
                  message Fecs {
                     message Fec {
                        string address = 1 [json_name = "address"];
                        uint32 prefix_length = 2 [json_name = "prefix-length"];
                        string out_interface_name = 3 [json_name = "out-interface-name"];
                        string next_hop = 4 [json_name = "next-hop"];
                        enum RouteType {
                           RouteType_UNKNOWN = 0;
                           RouteType_IGP = 1;
                           RouteType_EGP = 2;
                           RouteType_STATIC = 4;
                           RouteType_RLFA = 5;
                           RouteType_DIRECT = 8;
                        };
                        RouteType route_type = 5 [json_name = "route-type"];
                        enum State {
                           State_IDLE = 0;
                           State_SETTINGX_UP = 1;
                           State_UP = 2;
                        };
                        State state = 6 [json_name = "state"];
                        uint32 lsp = 7 [json_name = "lsp"];
                     }
                     repeated Fec fec = 1 [json_name = "fec"];
                  }
                  Fecs fecs = 30 [json_name = "fecs"];
                  message AutoConfigRemotePeers {
                     message AutoConfigRemotePeer {
                        string remote_ip = 1 [json_name = "remote-ip"];
                        string remote_peer_name = 2 [json_name = "remote-peer-name"];
                        enum PeerState {
                           PeerState_ACTIVE = 0;
                           PeerState_INACTIVE = 1;
                        };
                        PeerState peer_state = 3 [json_name = "peer-state"];
                        uint32 negotiated_hello_hold_time = 4 [json_name = "negotiated-hello-hold-time"];
                        message AutoConfigType {
                           enum L2Vpn {
                              L2Vpn_DEFAULT = 0;
                              L2Vpn_L2VPN = 1;
                           };
                           L2Vpn l2vpn = 1 [json_name = "l2vpn"];
                           enum SessionProtection {
                              SessionProtection_DEFAULT = 0;
                              SessionProtection_SESSIONX_PROTECT = 1;
                           };
                           SessionProtection session_protection = 2 [json_name = "session-protection"];
                           enum Rlfa {
                              Rlfa_DEFAULT = 0;
                              Rlfa_RLFA = 1;
                           };
                           Rlfa rlfa = 3 [json_name = "rlfa"];
                           enum AutoAcceptFunction {
                              AutoAcceptFunction_DEFAULT = 0;
                              AutoAcceptFunction_AUTOX_ACCEPT = 1;
                           };
                           AutoAcceptFunction auto_accept_function = 4 [json_name = "auto-accept-function"];
                        }
                        AutoConfigType auto_config_type = 5 [json_name = "auto-config-type"];
                     }
                     repeated AutoConfigRemotePeer auto_config_remote_peer = 1 [json_name = "auto-config-remote-peer"];
                  }
                  AutoConfigRemotePeers auto_config_remote_peers = 31 [json_name = "auto-config-remote-peers"];
                  message InstanceStatus {
                     enum LabelDistMode {
                        LabelDistMode_DUDOD = 0;
                        LabelDistMode_DU = 1;
                     };
                     LabelDistMode label_dist_mode = 1 [json_name = "label-dist-mode"];
                     enum LabelRetentionMode {
                        LabelRetentionMode_LIBERALX_CONSERVATIVE = 0;
                        LabelRetentionMode_LIBERAL = 1;
                     };
                     LabelRetentionMode label_retention_mode = 2 [json_name = "label-retention-mode"];
                     uint32 lsp_number = 3 [json_name = "lsp-number"];
                     uint32 session_number = 4 [json_name = "session-number"];
                     uint32 adjacency_number = 5 [json_name = "adjacency-number"];
                     uint32 interface_number = 6 [json_name = "interface-number"];
                     uint32 fec_number = 7 [json_name = "fec-number"];
                  }
                  InstanceStatus instance_status = 32 [json_name = "instance-status"];
               }
               Instance instance = 1 [json_name = "instance"];
            }
            Ldp ldp = 2 [json_name = "ldp"];
            message Te {
               message RsvpInterfaces {
                  message RsvpInterface {
                     string name = 1 [json_name = "name"];
                     bool hello_enable = 2 [json_name = "hello-enable"];
                     bool graceful_shutdown_enable = 3 [json_name = "graceful-shutdown-enable"];
                     bool srefresh_compatible_enable = 4 [json_name = "srefresh-compatible-enable"];
                     message Authentication {
                        bool enable = 1 [json_name = "enable"];
                        enum Type {
                           Type_MD5 = 0;
                           Type_MD5X_PLAIN = 1;
                           Type_KEYCHAIN = 2;
                        };
                        Type type = 2 [json_name = "type"];
                        string keychain_name = 3 [json_name = "keychain-name"];
                        string md5_key = 4 [json_name = "md5-key"];
                        uint32 life_time = 5 [json_name = "life-time"];
                        bool handshake_enable = 6 [json_name = "handshake-enable"];
                        uint32 window_size = 7 [json_name = "window-size"];
                     }
                     Authentication authentication = 5 [json_name = "authentication"];
                     message Bfd {
                        enum Ability {
                           INVALID_ENUM_VALUE_Ability = 0;
                           Ability_ENABLE = 1;
                           Ability_BLOCK = 2;
                        };
                        Ability ability = 1 [json_name = "ability"];
                        uint32 min_tx_interval = 2 [json_name = "min-tx-interval"];
                        uint32 min_rx_interval = 3 [json_name = "min-rx-interval"];
                        uint32 detect_multiplier = 4 [json_name = "detect-multiplier"];
                        bool set_bfd_pst = 5 [json_name = "set-bfd-pst"];
                        uint32 tos_exp = 6 [json_name = "tos-exp"];
                     }
                     Bfd bfd = 6 [json_name = "bfd"];
                  }
                  repeated RsvpInterface rsvp_interface = 1 [json_name = "rsvp-interface"];
               }
               RsvpInterfaces rsvp_interfaces = 1 [json_name = "rsvp-interfaces"];
            }
            Te te = 3 [json_name = "te"];
         }
         Mpls mpls = 5 [json_name = "mpls"];
         message Multicast {
            message Ipv4 {
               message Global {
                  bool longest_match = 1 [json_name = "longest-match"];
                  enum LoadSplitting {
                     LoadSplitting_NONE = 0;
                     LoadSplitting_SOURCE = 1;
                     LoadSplitting_GROUP = 2;
                     LoadSplitting_SOURCEX_GROUP = 3;
                     LoadSplitting_BALANCE = 4;
                     LoadSplitting_BALANCEX_UCMP = 5;
                  };
                  LoadSplitting load_splitting = 2 [json_name = "load-splitting"];
                  bool cpu_fwd_disable = 3 [json_name = "cpu-fwd-disable"];
               }
               Global global = 1 [json_name = "global"];
               message RpfMultiTopology {
               }
               RpfMultiTopology rpf_multi_topology = 2 [json_name = "rpf-multi-topology"];
            }
            Ipv4 ipv4 = 1 [json_name = "ipv4"];
            message Ipv6 {
               message Global {
                  enum LoadSplitting {
                     LoadSplitting_NONE = 0;
                     LoadSplitting_SOURCE = 1;
                     LoadSplitting_GROUP = 2;
                     LoadSplitting_SOURCEX_GROUP = 3;
                     LoadSplitting_BALANCE = 4;
                     LoadSplitting_BALANCEX_UCMP = 5;
                  };
                  LoadSplitting load_splitting = 1 [json_name = "load-splitting"];
                  bool cpu_fwd_disable = 2 [json_name = "cpu-fwd-disable"];
               }
               Global global = 1 [json_name = "global"];
               message RpfMultiTopology {
               }
               RpfMultiTopology rpf_multi_topology = 2 [json_name = "rpf-multi-topology"];
            }
            Ipv6 ipv6 = 2 [json_name = "ipv6"];
         }
         Multicast multicast = 6 [json_name = "multicast"];
         message Bgp {
            message BaseProcess {
               string router_id = 1 [json_name = "router-id"];
               message Afs {
                  message Af {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_IPV4UNI = 1;
                        Type_IPV4MULTI = 2;
                        Type_IPV4VPN = 3;
                        Type_IPV4LABELUNI = 4;
                        Type_IPV6UNI = 5;
                        Type_IPV6VPN = 6;
                        Type_IPV4FLOW = 7;
                        Type_L2VPNAD = 8;
                        Type_EVPN = 9;
                        Type_MVPN = 10;
                        Type_VPNTARGET = 11;
                        Type_IPV4VPNMCAST = 12;
                        Type_LS = 13;
                        Type_MDT = 14;
                        Type_IPV6FLOW = 15;
                        Type_MVPNV6 = 16;
                        Type_VPNV4FLOW = 17;
                        Type_VPNV6FLOW = 18;
                        Type_RPD = 19;
                        Type_IPV4SRPOLICY = 20;
                     };
                     Type type = 1 [json_name = "type"];
                     message Ipv4Unicast {
                        message ImportRoutes {
                           message ImportRoute {
                              enum Protocol {
                                 INVALID_ENUM_VALUE_Protocol = 0;
                                 Protocol_DIRECT = 1;
                                 Protocol_OSPF = 2;
                                 Protocol_ISIS = 3;
                                 Protocol_STATIC = 4;
                                 Protocol_RIP = 5;
                                 Protocol_UNR = 11;
                                 Protocol_OPX_ROUTE = 14;
                              };
                              Protocol protocol = 1 [json_name = "protocol"];
                              uint32 process_id = 2 [json_name = "process-id"];
                              message PolicyType {
                                 message RtpRef {
                                    string policy_name = 1 [json_name = "policy-name"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              PolicyType policy_type = 3 [json_name = "policy-type"];
                           }
                           repeated ImportRoute import_route = 1 [json_name = "import-route"];
                        }
                        ImportRoutes import_routes = 1 [json_name = "import-routes"];
                        message AggregateRoutes {
                           message AggregateRoute {
                              string address = 1 [json_name = "address"];
                              uint32 mask_length = 2 [json_name = "mask-length"];
                              bool as_set = 3 [json_name = "as-set"];
                              bool detail_suppressed = 4 [json_name = "detail-suppressed"];
                              message PolicyType {
                                 message RtpRef {
                                    string attribute_policy = 1 [json_name = "attribute-policy"];
                                    string origin_policy = 2 [json_name = "origin-policy"];
                                    string suppress_policy = 3 [json_name = "suppress-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              PolicyType policy_type = 5 [json_name = "policy-type"];
                           }
                           repeated AggregateRoute aggregate_route = 1 [json_name = "aggregate-route"];
                        }
                        AggregateRoutes aggregate_routes = 2 [json_name = "aggregate-routes"];
                        message Common {
                           bool auto_frr = 1 [json_name = "auto-frr"];
                           string tunnel_selector_name = 2 [json_name = "tunnel-selector-name"];
                           uint32 route_select_delay = 3 [json_name = "route-select-delay"];
                           message ReflectorType {
                              message Address {
                                 string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                              }
                              Address address = 1 [json_name = "address"];
                              message Id {
                                 uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                              }
                              Id id = 2 [json_name = "id"];
                           }
                           ReflectorType reflector_type = 4 [json_name = "reflector-type"];
                           bool reflect_change_path = 5 [json_name = "reflect-change-path"];
                           uint32 maximum_load_balancing_ibgp = 6 [json_name = "maximum-load-balancing-ibgp"];
                           uint32 maximum_load_balancing_ebgp = 7 [json_name = "maximum-load-balancing-ebgp"];
                           enum NexthopSelectDependType {
                              INVALID_ENUM_VALUE_NexthopSelectDependType = 0;
                              NexthopSelectDependType_DEPENDX_TUNNEL = 1;
                              NexthopSelectDependType_DEPENDX_IP = 2;
                           };
                           NexthopSelectDependType nexthop_select_depend_type = 8 [json_name = "nexthop-select-depend-type"];
                           bool nexthop_resolve_aigp = 9 [json_name = "nexthop-resolve-aigp"];
                           bool always_compare_med = 10 [json_name = "always-compare-med"];
                           uint32 default_med = 11 [json_name = "default-med"];
                           bool summary_automatic = 12 [json_name = "summary-automatic"];
                           bool nexthop_third_party = 13 [json_name = "nexthop-third-party"];
                           bool best_route_bit_error_detection = 14 [json_name = "best-route-bit-error-detection"];
                           bool supernet_unicast_advertise = 15 [json_name = "supernet-unicast-advertise"];
                           bool supernet_label_advertise = 16 [json_name = "supernet-label-advertise"];
                           uint32 lsp_mtu = 17 [json_name = "lsp-mtu"];
                           uint32 label_free_delay = 18 [json_name = "label-free-delay"];
                           bool bestroute_med_confederation = 19 [json_name = "bestroute-med-confederation"];
                           bool bestroute_as_path_ignore = 20 [json_name = "bestroute-as-path-ignore"];
                           bool determin_med = 21 [json_name = "determin-med"];
                           bool best_external = 22 [json_name = "best-external"];
                           uint32 add_path_select_num = 23 [json_name = "add-path-select-num"];
                           bool load_balanc_igp_metric_ignore = 24 [json_name = "load-balanc-igp-metric-ignore"];
                           bool load_balanc_as_path_ignore = 25 [json_name = "load-balanc-as-path-ignore"];
                           bool load_balanc_as_path_relax = 26 [json_name = "load-balanc-as-path-relax"];
                           uint32 default_local_preference = 27 [json_name = "default-local-preference"];
                           bool default_route_import = 28 [json_name = "default-route-import"];
                           bool routerid_neglect = 29 [json_name = "routerid-neglect"];
                           uint32 maximum_load_balancing = 30 [json_name = "maximum-load-balancing"];
                        }
                        Common common = 3 [json_name = "common"];
                        message NetworkRoutes {
                           message NetworkRoute {
                              string address = 1 [json_name = "address"];
                              uint32 mask_length = 2 [json_name = "mask-length"];
                              message PolicyType {
                                 message RtpRef {
                                    string policy_name = 1 [json_name = "policy-name"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              PolicyType policy_type = 3 [json_name = "policy-type"];
                              bool non_relay_tunnel = 4 [json_name = "non-relay-tunnel"];
                           }
                           repeated NetworkRoute network_route = 1 [json_name = "network-route"];
                        }
                        NetworkRoutes network_routes = 4 [json_name = "network-routes"];
                        message AdvertiseRouteToEvpns {
                           message AdvertiseRouteToEvpn {
                              enum Protocol {
                                 Protocol_ALL = 0;
                              };
                              Protocol protocol = 1 [json_name = "protocol"];
                              bool import_multipath = 2 [json_name = "import-multipath"];
                              enum AdvertiseRouteMode {
                                 AdvertiseRouteMode_ALL = 0;
                                 AdvertiseRouteMode_BEST = 1;
                                 AdvertiseRouteMode_VALID = 2;
                              };
                              AdvertiseRouteMode advertise_route_mode = 3 [json_name = "advertise-route-mode"];
                           }
                           repeated AdvertiseRouteToEvpn advertise_route_to_evpn = 1 [json_name = "advertise-route-to-evpn"];
                        }
                        AdvertiseRouteToEvpns advertise_route_to_evpns = 5 [json_name = "advertise-route-to-evpns"];
                        message ImportRibs {
                           message ImportRib {
                              string source_vpn = 1 [json_name = "source-vpn"];
                              enum SourceAddressFamily {
                                 INVALID_ENUM_VALUE_SourceAddressFamily = 0;
                                 SourceAddressFamily_IPV4UNI = 1;
                                 SourceAddressFamily_IPV4LABELUNI = 4;
                              };
                              SourceAddressFamily source_address_family = 2 [json_name = "source-address-family"];
                              bool valid_route = 3 [json_name = "valid-route"];
                              bool include_label_route = 4 [json_name = "include-label-route"];
                              message PolicyType {
                                 message RtpRef {
                                    string policy_name = 1 [json_name = "policy-name"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              PolicyType policy_type = 5 [json_name = "policy-type"];
                           }
                           repeated ImportRib import_rib = 1 [json_name = "import-rib"];
                        }
                        ImportRibs import_ribs = 6 [json_name = "import-ribs"];
                        message LspOptions {
                           bool ingress_protect_mode_bgp_frr = 1 [json_name = "ingress-protect-mode-bgp-frr"];
                           uint32 maximum_load_balancing_ingress = 2 [json_name = "maximum-load-balancing-ingress"];
                           uint32 maximum_load_balancing_transit = 3 [json_name = "maximum-load-balancing-transit"];
                        }
                        LspOptions lsp_options = 7 [json_name = "lsp-options"];
                     }
                     Ipv4Unicast ipv4_unicast = 2 [json_name = "ipv4-unicast"];
                     message Ipv6Unicast {
                        message ImportRoutes {
                           message ImportRoute {
                              enum Protocol {
                                 INVALID_ENUM_VALUE_Protocol = 0;
                                 Protocol_DIRECT = 1;
                                 Protocol_ISIS = 3;
                                 Protocol_STATIC = 4;
                                 Protocol_OSPFV3 = 7;
                                 Protocol_RIPNG = 8;
                                 Protocol_UNR = 11;
                              };
                              Protocol protocol = 1 [json_name = "protocol"];
                              uint32 process_id = 2 [json_name = "process-id"];
                              message PolicyType {
                                 message RtpRef {
                                    string policy_name = 1 [json_name = "policy-name"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              PolicyType policy_type = 3 [json_name = "policy-type"];
                           }
                           repeated ImportRoute import_route = 1 [json_name = "import-route"];
                        }
                        ImportRoutes import_routes = 1 [json_name = "import-routes"];
                        message AggregateRoutes {
                           message AggregateRoute {
                              string address = 1 [json_name = "address"];
                              uint32 mask_length = 2 [json_name = "mask-length"];
                              bool as_set = 3 [json_name = "as-set"];
                              bool detail_suppressed = 4 [json_name = "detail-suppressed"];
                              message PolicyType {
                                 message RtpRef {
                                    string attribute_policy = 1 [json_name = "attribute-policy"];
                                    string origin_policy = 2 [json_name = "origin-policy"];
                                    string suppress_policy = 3 [json_name = "suppress-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              PolicyType policy_type = 5 [json_name = "policy-type"];
                           }
                           repeated AggregateRoute aggregate_route = 1 [json_name = "aggregate-route"];
                        }
                        AggregateRoutes aggregate_routes = 2 [json_name = "aggregate-routes"];
                        message Common {
                           bool auto_frr = 1 [json_name = "auto-frr"];
                           uint32 route_select_delay = 2 [json_name = "route-select-delay"];
                           message ReflectorType {
                              message Address {
                                 string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                              }
                              Address address = 1 [json_name = "address"];
                              message Id {
                                 uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                              }
                              Id id = 2 [json_name = "id"];
                           }
                           ReflectorType reflector_type = 3 [json_name = "reflector-type"];
                           bool reflect_change_path = 4 [json_name = "reflect-change-path"];
                           uint32 maximum_load_balancing_ibgp = 5 [json_name = "maximum-load-balancing-ibgp"];
                           uint32 maximum_load_balancing_ebgp = 6 [json_name = "maximum-load-balancing-ebgp"];
                           bool explicit_null = 7 [json_name = "explicit-null"];
                           enum NexthopSelectDependType {
                              INVALID_ENUM_VALUE_NexthopSelectDependType = 0;
                              NexthopSelectDependType_DEPENDX_TUNNEL = 1;
                              NexthopSelectDependType_DEPENDX_IP = 2;
                           };
                           NexthopSelectDependType nexthop_select_depend_type = 8 [json_name = "nexthop-select-depend-type"];
                           bool nexthop_resolve_aigp = 9 [json_name = "nexthop-resolve-aigp"];
                           bool always_compare_med = 10 [json_name = "always-compare-med"];
                           uint32 default_med = 11 [json_name = "default-med"];
                           bool nexthop_third_party = 12 [json_name = "nexthop-third-party"];
                           bool supernet_unicast_advertise = 13 [json_name = "supernet-unicast-advertise"];
                           bool bestroute_med_confederation = 14 [json_name = "bestroute-med-confederation"];
                           bool bestroute_as_path_ignore = 15 [json_name = "bestroute-as-path-ignore"];
                           bool determin_med = 16 [json_name = "determin-med"];
                           bool best_external = 17 [json_name = "best-external"];
                           uint32 add_path_select_num = 18 [json_name = "add-path-select-num"];
                           bool load_balanc_igp_metric_ignore = 19 [json_name = "load-balanc-igp-metric-ignore"];
                           bool load_balanc_as_path_ignore = 20 [json_name = "load-balanc-as-path-ignore"];
                           bool load_balanc_as_path_relax = 21 [json_name = "load-balanc-as-path-relax"];
                           uint32 default_local_preference = 22 [json_name = "default-local-preference"];
                           bool default_route_import = 23 [json_name = "default-route-import"];
                           bool routerid_neglect = 24 [json_name = "routerid-neglect"];
                        }
                        Common common = 3 [json_name = "common"];
                        message NetworkRoutes {
                           message NetworkRoute {
                              string address = 1 [json_name = "address"];
                              uint32 mask_length = 2 [json_name = "mask-length"];
                              message PolicyType {
                                 message RtpRef {
                                    string policy_name = 1 [json_name = "policy-name"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              PolicyType policy_type = 3 [json_name = "policy-type"];
                           }
                           repeated NetworkRoute network_route = 1 [json_name = "network-route"];
                        }
                        NetworkRoutes network_routes = 4 [json_name = "network-routes"];
                        message AdvertiseRouteToEvpns {
                           message AdvertiseRouteToEvpn {
                              enum Protocol {
                                 Protocol_ALL = 0;
                              };
                              Protocol protocol = 1 [json_name = "protocol"];
                              bool import_multipath = 2 [json_name = "import-multipath"];
                              enum AdvertiseRouteMode {
                                 AdvertiseRouteMode_ALL = 0;
                                 AdvertiseRouteMode_BEST = 1;
                                 AdvertiseRouteMode_VALID = 2;
                              };
                              AdvertiseRouteMode advertise_route_mode = 3 [json_name = "advertise-route-mode"];
                           }
                           repeated AdvertiseRouteToEvpn advertise_route_to_evpn = 1 [json_name = "advertise-route-to-evpn"];
                        }
                        AdvertiseRouteToEvpns advertise_route_to_evpns = 5 [json_name = "advertise-route-to-evpns"];
                        message ImportRibs {
                           message ImportRib {
                              string source_vpn = 1 [json_name = "source-vpn"];
                              enum SourceAddressFamily {
                                 INVALID_ENUM_VALUE_SourceAddressFamily = 0;
                                 SourceAddressFamily_IPV6UNI = 5;
                              };
                              SourceAddressFamily source_address_family = 2 [json_name = "source-address-family"];
                              bool valid_route = 3 [json_name = "valid-route"];
                              bool include_label_route = 4 [json_name = "include-label-route"];
                              message PolicyType {
                                 message RtpRef {
                                    string policy_name = 1 [json_name = "policy-name"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              PolicyType policy_type = 5 [json_name = "policy-type"];
                           }
                           repeated ImportRib import_rib = 1 [json_name = "import-rib"];
                        }
                        ImportRibs import_ribs = 6 [json_name = "import-ribs"];
                     }
                     Ipv6Unicast ipv6_unicast = 3 [json_name = "ipv6-unicast"];
                     message Ipv4Vpn {
                        bool policy_vpntarget = 1 [json_name = "policy-vpntarget"];
                        message ReflectorType {
                           message Address {
                              string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                           }
                           Address address = 1 [json_name = "address"];
                           message Id {
                              uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                           }
                           Id id = 2 [json_name = "id"];
                        }
                        ReflectorType reflector_type = 2 [json_name = "reflector-type"];
                        bool reflect_change_path = 3 [json_name = "reflect-change-path"];
                        bool auto_frr = 4 [json_name = "auto-frr"];
                        string tunnel_selector_name = 5 [json_name = "tunnel-selector-name"];
                        uint32 route_select_delay = 6 [json_name = "route-select-delay"];
                        enum ApplyLabelMode {
                           ApplyLabelMode_PERX_ROUTE = 0;
                           ApplyLabelMode_PERX_NEXTHOP = 1;
                        };
                        ApplyLabelMode apply_label_mode = 7 [json_name = "apply-label-mode"];
                        enum NexthopSelectDependType {
                           INVALID_ENUM_VALUE_NexthopSelectDependType = 0;
                           NexthopSelectDependType_DEPENDX_TUNNEL = 1;
                           NexthopSelectDependType_DEPENDX_IP = 2;
                        };
                        NexthopSelectDependType nexthop_select_depend_type = 8 [json_name = "nexthop-select-depend-type"];
                        uint32 default_med = 9 [json_name = "default-med"];
                        bool best_external = 10 [json_name = "best-external"];
                        uint32 label_free_delay = 11 [json_name = "label-free-delay"];
                        uint32 add_path_select_num = 12 [json_name = "add-path-select-num"];
                        uint32 default_local_preference = 13 [json_name = "default-local-preference"];
                     }
                     Ipv4Vpn ipv4_vpn = 4 [json_name = "ipv4-vpn"];
                     message Ipv6Vpn {
                        bool policy_vpntarget = 1 [json_name = "policy-vpntarget"];
                        string reflector_cluster_ipv4 = 2 [json_name = "reflector-cluster-ipv4"];
                        message ReflectorType {
                           message Address {
                              string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                           }
                           Address address = 1 [json_name = "address"];
                           message Id {
                              uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                           }
                           Id id = 2 [json_name = "id"];
                        }
                        ReflectorType reflector_type = 3 [json_name = "reflector-type"];
                        bool reflect_change_path = 4 [json_name = "reflect-change-path"];
                        bool auto_frr = 5 [json_name = "auto-frr"];
                        string tunnel_selector_name = 6 [json_name = "tunnel-selector-name"];
                        uint32 route_select_delay = 7 [json_name = "route-select-delay"];
                        enum ApplyLabelMode {
                           ApplyLabelMode_PERX_ROUTE = 0;
                           ApplyLabelMode_PERX_NEXTHOP = 1;
                        };
                        ApplyLabelMode apply_label_mode = 8 [json_name = "apply-label-mode"];
                        enum NexthopSelectDependType {
                           INVALID_ENUM_VALUE_NexthopSelectDependType = 0;
                           NexthopSelectDependType_DEPENDX_TUNNEL = 1;
                           NexthopSelectDependType_DEPENDX_IP = 2;
                        };
                        NexthopSelectDependType nexthop_select_depend_type = 9 [json_name = "nexthop-select-depend-type"];
                        uint32 default_med = 10 [json_name = "default-med"];
                        bool best_external = 11 [json_name = "best-external"];
                        uint32 add_path_select_num = 12 [json_name = "add-path-select-num"];
                        uint32 default_local_preference = 13 [json_name = "default-local-preference"];
                     }
                     Ipv6Vpn ipv6_vpn = 5 [json_name = "ipv6-vpn"];
                     message Ipv4Labeluni {
                        message Common {
                           bool auto_frr = 1 [json_name = "auto-frr"];
                           string tunnel_selector_name = 2 [json_name = "tunnel-selector-name"];
                           bool tunnel_selector_all = 3 [json_name = "tunnel-selector-all"];
                           enum NexthopSelectDependType {
                              INVALID_ENUM_VALUE_NexthopSelectDependType = 0;
                              NexthopSelectDependType_DEPENDX_TUNNEL = 1;
                              NexthopSelectDependType_DEPENDX_IP = 2;
                           };
                           NexthopSelectDependType nexthop_select_depend_type = 4 [json_name = "nexthop-select-depend-type"];
                           bool always_compare_med = 5 [json_name = "always-compare-med"];
                           uint32 default_med = 6 [json_name = "default-med"];
                           bool best_route_bit_error_detection = 7 [json_name = "best-route-bit-error-detection"];
                           bool supernet_label_advertise = 8 [json_name = "supernet-label-advertise"];
                           uint32 lsp_mtu = 9 [json_name = "lsp-mtu"];
                           uint32 label_free_delay = 10 [json_name = "label-free-delay"];
                           bool bestroute_med_confederation = 11 [json_name = "bestroute-med-confederation"];
                           bool bestroute_as_path_ignore = 12 [json_name = "bestroute-as-path-ignore"];
                           bool determin_med = 13 [json_name = "determin-med"];
                           bool best_external = 14 [json_name = "best-external"];
                           uint32 add_path_select_num = 15 [json_name = "add-path-select-num"];
                           bool load_balanc_igp_metric_ignore = 16 [json_name = "load-balanc-igp-metric-ignore"];
                           bool load_balanc_as_path_ignore = 17 [json_name = "load-balanc-as-path-ignore"];
                           bool load_balanc_as_path_relax = 18 [json_name = "load-balanc-as-path-relax"];
                           uint32 default_local_preference = 19 [json_name = "default-local-preference"];
                           bool default_route_import = 20 [json_name = "default-route-import"];
                           bool routerid_neglect = 21 [json_name = "routerid-neglect"];
                           uint32 route_select_delay = 22 [json_name = "route-select-delay"];
                           bool reflect_change_path = 23 [json_name = "reflect-change-path"];
                        }
                        Common common = 1 [json_name = "common"];
                        message ImportRoutes {
                           message ImportRoute {
                              enum Protocol {
                                 INVALID_ENUM_VALUE_Protocol = 0;
                                 Protocol_DIRECT = 1;
                                 Protocol_OSPF = 2;
                                 Protocol_ISIS = 3;
                                 Protocol_STATIC = 4;
                                 Protocol_RIP = 5;
                                 Protocol_UNR = 11;
                                 Protocol_OPX_ROUTE = 14;
                              };
                              Protocol protocol = 1 [json_name = "protocol"];
                              uint32 process_id = 2 [json_name = "process-id"];
                              message PolicyType {
                                 message RtpRef {
                                    string policy_name = 1 [json_name = "policy-name"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              PolicyType policy_type = 3 [json_name = "policy-type"];
                           }
                           repeated ImportRoute import_route = 1 [json_name = "import-route"];
                        }
                        ImportRoutes import_routes = 2 [json_name = "import-routes"];
                        message ImportRibs {
                           message ImportRib {
                              string source_vpn = 1 [json_name = "source-vpn"];
                              enum SourceAddressFamily {
                                 INVALID_ENUM_VALUE_SourceAddressFamily = 0;
                                 SourceAddressFamily_IPV4UNI = 1;
                                 SourceAddressFamily_IPV4LABELUNI = 4;
                              };
                              SourceAddressFamily source_address_family = 2 [json_name = "source-address-family"];
                              bool valid_route = 3 [json_name = "valid-route"];
                              bool include_label_route = 4 [json_name = "include-label-route"];
                              message PolicyType {
                                 message RtpRef {
                                    string policy_name = 1 [json_name = "policy-name"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              PolicyType policy_type = 5 [json_name = "policy-type"];
                           }
                           repeated ImportRib import_rib = 1 [json_name = "import-rib"];
                        }
                        ImportRibs import_ribs = 3 [json_name = "import-ribs"];
                        message LspOptions {
                           bool ingress_protect_mode_bgp_frr = 1 [json_name = "ingress-protect-mode-bgp-frr"];
                           uint32 maximum_load_balancing_ingress = 2 [json_name = "maximum-load-balancing-ingress"];
                           uint32 maximum_load_balancing_transit = 3 [json_name = "maximum-load-balancing-transit"];
                        }
                        LspOptions lsp_options = 4 [json_name = "lsp-options"];
                     }
                     Ipv4Labeluni ipv4_labeluni = 6 [json_name = "ipv4-labeluni"];
                     message Ipv4Multicast {
                        message Common {
                           bool always_compare_med = 1 [json_name = "always-compare-med"];
                           uint32 default_med = 2 [json_name = "default-med"];
                           bool summary_automatic = 3 [json_name = "summary-automatic"];
                           bool bestroute_med_confederation = 4 [json_name = "bestroute-med-confederation"];
                           uint32 default_local_preference = 5 [json_name = "default-local-preference"];
                           bool default_route_import = 6 [json_name = "default-route-import"];
                           bool routerid_neglect = 7 [json_name = "routerid-neglect"];
                           uint32 route_select_delay = 8 [json_name = "route-select-delay"];
                           bool reflect_change_path = 9 [json_name = "reflect-change-path"];
                        }
                        Common common = 1 [json_name = "common"];
                     }
                     Ipv4Multicast ipv4_multicast = 7 [json_name = "ipv4-multicast"];
                     message L2Vpnad {
                        message Common {
                           bool policy_vpntarget = 1 [json_name = "policy-vpntarget"];
                           bool vpls_ad_disable = 2 [json_name = "vpls-ad-disable"];
                           bool vpws_enable = 3 [json_name = "vpws-enable"];
                           bool vpls_enable = 4 [json_name = "vpls-enable"];
                           bool multi_homing_nonstand = 5 [json_name = "multi-homing-nonstand"];
                           bool vpn_orf_enable = 6 [json_name = "vpn-orf-enable"];
                           uint32 route_select_delay = 7 [json_name = "route-select-delay"];
                           bool reflect_change_path = 8 [json_name = "reflect-change-path"];
                        }
                        Common common = 1 [json_name = "common"];
                     }
                     L2Vpnad l2vpnad = 8 [json_name = "l2vpnad"];
                     message Ipv4Flow {
                        message Common {
                           bool route_match_destination = 1 [json_name = "route-match-destination"];
                           bool validation_mode_as = 2 [json_name = "validation-mode-as"];
                           bool redirect_ip_relay_tnl_enable = 3 [json_name = "redirect-ip-relay-tnl-enable"];
                        }
                        Common common = 1 [json_name = "common"];
                     }
                     Ipv4Flow ipv4_flow = 9 [json_name = "ipv4-flow"];
                     message Ipv6Flow {
                        message Common {
                           bool route_match_destination = 1 [json_name = "route-match-destination"];
                           bool validation_mode_as = 2 [json_name = "validation-mode-as"];
                        }
                        Common common = 1 [json_name = "common"];
                     }
                     Ipv6Flow ipv6_flow = 10 [json_name = "ipv6-flow"];
                     message Vpntarget {
                        message Common {
                           uint32 external_path_num = 1 [json_name = "external-path-num"];
                           bool rt_filter_disable = 2 [json_name = "rt-filter-disable"];
                           uint32 timer_for_end_of_rib = 3 [json_name = "timer-for-end-of-rib"];
                           uint32 route_select_delay = 4 [json_name = "route-select-delay"];
                           uint32 default_med = 5 [json_name = "default-med"];
                           bool reflect_change_path = 6 [json_name = "reflect-change-path"];
                        }
                        Common common = 1 [json_name = "common"];
                     }
                     Vpntarget vpntarget = 11 [json_name = "vpntarget"];
                     message Ipv4Srpolicy {
                        message Common {
                           bool routerid_neglect = 1 [json_name = "routerid-neglect"];
                           bool reflect_change_path = 2 [json_name = "reflect-change-path"];
                        }
                        Common common = 1 [json_name = "common"];
                     }
                     Ipv4Srpolicy ipv4_srpolicy = 12 [json_name = "ipv4-srpolicy"];
                     message L2VpnEvpn {
                        bool policy_vpntarget = 1 [json_name = "policy-vpntarget"];
                     }
                     L2VpnEvpn l2vpn_evpn = 13 [json_name = "l2vpn-evpn"];
                     message Ipv4Mvpn {
                        message Common {
                           bool policy_vpntarget = 1 [json_name = "policy-vpntarget"];
                           bool vpn_orf_enable = 2 [json_name = "vpn-orf-enable"];
                           uint32 route_select_delay = 3 [json_name = "route-select-delay"];
                           bool reflect_change_path = 4 [json_name = "reflect-change-path"];
                        }
                        Common common = 1 [json_name = "common"];
                     }
                     Ipv4Mvpn ipv4_mvpn = 14 [json_name = "ipv4-mvpn"];
                     message Ipv6Mvpn {
                        message Common {
                           bool policy_vpntarget = 1 [json_name = "policy-vpntarget"];
                           uint32 route_select_delay = 2 [json_name = "route-select-delay"];
                           bool reflect_change_path = 3 [json_name = "reflect-change-path"];
                        }
                        Common common = 1 [json_name = "common"];
                     }
                     Ipv6Mvpn ipv6_mvpn = 15 [json_name = "ipv6-mvpn"];
                     message LinkStateUnicast {
                        message Common {
                           bool reflect_between_client = 1 [json_name = "reflect-between-client"];
                           string domain_as = 2 [json_name = "domain-as"];
                           string domain_identifier = 3 [json_name = "domain-identifier"];
                        }
                        Common common = 1 [json_name = "common"];
                     }
                     LinkStateUnicast link_state_unicast = 16 [json_name = "link-state-unicast"];
                  }
                  repeated Af af = 1 [json_name = "af"];
               }
               Afs afs = 2 [json_name = "afs"];
               message PeerGroups {
                  message PeerGroup {
                     string name = 1 [json_name = "name"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_EBGP = 1;
                        Type_IBGP = 2;
                     };
                     Type type = 2 [json_name = "type"];
                     string local_if_name = 3 [json_name = "local-if-name"];
                     enum PasswordType {
                        PasswordType_NULL = 0;
                        PasswordType_CIPHER = 1;
                        PasswordType_SIMPLE = 2;
                     };
                     PasswordType password_type = 4 [json_name = "password-type"];
                     string password_text = 5 [json_name = "password-text"];
                     string description = 6 [json_name = "description"];
                     message Afs {
                        message Af {
                           enum Type {
                              INVALID_ENUM_VALUE_Type = 0;
                              Type_IPV4UNI = 1;
                              Type_IPV4MULTI = 2;
                              Type_IPV4VPN = 3;
                              Type_IPV4LABELUNI = 4;
                              Type_IPV6UNI = 5;
                              Type_IPV6VPN = 6;
                              Type_IPV4FLOW = 7;
                              Type_L2VPNAD = 8;
                              Type_EVPN = 9;
                              Type_MVPN = 10;
                              Type_VPNTARGET = 11;
                              Type_IPV4VPNMCAST = 12;
                              Type_LS = 13;
                              Type_MDT = 14;
                              Type_IPV6FLOW = 15;
                              Type_MVPNV6 = 16;
                              Type_VPNV4FLOW = 17;
                              Type_VPNV6FLOW = 18;
                              Type_RPD = 19;
                              Type_IPV4SRPOLICY = 20;
                           };
                           Type type = 1 [json_name = "type"];
                           message Ipv4Unicast {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              message ImportPolicyType {
                                 message RtpRef {
                                    string import_policy = 1 [json_name = "import-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                                 message XplRef {
                                    message ImportFilter {
                                       string name = 1 [json_name = "name"];
                                       string parameter = 2 [json_name = "parameter"];
                                    }
                                    ImportFilter import_filter = 1 [json_name = "import-filter"];
                                 }
                                 XplRef xpl_ref = 2 [json_name = "xpl-ref"];
                              }
                              ImportPolicyType import_policy_type = 2 [json_name = "import-policy-type"];
                              message ExportPolicyType {
                                 message RtpRef {
                                    string export_policy = 1 [json_name = "export-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                                 message XplRef {
                                    message ExportFilter {
                                       string name = 1 [json_name = "name"];
                                       string parameter = 2 [json_name = "parameter"];
                                    }
                                    ExportFilter export_filter = 1 [json_name = "export-filter"];
                                 }
                                 XplRef xpl_ref = 2 [json_name = "xpl-ref"];
                              }
                              ExportPolicyType export_policy_type = 3 [json_name = "export-policy-type"];
                              bool reflect_client = 4 [json_name = "reflect-client"];
                              enum OrfType {
                                 OrfType_NULL = 0;
                                 OrfType_IPX_PREFIX = 64;
                                 OrfType_NONSTANDARDX_COMPATIBLE = 128;
                              };
                              OrfType orf_type = 5 [json_name = "orf-type"];
                              enum OrfMode {
                                 OrfMode_NULL = 0;
                                 OrfMode_RECEIVE = 1;
                                 OrfMode_SEND = 2;
                                 OrfMode_BOTH = 3;
                              };
                              OrfMode orf_mode = 6 [json_name = "orf-mode"];
                              bool label_route_capability = 7 [json_name = "label-route-capability"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 8 [json_name = "nexthop-configure"];
                              bool advertise_ext_community = 9 [json_name = "advertise-ext-community"];
                              bool discard_ext_community = 10 [json_name = "discard-ext-community"];
                              uint32 allow_as_loop = 11 [json_name = "allow-as-loop"];
                              bool aigp = 12 [json_name = "aigp"];
                              enum AddPathMode {
                                 AddPathMode_NULL = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 13 [json_name = "add-path-mode"];
                              string import_ip_prefix = 14 [json_name = "import-ip-prefix"];
                              string export_ip_prefix = 15 [json_name = "export-ip-prefix"];
                              string import_as_path_filter = 16 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 17 [json_name = "export-as-path-filter"];
                              bool default_route_advertise = 18 [json_name = "default-route-advertise"];
                              message DefaultRouteAdvertisePolicyType {
                                 message RtpRef {
                                    string default_route_advertise_policy = 1 [json_name = "default-route-advertise-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              DefaultRouteAdvertisePolicyType default_route_advertise_policy_type = 19 [json_name = "default-route-advertise-policy-type"];
                              message RouteLimit {
                                 uint32 number = 1 [json_name = "number"];
                                 bool accept_prefix = 2 [json_name = "accept-prefix"];
                                 uint32 percent = 3 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 4 [json_name = "type"];
                                 uint32 idle_timeout = 5 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 20 [json_name = "route-limit"];
                              message PublicAsOnly {
                                 bool enable = 1 [json_name = "enable"];
                                 message RemovePrivateAs {
                                    message All {
                                       bool force = 1 [json_name = "force"];
                                    }
                                    All all = 1 [json_name = "all"];
                                    message LeftMost {
                                       bool limited = 1 [json_name = "limited"];
                                    }
                                    LeftMost left_most = 2 [json_name = "left-most"];
                                 }
                                 RemovePrivateAs remove_private_as = 2 [json_name = "remove-private-as"];
                                 bool replace = 3 [json_name = "replace"];
                                 bool no_skip_as = 4 [json_name = "no-skip-as"];
                              }
                              PublicAsOnly public_as_only = 21 [json_name = "public-as-only"];
                           }
                           Ipv4Unicast ipv4_unicast = 2 [json_name = "ipv4-unicast"];
                           message Ipv6Unicast {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              message ImportPolicyType {
                                 message RtpRef {
                                    string import_policy = 1 [json_name = "import-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              ImportPolicyType import_policy_type = 2 [json_name = "import-policy-type"];
                              message ExportPolicyType {
                                 message RtpRef {
                                    string export_policy = 1 [json_name = "export-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              ExportPolicyType export_policy_type = 3 [json_name = "export-policy-type"];
                              bool reflect_client = 4 [json_name = "reflect-client"];
                              bool label_route_capability = 5 [json_name = "label-route-capability"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 6 [json_name = "nexthop-configure"];
                              bool advertise_ext_community = 7 [json_name = "advertise-ext-community"];
                              bool discard_ext_community = 8 [json_name = "discard-ext-community"];
                              uint32 allow_as_loop = 9 [json_name = "allow-as-loop"];
                              bool aigp = 10 [json_name = "aigp"];
                              bool default_route_advertise = 11 [json_name = "default-route-advertise"];
                              message DefaultRouteAdvertisePolicyType {
                                 message RtpRef {
                                    string default_route_advertise_policy = 1 [json_name = "default-route-advertise-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              DefaultRouteAdvertisePolicyType default_route_advertise_policy_type = 12 [json_name = "default-route-advertise-policy-type"];
                              enum AddPathMode {
                                 AddPathMode_NULL = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 13 [json_name = "add-path-mode"];
                              string import_ipv6_prefix = 14 [json_name = "import-ipv6-prefix"];
                              string export_ipv6_prefix = 15 [json_name = "export-ipv6-prefix"];
                              string import_as_path_filter = 16 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 17 [json_name = "export-as-path-filter"];
                              message RouteLimit {
                                 uint32 number = 1 [json_name = "number"];
                                 bool accept_prefix = 2 [json_name = "accept-prefix"];
                                 uint32 percent = 3 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 4 [json_name = "type"];
                                 uint32 idle_timeout = 5 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 18 [json_name = "route-limit"];
                              message PublicAsOnly {
                                 bool enable = 1 [json_name = "enable"];
                                 message RemovePrivateAs {
                                    message All {
                                       bool force = 1 [json_name = "force"];
                                    }
                                    All all = 1 [json_name = "all"];
                                    message LeftMost {
                                       bool limited = 1 [json_name = "limited"];
                                    }
                                    LeftMost left_most = 2 [json_name = "left-most"];
                                 }
                                 RemovePrivateAs remove_private_as = 2 [json_name = "remove-private-as"];
                                 bool replace = 3 [json_name = "replace"];
                                 bool no_skip_as = 4 [json_name = "no-skip-as"];
                              }
                              PublicAsOnly public_as_only = 19 [json_name = "public-as-only"];
                           }
                           Ipv6Unicast ipv6_unicast = 3 [json_name = "ipv6-unicast"];
                           message Ipv4Vpn {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              message ImportPolicyType {
                                 message RtpRef {
                                    string import_policy = 1 [json_name = "import-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              ImportPolicyType import_policy_type = 2 [json_name = "import-policy-type"];
                              message ExportPolicyType {
                                 message RtpRef {
                                    string export_policy = 1 [json_name = "export-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              ExportPolicyType export_policy_type = 3 [json_name = "export-policy-type"];
                              bool reflect_client = 4 [json_name = "reflect-client"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 5 [json_name = "nexthop-configure"];
                              uint32 allow_as_loop = 6 [json_name = "allow-as-loop"];
                              bool aigp = 7 [json_name = "aigp"];
                              enum AddPathMode {
                                 AddPathMode_NULL = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 8 [json_name = "add-path-mode"];
                              string import_ip_prefix = 9 [json_name = "import-ip-prefix"];
                              string export_ip_prefix = 10 [json_name = "export-ip-prefix"];
                              bool reoriginate_route_enable = 11 [json_name = "reoriginate-route-enable"];
                              bool reoriginate_ip_enable = 12 [json_name = "reoriginate-ip-enable"];
                              bool reoriginate_mac_ip_enable = 13 [json_name = "reoriginate-mac-ip-enable"];
                              string import_as_path_filter = 14 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 15 [json_name = "export-as-path-filter"];
                              message DefaultRouteOriginates {
                                 message DefaultRouteOriginate {
                                    string vpn_name = 1 [json_name = "vpn-name"];
                                 }
                                 repeated DefaultRouteOriginate default_route_originate = 1 [json_name = "default-route-originate"];
                              }
                              DefaultRouteOriginates default_route_originates = 16 [json_name = "default-route-originates"];
                           }
                           Ipv4Vpn ipv4_vpn = 4 [json_name = "ipv4-vpn"];
                           message Ipv6Vpn {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              message ImportPolicyType {
                                 message RtpRef {
                                    string import_policy = 1 [json_name = "import-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              ImportPolicyType import_policy_type = 2 [json_name = "import-policy-type"];
                              message ExportPolicyType {
                                 message RtpRef {
                                    string export_policy = 1 [json_name = "export-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              ExportPolicyType export_policy_type = 3 [json_name = "export-policy-type"];
                              bool reflect_client = 4 [json_name = "reflect-client"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 5 [json_name = "nexthop-configure"];
                              uint32 allow_as_loop = 6 [json_name = "allow-as-loop"];
                              bool aigp = 7 [json_name = "aigp"];
                              enum AddPathMode {
                                 AddPathMode_NULL = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 8 [json_name = "add-path-mode"];
                              string import_ipv6_prefix = 9 [json_name = "import-ipv6-prefix"];
                              string export_ipv6_prefix = 10 [json_name = "export-ipv6-prefix"];
                              bool reoriginate_route_enable = 11 [json_name = "reoriginate-route-enable"];
                              bool reoriginate_ipv6_enable = 12 [json_name = "reoriginate-ipv6-enable"];
                              bool reoriginate_mac_ipv6_enable = 13 [json_name = "reoriginate-mac-ipv6-enable"];
                              string import_as_path_filter = 14 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 15 [json_name = "export-as-path-filter"];
                           }
                           Ipv6Vpn ipv6_vpn = 5 [json_name = "ipv6-vpn"];
                           message Ipv4Labeluni {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              bool reflect_client = 2 [json_name = "reflect-client"];
                              message ImportPolicyType {
                                 message RtpRef {
                                    string import_policy = 1 [json_name = "import-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              ImportPolicyType import_policy_type = 3 [json_name = "import-policy-type"];
                              message ExportPolicyType {
                                 message RtpRef {
                                    string export_policy = 1 [json_name = "export-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              ExportPolicyType export_policy_type = 4 [json_name = "export-policy-type"];
                              bool advertise_ext_community = 5 [json_name = "advertise-ext-community"];
                              bool discard_ext_community = 6 [json_name = "discard-ext-community"];
                              uint32 allow_as_loop = 7 [json_name = "allow-as-loop"];
                              bool aigp = 8 [json_name = "aigp"];
                              enum AddPathMode {
                                 AddPathMode_NULL = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 9 [json_name = "add-path-mode"];
                              string import_ip_prefix = 10 [json_name = "import-ip-prefix"];
                              string export_ip_prefix = 11 [json_name = "export-ip-prefix"];
                              string import_as_path_filter = 12 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 13 [json_name = "export-as-path-filter"];
                              message RouteLimit {
                                 uint32 number = 1 [json_name = "number"];
                                 bool accept_prefix = 2 [json_name = "accept-prefix"];
                                 uint32 percent = 3 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 4 [json_name = "type"];
                                 uint32 idle_timeout = 5 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 14 [json_name = "route-limit"];
                              message PublicAsOnly {
                                 bool enable = 1 [json_name = "enable"];
                                 message RemovePrivateAs {
                                    message All {
                                       bool force = 1 [json_name = "force"];
                                    }
                                    All all = 1 [json_name = "all"];
                                    message LeftMost {
                                       bool limited = 1 [json_name = "limited"];
                                    }
                                    LeftMost left_most = 2 [json_name = "left-most"];
                                 }
                                 RemovePrivateAs remove_private_as = 2 [json_name = "remove-private-as"];
                                 bool replace = 3 [json_name = "replace"];
                                 bool no_skip_as = 4 [json_name = "no-skip-as"];
                              }
                              PublicAsOnly public_as_only = 15 [json_name = "public-as-only"];
                           }
                           Ipv4Labeluni ipv4_labeluni = 6 [json_name = "ipv4-labeluni"];
                           message Ipv4Multicast {
                              bool default_route_advertise = 1 [json_name = "default-route-advertise"];
                              message DefaultRouteAdvertisePolicyType {
                                 message RtpRef {
                                    string default_route_advertise_policy = 1 [json_name = "default-route-advertise-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              DefaultRouteAdvertisePolicyType default_route_advertise_policy_type = 2 [json_name = "default-route-advertise-policy-type"];
                              string import_ip_prefix = 3 [json_name = "import-ip-prefix"];
                              string export_ip_prefix = 4 [json_name = "export-ip-prefix"];
                              string import_as_path_filter = 5 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 6 [json_name = "export-as-path-filter"];
                           }
                           Ipv4Multicast ipv4_multicast = 7 [json_name = "ipv4-multicast"];
                           message L2Vpnad {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              bool reflect_client = 2 [json_name = "reflect-client"];
                           }
                           L2Vpnad l2vpnad = 8 [json_name = "l2vpnad"];
                           message Vpntarget {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              bool reflect_client = 2 [json_name = "reflect-client"];
                              bool default_route_advertise = 3 [json_name = "default-route-advertise"];
                              string import_as_path_filter = 4 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 5 [json_name = "export-as-path-filter"];
                           }
                           Vpntarget vpntarget = 9 [json_name = "vpntarget"];
                           message L2VpnEvpn {
                              bool reflect_client = 1 [json_name = "reflect-client"];
                              bool advertise_community = 2 [json_name = "advertise-community"];
                           }
                           L2VpnEvpn l2vpn_evpn = 10 [json_name = "l2vpn-evpn"];
                           message Ipv4Mvpn {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              bool reflect_client = 2 [json_name = "reflect-client"];
                              string import_as_path_filter = 3 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 4 [json_name = "export-as-path-filter"];
                              bool advertise_c_multicast_route = 5 [json_name = "advertise-c-multicast-route"];
                           }
                           Ipv4Mvpn ipv4_mvpn = 11 [json_name = "ipv4-mvpn"];
                           message Ipv6Mvpn {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              bool reflect_client = 2 [json_name = "reflect-client"];
                              string import_as_path_filter = 3 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 4 [json_name = "export-as-path-filter"];
                           }
                           Ipv6Mvpn ipv6_mvpn = 12 [json_name = "ipv6-mvpn"];
                        }
                        repeated Af af = 1 [json_name = "af"];
                     }
                     Afs afs = 7 [json_name = "afs"];
                     string key_chain_name = 8 [json_name = "key-chain-name"];
                     string group_as = 9 [json_name = "group-as"];
                     string local_if_address = 10 [json_name = "local-if-address"];
                     uint32 tcp_mss = 11 [json_name = "tcp-mss"];
                     uint32 ebgp_max_hop = 12 [json_name = "ebgp-max-hop"];
                     uint32 valid_ttl_hops = 13 [json_name = "valid-ttl-hops"];
                     bool tracking_enable = 14 [json_name = "tracking-enable"];
                     uint32 tracking_delay_time = 15 [json_name = "tracking-delay-time"];
                     bool conventional = 16 [json_name = "conventional"];
                     bool route_refresh = 17 [json_name = "route-refresh"];
                     bool four_byte_as = 18 [json_name = "four-byte-as"];
                     bool ignore = 19 [json_name = "ignore"];
                     enum ConnectMode {
                        INVALID_ENUM_VALUE_ConnectMode = 0;
                        ConnectMode_LISTENX_ONLY = 1;
                        ConnectMode_CONNECTX_ONLY = 2;
                        ConnectMode_NULL = 3;
                     };
                     ConnectMode connect_mode = 20 [json_name = "connect-mode"];
                     bool log_change = 21 [json_name = "log-change"];
                     bool path_mtu_auto_discovery = 22 [json_name = "path-mtu-auto-discovery"];
                     bool local_ifnet_disable = 23 [json_name = "local-ifnet-disable"];
                     enum CheckFirstAs {
                        CheckFirstAs_DEFAULT = 0;
                        CheckFirstAs_ENABLE = 1;
                        CheckFirstAs_DISABLE = 2;
                     };
                     CheckFirstAs check_first_as = 24 [json_name = "check-first-as"];
                     message FakeAsParameter {
                        string fake_as = 1 [json_name = "fake-as"];
                        bool dual_as = 2 [json_name = "dual-as"];
                        bool prepend_global_as = 3 [json_name = "prepend-global-as"];
                        bool prepend_fake_as = 4 [json_name = "prepend-fake-as"];
                     }
                     FakeAsParameter fake_as_parameter = 25 [json_name = "fake-as-parameter"];
                     message Timer {
                        uint32 keep_alive_time = 1 [json_name = "keep-alive-time"];
                        uint32 hold_time = 2 [json_name = "hold-time"];
                        uint32 min_hold_time = 3 [json_name = "min-hold-time"];
                        uint32 connect_retry_time = 4 [json_name = "connect-retry-time"];
                     }
                     Timer timer = 26 [json_name = "timer"];
                     message BfdParameter {
                        bool enable = 1 [json_name = "enable"];
                        message ModeType {
                           message Single {
                              bool single_hop = 1 [json_name = "single-hop"];
                              bool compatible = 2 [json_name = "compatible"];
                           }
                           Single single = 1 [json_name = "single"];
                           message Link {
                              bool per_link_echo = 1 [json_name = "per-link-echo"];
                           }
                           Link link = 2 [json_name = "link"];
                        }
                        ModeType mode_type = 2 [json_name = "mode-type"];
                        uint32 multiplier = 3 [json_name = "multiplier"];
                        uint32 min_rx_interval = 4 [json_name = "min-rx-interval"];
                        uint32 min_tx_interval = 5 [json_name = "min-tx-interval"];
                     }
                     BfdParameter bfd_parameter = 27 [json_name = "bfd-parameter"];
                     message Members {
                        message Member {
                           string peer_address = 1 [json_name = "peer-address"];
                        }
                        repeated Member member = 1 [json_name = "member"];
                     }
                     Members members = 28 [json_name = "members"];
                  }
                  repeated PeerGroup peer_group = 1 [json_name = "peer-group"];
               }
               PeerGroups peer_groups = 3 [json_name = "peer-groups"];
               message Peers {
                  message Peer {
                     string address = 1 [json_name = "address"];
                     string remote_as = 2 [json_name = "remote-as"];
                     string group_name = 3 [json_name = "group-name"];
                     string local_if_name = 4 [json_name = "local-if-name"];
                     enum PasswordType {
                        PasswordType_NULL = 0;
                        PasswordType_CIPHER = 1;
                        PasswordType_SIMPLE = 2;
                     };
                     PasswordType password_type = 5 [json_name = "password-type"];
                     string password_text = 6 [json_name = "password-text"];
                     string description = 7 [json_name = "description"];
                     message Afs {
                        message Af {
                           enum Type {
                              INVALID_ENUM_VALUE_Type = 0;
                              Type_IPV4UNI = 1;
                              Type_IPV4MULTI = 2;
                              Type_IPV4VPN = 3;
                              Type_IPV4LABELUNI = 4;
                              Type_IPV6UNI = 5;
                              Type_IPV6VPN = 6;
                              Type_IPV4FLOW = 7;
                              Type_L2VPNAD = 8;
                              Type_EVPN = 9;
                              Type_MVPN = 10;
                              Type_VPNTARGET = 11;
                              Type_IPV4VPNMCAST = 12;
                              Type_LS = 13;
                              Type_MDT = 14;
                              Type_IPV6FLOW = 15;
                              Type_MVPNV6 = 16;
                              Type_VPNV4FLOW = 17;
                              Type_VPNV6FLOW = 18;
                              Type_RPD = 19;
                              Type_IPV4SRPOLICY = 20;
                           };
                           Type type = 1 [json_name = "type"];
                           message Ipv4Unicast {
                              string group_name = 1 [json_name = "group-name"];
                              bool advertise_community = 2 [json_name = "advertise-community"];
                              message ImportPolicyType {
                                 message RtpRef {
                                    string import_policy = 1 [json_name = "import-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                                 message XplRef {
                                    message ImportFilter {
                                       string name = 1 [json_name = "name"];
                                       string parameter = 2 [json_name = "parameter"];
                                    }
                                    ImportFilter import_filter = 1 [json_name = "import-filter"];
                                 }
                                 XplRef xpl_ref = 2 [json_name = "xpl-ref"];
                              }
                              ImportPolicyType import_policy_type = 3 [json_name = "import-policy-type"];
                              message ExportPolicyType {
                                 message RtpRef {
                                    string export_policy = 1 [json_name = "export-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                                 message XplRef {
                                    message ExportFilter {
                                       string name = 1 [json_name = "name"];
                                       string parameter = 2 [json_name = "parameter"];
                                    }
                                    ExportFilter export_filter = 1 [json_name = "export-filter"];
                                 }
                                 XplRef xpl_ref = 2 [json_name = "xpl-ref"];
                              }
                              ExportPolicyType export_policy_type = 4 [json_name = "export-policy-type"];
                              bool reflect_client = 5 [json_name = "reflect-client"];
                              enum OrfType {
                                 OrfType_NULL = 0;
                                 OrfType_IPX_PREFIX = 64;
                                 OrfType_NONSTANDARDX_COMPATIBLE = 128;
                              };
                              OrfType orf_type = 6 [json_name = "orf-type"];
                              enum OrfMode {
                                 OrfMode_NULL = 0;
                                 OrfMode_RECEIVE = 1;
                                 OrfMode_SEND = 2;
                                 OrfMode_BOTH = 3;
                              };
                              OrfMode orf_mode = 7 [json_name = "orf-mode"];
                              bool label_route_capability = 8 [json_name = "label-route-capability"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 9 [json_name = "nexthop-configure"];
                              bool advertise_ext_community = 10 [json_name = "advertise-ext-community"];
                              bool discard_ext_community = 11 [json_name = "discard-ext-community"];
                              uint32 allow_as_loop = 12 [json_name = "allow-as-loop"];
                              bool aigp = 13 [json_name = "aigp"];
                              bool default_route_advertise = 14 [json_name = "default-route-advertise"];
                              message DefaultRouteAdvertisePolicyType {
                                 message RtpRef {
                                    string default_route_advertise_policy = 1 [json_name = "default-route-advertise-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              DefaultRouteAdvertisePolicyType default_route_advertise_policy_type = 15 [json_name = "default-route-advertise-policy-type"];
                              enum AddPathMode {
                                 AddPathMode_NULL = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 16 [json_name = "add-path-mode"];
                              string import_ip_prefix = 17 [json_name = "import-ip-prefix"];
                              string export_ip_prefix = 18 [json_name = "export-ip-prefix"];
                              string import_as_path_filter = 19 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 20 [json_name = "export-as-path-filter"];
                              message RouteLimit {
                                 uint32 number = 1 [json_name = "number"];
                                 bool accept_prefix = 2 [json_name = "accept-prefix"];
                                 uint32 percent = 3 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 4 [json_name = "type"];
                                 uint32 idle_timeout = 5 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 21 [json_name = "route-limit"];
                              message PublicAsOnly {
                                 bool enable = 1 [json_name = "enable"];
                                 message RemovePrivateAs {
                                    message All {
                                       bool force = 1 [json_name = "force"];
                                    }
                                    All all = 1 [json_name = "all"];
                                    message LeftMost {
                                       bool limited = 1 [json_name = "limited"];
                                    }
                                    LeftMost left_most = 2 [json_name = "left-most"];
                                 }
                                 RemovePrivateAs remove_private_as = 2 [json_name = "remove-private-as"];
                                 bool replace = 3 [json_name = "replace"];
                                 bool no_skip_as = 4 [json_name = "no-skip-as"];
                              }
                              PublicAsOnly public_as_only = 22 [json_name = "public-as-only"];
                           }
                           Ipv4Unicast ipv4_unicast = 2 [json_name = "ipv4-unicast"];
                           message Ipv6Unicast {
                              string group_name = 1 [json_name = "group-name"];
                              bool advertise_community = 2 [json_name = "advertise-community"];
                              message ImportPolicyType {
                                 message RtpRef {
                                    string import_policy = 1 [json_name = "import-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              ImportPolicyType import_policy_type = 3 [json_name = "import-policy-type"];
                              message ExportPolicyType {
                                 message RtpRef {
                                    string export_policy = 1 [json_name = "export-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              ExportPolicyType export_policy_type = 4 [json_name = "export-policy-type"];
                              bool reflect_client = 5 [json_name = "reflect-client"];
                              bool label_route_capability = 6 [json_name = "label-route-capability"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 7 [json_name = "nexthop-configure"];
                              bool advertise_ext_community = 8 [json_name = "advertise-ext-community"];
                              bool discard_ext_community = 9 [json_name = "discard-ext-community"];
                              uint32 allow_as_loop = 10 [json_name = "allow-as-loop"];
                              bool aigp = 11 [json_name = "aigp"];
                              bool default_route_advertise = 12 [json_name = "default-route-advertise"];
                              message DefaultRouteAdvertisePolicyType {
                                 message RtpRef {
                                    string default_route_advertise_policy = 1 [json_name = "default-route-advertise-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              DefaultRouteAdvertisePolicyType default_route_advertise_policy_type = 13 [json_name = "default-route-advertise-policy-type"];
                              enum AddPathMode {
                                 AddPathMode_NULL = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 14 [json_name = "add-path-mode"];
                              string import_ipv6_prefix = 15 [json_name = "import-ipv6-prefix"];
                              string export_ipv6_prefix = 16 [json_name = "export-ipv6-prefix"];
                              string import_as_path_filter = 17 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 18 [json_name = "export-as-path-filter"];
                              message RouteLimit {
                                 uint32 number = 1 [json_name = "number"];
                                 bool accept_prefix = 2 [json_name = "accept-prefix"];
                                 uint32 percent = 3 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 4 [json_name = "type"];
                                 uint32 idle_timeout = 5 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 19 [json_name = "route-limit"];
                              message PublicAsOnly {
                                 bool enable = 1 [json_name = "enable"];
                                 message RemovePrivateAs {
                                    message All {
                                       bool force = 1 [json_name = "force"];
                                    }
                                    All all = 1 [json_name = "all"];
                                    message LeftMost {
                                       bool limited = 1 [json_name = "limited"];
                                    }
                                    LeftMost left_most = 2 [json_name = "left-most"];
                                 }
                                 RemovePrivateAs remove_private_as = 2 [json_name = "remove-private-as"];
                                 bool replace = 3 [json_name = "replace"];
                                 bool no_skip_as = 4 [json_name = "no-skip-as"];
                              }
                              PublicAsOnly public_as_only = 20 [json_name = "public-as-only"];
                           }
                           Ipv6Unicast ipv6_unicast = 3 [json_name = "ipv6-unicast"];
                           message Ipv4Vpn {
                              string group_name = 1 [json_name = "group-name"];
                              bool advertise_community = 2 [json_name = "advertise-community"];
                              message ImportPolicyType {
                                 message RtpRef {
                                    string import_policy = 1 [json_name = "import-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              ImportPolicyType import_policy_type = 3 [json_name = "import-policy-type"];
                              message ExportPolicyType {
                                 message RtpRef {
                                    string export_policy = 1 [json_name = "export-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              ExportPolicyType export_policy_type = 4 [json_name = "export-policy-type"];
                              bool reflect_client = 5 [json_name = "reflect-client"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 6 [json_name = "nexthop-configure"];
                              uint32 allow_as_loop = 7 [json_name = "allow-as-loop"];
                              bool aigp = 8 [json_name = "aigp"];
                              enum AddPathMode {
                                 AddPathMode_NULL = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 9 [json_name = "add-path-mode"];
                              string import_ip_prefix = 10 [json_name = "import-ip-prefix"];
                              string export_ip_prefix = 11 [json_name = "export-ip-prefix"];
                              bool reoriginate_route_enable = 12 [json_name = "reoriginate-route-enable"];
                              bool reoriginate_ip_enable = 13 [json_name = "reoriginate-ip-enable"];
                              bool reoriginate_mac_ip_enable = 14 [json_name = "reoriginate-mac-ip-enable"];
                              string import_as_path_filter = 15 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 16 [json_name = "export-as-path-filter"];
                              message DefaultRouteOriginates {
                                 message DefaultRouteOriginate {
                                    string vpn_name = 1 [json_name = "vpn-name"];
                                 }
                                 repeated DefaultRouteOriginate default_route_originate = 1 [json_name = "default-route-originate"];
                              }
                              DefaultRouteOriginates default_route_originates = 17 [json_name = "default-route-originates"];
                           }
                           Ipv4Vpn ipv4_vpn = 4 [json_name = "ipv4-vpn"];
                           message Ipv6Vpn {
                              string group_name = 1 [json_name = "group-name"];
                              bool advertise_community = 2 [json_name = "advertise-community"];
                              message ImportPolicyType {
                                 message RtpRef {
                                    string import_policy = 1 [json_name = "import-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              ImportPolicyType import_policy_type = 3 [json_name = "import-policy-type"];
                              message ExportPolicyType {
                                 message RtpRef {
                                    string export_policy = 1 [json_name = "export-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              ExportPolicyType export_policy_type = 4 [json_name = "export-policy-type"];
                              bool reflect_client = 5 [json_name = "reflect-client"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 6 [json_name = "nexthop-configure"];
                              uint32 allow_as_loop = 7 [json_name = "allow-as-loop"];
                              bool aigp = 8 [json_name = "aigp"];
                              enum AddPathMode {
                                 AddPathMode_NULL = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 9 [json_name = "add-path-mode"];
                              string import_ipv6_prefix = 10 [json_name = "import-ipv6-prefix"];
                              string export_ipv6_prefix = 11 [json_name = "export-ipv6-prefix"];
                              bool reoriginate_route_enable = 12 [json_name = "reoriginate-route-enable"];
                              bool reoriginate_ipv6_enable = 13 [json_name = "reoriginate-ipv6-enable"];
                              bool reoriginate_mac_ipv6_enable = 14 [json_name = "reoriginate-mac-ipv6-enable"];
                              string import_as_path_filter = 15 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 16 [json_name = "export-as-path-filter"];
                           }
                           Ipv6Vpn ipv6_vpn = 5 [json_name = "ipv6-vpn"];
                           message State {
                              enum Type {
                                 INVALID_ENUM_VALUE_Type = 0;
                                 Type_EBGP = 1;
                                 Type_IBGP = 2;
                                 Type_CONFEDX_EBGP = 3;
                                 Type_CONFEDX_IBGP = 4;
                              };
                              Type type = 1 [json_name = "type"];
                              uint32 version = 2 [json_name = "version"];
                              string remote_router_id = 3 [json_name = "remote-router-id"];
                              enum CurrentState {
                                 INVALID_ENUM_VALUE_CurrentState = 0;
                                 CurrentState_IDLE = 1;
                                 CurrentState_CONNECT = 2;
                                 CurrentState_ACTIVE = 3;
                                 CurrentState_OPENSENT = 4;
                                 CurrentState_OPENCONFIRM = 5;
                                 CurrentState_ESTABLISHED = 6;
                                 CurrentState_IDLEX_ADMIN = 7;
                                 CurrentState_IDLEX_OVLMT = 8;
                                 CurrentState_NOX_NEG = 9;
                              };
                              CurrentState current_state = 4 [json_name = "current-state"];
                              uint32 local_port = 5 [json_name = "local-port"];
                              uint32 remote_port = 6 [json_name = "remote-port"];
                              string current_event = 7 [json_name = "current-event"];
                              enum LastState {
                                 INVALID_ENUM_VALUE_LastState = 0;
                                 LastState_IDLE = 1;
                                 LastState_CONNECT = 2;
                                 LastState_ACTIVE = 3;
                                 LastState_OPENSENT = 4;
                                 LastState_OPENCONFIRM = 5;
                                 LastState_ESTABLISHED = 6;
                                 LastState_IDLEX_ADMIN = 7;
                                 LastState_IDLEX_OVLMT = 8;
                                 LastState_NOX_NEG = 9;
                              };
                              LastState last_state = 8 [json_name = "last-state"];
                              string up_down_duration = 9 [json_name = "up-down-duration"];
                              uint32 send_message = 10 [json_name = "send-message"];
                              enum RpdCapability {
                                 RpdCapability_NULL = 0;
                                 RpdCapability_RECEIVE = 1;
                                 RpdCapability_SEND = 2;
                                 RpdCapability_BOTH = 3;
                              };
                              RpdCapability rpd_capability = 11 [json_name = "rpd-capability"];
                              enum LocalRpdCapability {
                                 LocalRpdCapability_NULL = 0;
                                 LocalRpdCapability_RECEIVE = 1;
                                 LocalRpdCapability_SEND = 2;
                                 LocalRpdCapability_BOTH = 3;
                              };
                              LocalRpdCapability local_rpd_capability = 12 [json_name = "local-rpd-capability"];
                              enum NegotiateRpdCapability {
                                 NegotiateRpdCapability_NULL = 0;
                                 NegotiateRpdCapability_RECEIVE = 1;
                                 NegotiateRpdCapability_SEND = 2;
                                 NegotiateRpdCapability_BOTH = 3;
                              };
                              NegotiateRpdCapability negotiate_rpd_capability = 13 [json_name = "negotiate-rpd-capability"];
                              uint32 receive_message = 14 [json_name = "receive-message"];
                              uint32 out_queue = 15 [json_name = "out-queue"];
                              uint32 receive_hold_time = 16 [json_name = "receive-hold-time"];
                              string receive_last_keepalive_time = 17 [json_name = "receive-last-keepalive-time"];
                              uint32 negotiate_hold_time = 18 [json_name = "negotiate-hold-time"];
                              uint32 negotiate_keepalive_time = 19 [json_name = "negotiate-keepalive-time"];
                              uint32 receive_update_count = 20 [json_name = "receive-update-count"];
                              uint32 receive_open_count = 21 [json_name = "receive-open-count"];
                              uint32 receive_keepalive_count = 22 [json_name = "receive-keepalive-count"];
                              uint32 receive_notification_count = 23 [json_name = "receive-notification-count"];
                              uint32 receive_route_refresh_count = 24 [json_name = "receive-route-refresh-count"];
                              uint32 send_update_count = 25 [json_name = "send-update-count"];
                              uint32 send_open_count = 26 [json_name = "send-open-count"];
                              uint32 send_keepalive_count = 27 [json_name = "send-keepalive-count"];
                              uint32 send_notification_count = 28 [json_name = "send-notification-count"];
                              uint32 send_route_refresh_count = 29 [json_name = "send-route-refresh-count"];
                              bool send_graceful_restart_capability = 30 [json_name = "send-graceful-restart-capability"];
                              bool receive_refresh_capability = 31 [json_name = "receive-refresh-capability"];
                              bool receive_four_byte_as_capability = 32 [json_name = "receive-four-byte-as-capability"];
                              bool receive_multi_protocol_capability = 33 [json_name = "receive-multi-protocol-capability"];
                              bool receive_graceful_restart_capability = 34 [json_name = "receive-graceful-restart-capability"];
                              string receive_add_path = 35 [json_name = "receive-add-path"];
                              string negotiate_add_path = 36 [json_name = "negotiate-add-path"];
                              string receive_label_add_path = 37 [json_name = "receive-label-add-path"];
                              string negotiate_label_add_path = 38 [json_name = "negotiate-label-add-path"];
                              uint32 receive_prefix = 39 [json_name = "receive-prefix"];
                              uint32 receive_active_prefix = 40 [json_name = "receive-active-prefix"];
                              uint32 advertise_prefix = 41 [json_name = "advertise-prefix"];
                              string discard_attribute = 42 [json_name = "discard-attribute"];
                              enum CheckFirstAs {
                                 INVALID_ENUM_VALUE_CheckFirstAs = 0;
                                 CheckFirstAs_ENABLE = 1;
                                 CheckFirstAs_DISABLE = 2;
                              };
                              CheckFirstAs check_first_as = 43 [json_name = "check-first-as"];
                              bool extend_nexthop_capability = 44 [json_name = "extend-nexthop-capability"];
                              bool egress_engineer_capability = 45 [json_name = "egress-engineer-capability"];
                              bool orf_capability = 46 [json_name = "orf-capability"];
                              bool rely_interface_capability = 47 [json_name = "rely-interface-capability"];
                              string remote_as = 48 [json_name = "remote-as"];
                           }
                           State state = 6 [json_name = "state"];
                           message Ipv4Labeluni {
                              string group_name = 1 [json_name = "group-name"];
                              bool advertise_community = 2 [json_name = "advertise-community"];
                              bool reflect_client = 3 [json_name = "reflect-client"];
                              message ImportPolicyType {
                                 message RtpRef {
                                    string import_policy = 1 [json_name = "import-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              ImportPolicyType import_policy_type = 4 [json_name = "import-policy-type"];
                              message ExportPolicyType {
                                 message RtpRef {
                                    string export_policy = 1 [json_name = "export-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              ExportPolicyType export_policy_type = 5 [json_name = "export-policy-type"];
                              bool advertise_ext_community = 6 [json_name = "advertise-ext-community"];
                              bool discard_ext_community = 7 [json_name = "discard-ext-community"];
                              uint32 allow_as_loop = 8 [json_name = "allow-as-loop"];
                              bool aigp = 9 [json_name = "aigp"];
                              enum AddPathMode {
                                 AddPathMode_NULL = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 10 [json_name = "add-path-mode"];
                              string import_ip_prefix = 11 [json_name = "import-ip-prefix"];
                              string export_ip_prefix = 12 [json_name = "export-ip-prefix"];
                              string import_as_path_filter = 13 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 14 [json_name = "export-as-path-filter"];
                              message RouteLimit {
                                 uint32 number = 1 [json_name = "number"];
                                 bool accept_prefix = 2 [json_name = "accept-prefix"];
                                 uint32 percent = 3 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 4 [json_name = "type"];
                                 uint32 idle_timeout = 5 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 15 [json_name = "route-limit"];
                              message PublicAsOnly {
                                 bool enable = 1 [json_name = "enable"];
                                 message RemovePrivateAs {
                                    message All {
                                       bool force = 1 [json_name = "force"];
                                    }
                                    All all = 1 [json_name = "all"];
                                    message LeftMost {
                                       bool limited = 1 [json_name = "limited"];
                                    }
                                    LeftMost left_most = 2 [json_name = "left-most"];
                                 }
                                 RemovePrivateAs remove_private_as = 2 [json_name = "remove-private-as"];
                                 bool replace = 3 [json_name = "replace"];
                                 bool no_skip_as = 4 [json_name = "no-skip-as"];
                              }
                              PublicAsOnly public_as_only = 16 [json_name = "public-as-only"];
                           }
                           Ipv4Labeluni ipv4_labeluni = 7 [json_name = "ipv4-labeluni"];
                           message Ipv4Multicast {
                              string group_name = 1 [json_name = "group-name"];
                              bool default_route_advertise = 2 [json_name = "default-route-advertise"];
                              message DefaultRouteAdvertisePolicyType {
                                 message RtpRef {
                                    string default_route_advertise_policy = 1 [json_name = "default-route-advertise-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              DefaultRouteAdvertisePolicyType default_route_advertise_policy_type = 3 [json_name = "default-route-advertise-policy-type"];
                              string import_ip_prefix = 4 [json_name = "import-ip-prefix"];
                              string export_ip_prefix = 5 [json_name = "export-ip-prefix"];
                              string import_as_path_filter = 6 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 7 [json_name = "export-as-path-filter"];
                           }
                           Ipv4Multicast ipv4_multicast = 8 [json_name = "ipv4-multicast"];
                           message L2Vpnad {
                              string group_name = 1 [json_name = "group-name"];
                              bool advertise_community = 2 [json_name = "advertise-community"];
                              bool reflect_client = 3 [json_name = "reflect-client"];
                              uint32 allow_as_loop = 4 [json_name = "allow-as-loop"];
                              bool vpls_ad_disable = 5 [json_name = "vpls-ad-disable"];
                              bool vpws_enable = 6 [json_name = "vpws-enable"];
                              bool vpls_enable = 7 [json_name = "vpls-enable"];
                           }
                           L2Vpnad l2vpnad = 9 [json_name = "l2vpnad"];
                           message Ipv4Flow {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              bool reflect_client = 2 [json_name = "reflect-client"];
                              bool validation_disable = 3 [json_name = "validation-disable"];
                              bool redirect_ip = 4 [json_name = "redirect-ip"];
                              bool redirect_ip_vaildation = 5 [json_name = "redirect-ip-vaildation"];
                              bool redirect_ip_rfc_compatible = 6 [json_name = "redirect-ip-rfc-compatible"];
                              bool redirect_ip_draft_compatible = 7 [json_name = "redirect-ip-draft-compatible"];
                           }
                           Ipv4Flow ipv4_flow = 10 [json_name = "ipv4-flow"];
                           message Ipv6Flow {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              bool reflect_client = 2 [json_name = "reflect-client"];
                              bool validation_disable = 3 [json_name = "validation-disable"];
                           }
                           Ipv6Flow ipv6_flow = 11 [json_name = "ipv6-flow"];
                           message Vpntarget {
                              string group_name = 1 [json_name = "group-name"];
                              bool advertise_community = 2 [json_name = "advertise-community"];
                              bool reflect_client = 3 [json_name = "reflect-client"];
                              bool default_route_advertise = 4 [json_name = "default-route-advertise"];
                              string import_as_path_filter = 5 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 6 [json_name = "export-as-path-filter"];
                           }
                           Vpntarget vpntarget = 12 [json_name = "vpntarget"];
                           message Ipv4Srpolicy {
                              bool reflect_client = 1 [json_name = "reflect-client"];
                           }
                           Ipv4Srpolicy ipv4_srpolicy = 13 [json_name = "ipv4-srpolicy"];
                           message L2VpnEvpn {
                              string group_name = 1 [json_name = "group-name"];
                              bool reflect_client = 2 [json_name = "reflect-client"];
                              message ImportPolicyType {
                                 message RtpRef {
                                    string import_policy = 1 [json_name = "import-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              ImportPolicyType import_policy_type = 3 [json_name = "import-policy-type"];
                              message ExportPolicyType {
                                 message RtpRef {
                                    string export_policy = 1 [json_name = "export-policy"];
                                 }
                                 RtpRef rtp_ref = 1 [json_name = "rtp-ref"];
                              }
                              ExportPolicyType export_policy_type = 4 [json_name = "export-policy-type"];
                              bool advertise_irb = 5 [json_name = "advertise-irb"];
                              enum AdvertiseEncapType {
                                 INVALID_ENUM_VALUE_AdvertiseEncapType = 0;
                                 AdvertiseEncapType_VXLAN = 1;
                                 AdvertiseEncapType_MPLS = 2;
                                 AdvertiseEncapType_SRV6 = 4;
                              };
                              AdvertiseEncapType advertise_encap_type = 6 [json_name = "advertise-encap-type"];
                              bool reoriginate_vpnv4_route_enable = 7 [json_name = "reoriginate-vpnv4-route-enable"];
                              bool reoriginate_route_enable = 8 [json_name = "reoriginate-route-enable"];
                           }
                           L2VpnEvpn l2vpn_evpn = 14 [json_name = "l2vpn-evpn"];
                           message Ipv4Mvpn {
                              string group_name = 1 [json_name = "group-name"];
                              bool advertise_community = 2 [json_name = "advertise-community"];
                              bool reflect_client = 3 [json_name = "reflect-client"];
                              string import_as_path_filter = 4 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 5 [json_name = "export-as-path-filter"];
                              bool advertise_c_multicast_route = 6 [json_name = "advertise-c-multicast-route"];
                           }
                           Ipv4Mvpn ipv4_mvpn = 15 [json_name = "ipv4-mvpn"];
                           message Ipv6Mvpn {
                              string group_name = 1 [json_name = "group-name"];
                              bool advertise_community = 2 [json_name = "advertise-community"];
                              bool reflect_client = 3 [json_name = "reflect-client"];
                              string import_as_path_filter = 4 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 5 [json_name = "export-as-path-filter"];
                           }
                           Ipv6Mvpn ipv6_mvpn = 16 [json_name = "ipv6-mvpn"];
                        }
                        repeated Af af = 1 [json_name = "af"];
                     }
                     Afs afs = 8 [json_name = "afs"];
                     string key_chain_name = 9 [json_name = "key-chain-name"];
                     string local_if_address = 10 [json_name = "local-if-address"];
                     uint32 ebgp_max_hop = 11 [json_name = "ebgp-max-hop"];
                     bool tracking_enable = 12 [json_name = "tracking-enable"];
                     uint32 tracking_delay_time = 13 [json_name = "tracking-delay-time"];
                     bool conventional = 14 [json_name = "conventional"];
                     bool route_refresh = 15 [json_name = "route-refresh"];
                     bool four_byte_as = 16 [json_name = "four-byte-as"];
                     bool ignore = 17 [json_name = "ignore"];
                     uint32 valid_ttl_hops = 18 [json_name = "valid-ttl-hops"];
                     enum ConnectMode {
                        INVALID_ENUM_VALUE_ConnectMode = 0;
                        ConnectMode_LISTENX_ONLY = 1;
                        ConnectMode_CONNECTX_ONLY = 2;
                        ConnectMode_NULL = 3;
                     };
                     ConnectMode connect_mode = 19 [json_name = "connect-mode"];
                     bool log_change = 20 [json_name = "log-change"];
                     bool path_mtu_auto_discovery = 21 [json_name = "path-mtu-auto-discovery"];
                     bool local_ifnet_disable = 22 [json_name = "local-ifnet-disable"];
                     enum CheckFirstAs {
                        CheckFirstAs_DEFAULT = 0;
                        CheckFirstAs_ENABLE = 1;
                        CheckFirstAs_DISABLE = 2;
                     };
                     CheckFirstAs check_first_as = 23 [json_name = "check-first-as"];
                     enum EgressEngineer {
                        EgressEngineer_DEFAULT = 0;
                        EgressEngineer_ENABLE = 1;
                     };
                     EgressEngineer egress_engineer = 24 [json_name = "egress-engineer"];
                     uint32 tcp_mss = 25 [json_name = "tcp-mss"];
                     message FakeAsParameter {
                        string fake_as = 1 [json_name = "fake-as"];
                        bool dual_as = 2 [json_name = "dual-as"];
                        bool prepend_global_as = 3 [json_name = "prepend-global-as"];
                        bool prepend_fake_as = 4 [json_name = "prepend-fake-as"];
                     }
                     FakeAsParameter fake_as_parameter = 26 [json_name = "fake-as-parameter"];
                     message Timer {
                        uint32 keep_alive_time = 1 [json_name = "keep-alive-time"];
                        uint32 hold_time = 2 [json_name = "hold-time"];
                        uint32 min_hold_time = 3 [json_name = "min-hold-time"];
                        uint32 connect_retry_time = 4 [json_name = "connect-retry-time"];
                     }
                     Timer timer = 27 [json_name = "timer"];
                     message BfdParameter {
                        bool block = 1 [json_name = "block"];
                        bool enable = 2 [json_name = "enable"];
                        message ModeType {
                           message Single {
                              bool single_hop = 1 [json_name = "single-hop"];
                              bool compatible = 2 [json_name = "compatible"];
                           }
                           Single single = 1 [json_name = "single"];
                           message Link {
                              bool per_link_echo = 1 [json_name = "per-link-echo"];
                           }
                           Link link = 2 [json_name = "link"];
                        }
                        ModeType mode_type = 3 [json_name = "mode-type"];
                        uint32 multiplier = 4 [json_name = "multiplier"];
                        uint32 min_rx_interval = 5 [json_name = "min-rx-interval"];
                        uint32 min_tx_interval = 6 [json_name = "min-tx-interval"];
                     }
                     BfdParameter bfd_parameter = 28 [json_name = "bfd-parameter"];
                  }
                  repeated Peer peer = 1 [json_name = "peer"];
               }
               Peers peers = 4 [json_name = "peers"];
               bool router_id_auto_select = 5 [json_name = "router-id-auto-select"];
               string effect_router_id = 6 [json_name = "effect-router-id"];
               message PeerBfdSessionStates {
                  message PeerBfdSessionState {
                     string address = 1 [json_name = "address"];
                     string local_address = 2 [json_name = "local-address"];
                     string if_name = 3 [json_name = "if-name"];
                     uint32 tx_interval = 4 [json_name = "tx-interval"];
                     uint32 rx_interval = 5 [json_name = "rx-interval"];
                     uint32 multiplier = 6 [json_name = "multiplier"];
                     enum Status {
                        INVALID_ENUM_VALUE_Status = 0;
                        Status_UP = 1;
                        Status_DOWN = 2;
                        Status_UNKNOWN = 3;
                     };
                     Status status = 7 [json_name = "status"];
                     bool global_bfd_enable = 8 [json_name = "global-bfd-enable"];
                  }
                  repeated PeerBfdSessionState peer_bfd_session_state = 1 [json_name = "peer-bfd-session-state"];
               }
               PeerBfdSessionStates peer_bfd_session_states = 7 [json_name = "peer-bfd-session-states"];
            }
            BaseProcess base_process = 1 [json_name = "base-process"];
         }
         Bgp bgp = 7 [json_name = "bgp"];
         message Ipv4Ifs {
            message Ipv4If {
               string name = 1 [json_name = "name"];
               message Address {
                  message ConfigAddress {
                     message Addresses {
                        message Address {
                           string ip = 1 [json_name = "ip"];
                           string netmask = 2 [json_name = "netmask"];
                           enum Type {
                              INVALID_ENUM_VALUE_Type = 0;
                              Type_MAIN = 1;
                              Type_SUB = 32;
                           };
                           Type type = 3 [json_name = "type"];
                        }
                        repeated Address address = 1 [json_name = "address"];
                     }
                     Addresses addresses = 1 [json_name = "addresses"];
                  }
                  ConfigAddress config_address = 1 [json_name = "config-address"];
                  message UnnumberedAddress {
                     message UnnumberedIf {
                        string name = 1 [json_name = "name"];
                     }
                     UnnumberedIf unnumbered_if = 1 [json_name = "unnumbered-if"];
                  }
                  UnnumberedAddress unnumbered_address = 2 [json_name = "unnumbered-address"];
               }
               Address address = 2 [json_name = "address"];
            }
            repeated Ipv4If ipv4_if = 1 [json_name = "ipv4-if"];
         }
         Ipv4Ifs ipv4_ifs = 8 [json_name = "ipv4-ifs"];
         message Ipv4IfStates {
            message Ipv4IfState {
               string name = 1 [json_name = "name"];
               message Addresses {
                  message Address {
                     string ip = 1 [json_name = "ip"];
                     string netmask = 2 [json_name = "netmask"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_MAIN = 1;
                        Type_SUB = 32;
                        Type_UNNUMBER = 33;
                        Type_NEG = 34;
                     };
                     Type type = 3 [json_name = "type"];
                  }
                  repeated Address address = 1 [json_name = "address"];
               }
               Addresses addresses = 2 [json_name = "addresses"];
            }
            repeated Ipv4IfState ipv4_if_state = 1 [json_name = "ipv4-if-state"];
         }
         Ipv4IfStates ipv4_if_states = 9 [json_name = "ipv4-if-states"];
         message Ipv6Ifs {
            message Ipv6If {
               string name = 1 [json_name = "name"];
               bool auto_link_local = 2 [json_name = "auto-link-local"];
               message Addresses {
                  message Address {
                     string ip = 1 [json_name = "ip"];
                     uint32 prefix_length = 2 [json_name = "prefix-length"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_GLOBAL = 1;
                        Type_LINKX_LOCAL = 2;
                        Type_ANYCAST = 6;
                     };
                     Type type = 3 [json_name = "type"];
                     enum AlgorithmType {
                        AlgorithmType_NONE = 0;
                        AlgorithmType_CGA = 1;
                        AlgorithmType_EUI64 = 2;
                     };
                     AlgorithmType algorithm_type = 4 [json_name = "algorithm-type"];
                  }
                  repeated Address address = 1 [json_name = "address"];
               }
               Addresses addresses = 3 [json_name = "addresses"];
               message NdIf {
                  uint64 max_dyn_nb_num = 1 [json_name = "max-dyn-nb-num"];
               }
               NdIf nd_if = 4 [json_name = "nd-if"];
               message NdCollection {
                  message IfProperty {
                     uint32 retrans_timer = 1 [json_name = "retrans-timer"];
                     uint32 nud_reach_time = 2 [json_name = "nud-reach-time"];
                     uint32 attempts_value = 3 [json_name = "attempts-value"];
                     enum NsMcastFlag {
                        NsMcastFlag_FALSE = 0;
                        NsMcastFlag_TRUE = 1;
                     };
                     NsMcastFlag ns_mcast_flag = 4 [json_name = "ns-mcast-flag"];
                     uint64 max_dyn_nb_num = 5 [json_name = "max-dyn-nb-num"];
                     uint32 dad_timeout = 6 [json_name = "dad-timeout"];
                     uint32 nud_attempts = 7 [json_name = "nud-attempts"];
                     enum NaGlean {
                        NaGlean_FALSE = 0;
                        NaGlean_TRUE = 1;
                     };
                     NaGlean na_glean = 8 [json_name = "na-glean"];
                     enum MaFlag {
                        MaFlag_FALSE = 0;
                        MaFlag_TRUE = 1;
                     };
                     MaFlag ma_flag = 9 [json_name = "ma-flag"];
                     enum OFlag {
                        OFlag_FALSE = 0;
                        OFlag_TRUE = 1;
                     };
                     OFlag o_flag = 10 [json_name = "o-flag"];
                     enum RaHaltFlag {
                        RaHaltFlag_FALSE = 0;
                        RaHaltFlag_TRUE = 1;
                     };
                     RaHaltFlag ra_halt_flag = 11 [json_name = "ra-halt-flag"];
                     uint32 max_interval = 12 [json_name = "max-interval"];
                     enum RaPreference {
                        RaPreference_MEDIUM = 0;
                        RaPreference_HIGH = 1;
                        RaPreference_LOW = 3;
                     };
                     RaPreference ra_preference = 13 [json_name = "ra-preference"];
                     enum RaPrefixFlag {
                        RaPrefixFlag_FALSE = 0;
                        RaPrefixFlag_TRUE = 1;
                     };
                     RaPrefixFlag ra_prefix_flag = 14 [json_name = "ra-prefix-flag"];
                     enum RaMtuFlag {
                        RaMtuFlag_FALSE = 0;
                        RaMtuFlag_TRUE = 1;
                     };
                     RaMtuFlag ra_mtu_flag = 15 [json_name = "ra-mtu-flag"];
                     bool strict_flag = 16 [json_name = "strict-flag"];
                     uint32 ts_fuzz_factor = 17 [json_name = "ts-fuzz-factor"];
                     uint32 ts_clock_drift = 18 [json_name = "ts-clock-drift"];
                     uint32 ts_delta = 19 [json_name = "ts-delta"];
                     uint32 rsa_min_key_len = 20 [json_name = "rsa-min-key-len"];
                     uint32 rsa_max_key_len = 21 [json_name = "rsa-max-key-len"];
                  }
                  IfProperty if_property = 1 [json_name = "if-property"];
                  message Proxys {
                     enum RouteProxy {
                        RouteProxy_FALSE = 0;
                        RouteProxy_TRUE = 1;
                     };
                     RouteProxy route_proxy = 1 [json_name = "route-proxy"];
                     enum InnerVlanProxy {
                        InnerVlanProxy_FALSE = 0;
                        InnerVlanProxy_TRUE = 1;
                     };
                     InnerVlanProxy inner_vlan_proxy = 2 [json_name = "inner-vlan-proxy"];
                     enum InterVlanProxy {
                        InterVlanProxy_FALSE = 0;
                        InterVlanProxy_TRUE = 1;
                     };
                     InterVlanProxy inter_vlan_proxy = 3 [json_name = "inter-vlan-proxy"];
                     enum AnywayProxy {
                        AnywayProxy_FALSE = 0;
                        AnywayProxy_TRUE = 1;
                     };
                     AnywayProxy anyway_proxy = 4 [json_name = "anyway-proxy"];
                  }
                  Proxys proxys = 2 [json_name = "proxys"];
               }
               NdCollection nd_collection = 7 [json_name = "nd-collection"];
               uint32 mtu6 = 8 [json_name = "mtu6"];
               bool spread_mtu_flag = 9 [json_name = "spread-mtu-flag"];
            }
            repeated Ipv6If ipv6_if = 1 [json_name = "ipv6-if"];
         }
         Ipv6Ifs ipv6_ifs = 10 [json_name = "ipv6-ifs"];
         message Ipv6IfStates {
            message Ipv6IfState {
               string name = 1 [json_name = "name"];
               message Addresses {
                  message Address {
                     string ip = 1 [json_name = "ip"];
                     uint32 prefix_length = 2 [json_name = "prefix-length"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_GLOBAL = 1;
                        Type_LINKX_LOCAL = 2;
                        Type_AUTOX_LINKX_LOCAL = 3;
                        Type_ANYCAST = 6;
                     };
                     Type type = 3 [json_name = "type"];
                     enum AlgorithmType {
                        AlgorithmType_NONE = 0;
                        AlgorithmType_CGA = 1;
                        AlgorithmType_EUI64 = 2;
                     };
                     AlgorithmType algorithm_type = 4 [json_name = "algorithm-type"];
                     uint32 collision_count = 5 [json_name = "collision-count"];
                     bool is_block = 6 [json_name = "is-block"];
                     enum Status {
                        INVALID_ENUM_VALUE_Status = 0;
                        Status_PREFERRED = 1;
                        Status_INACCESSIBLE = 4;
                        Status_UNKNOWN = 5;
                        Status_TENTATIVE = 6;
                        Status_DUPLICATE = 7;
                     };
                     Status status = 7 [json_name = "status"];
                  }
                  repeated Address address = 1 [json_name = "address"];
               }
               Addresses addresses = 2 [json_name = "addresses"];
            }
            repeated Ipv6IfState ipv6_if_state = 1 [json_name = "ipv6-if-state"];
         }
         Ipv6IfStates ipv6_if_states = 11 [json_name = "ipv6-if-states"];
         message Isis {
            message Sites {
               message Site {
                  uint32 id = 1 [json_name = "id"];
                  enum Level {
                     INVALID_ENUM_VALUE_Level = 0;
                     Level_LEVELX_1 = 1;
                     Level_LEVELX_2 = 2;
                     Level_LEVELX_1X_2 = 3;
                  };
                  Level level = 2 [json_name = "level"];
                  enum CostStyle {
                     INVALID_ENUM_VALUE_CostStyle = 0;
                     CostStyle_NARROW = 1;
                     CostStyle_WIDE = 2;
                     CostStyle_TRANSITION = 3;
                     CostStyle_NTRANSITION = 4;
                     CostStyle_WTRANSITION = 5;
                  };
                  CostStyle cost_style = 3 [json_name = "cost-style"];
                  string is_name = 4 [json_name = "is-name"];
                  message Timer {
                     uint32 lsp_max = 1 [json_name = "lsp-max"];
                     uint32 lsp_refresh = 2 [json_name = "lsp-refresh"];
                     message Spf {
                        uint32 max = 1 [json_name = "max"];
                        uint32 init = 2 [json_name = "init"];
                        uint32 incr = 3 [json_name = "incr"];
                     }
                     Spf spf = 3 [json_name = "spf"];
                     message LspGeneration {
                        uint32 max_level1 = 1 [json_name = "max-level1"];
                        uint32 max_level2 = 2 [json_name = "max-level2"];
                        uint32 init_level1 = 3 [json_name = "init-level1"];
                        uint32 init_level2 = 4 [json_name = "init-level2"];
                        uint32 incr_level1 = 5 [json_name = "incr-level1"];
                        uint32 incr_level2 = 6 [json_name = "incr-level2"];
                     }
                     LspGeneration lsp_generation = 4 [json_name = "lsp-generation"];
                     uint32 purge_lsp_delay = 5 [json_name = "purge-lsp-delay"];
                  }
                  Timer timer = 5 [json_name = "timer"];
                  message LspLength {
                     uint32 originate_level1 = 1 [json_name = "originate-level1"];
                     uint32 originate_level2 = 2 [json_name = "originate-level2"];
                     uint32 receive = 3 [json_name = "receive"];
                  }
                  LspLength lsp_length = 6 [json_name = "lsp-length"];
                  message FlashFlood {
                     bool enable_level1 = 1 [json_name = "enable-level1"];
                     bool enable_level2 = 2 [json_name = "enable-level2"];
                     uint32 lsp_num_level1 = 3 [json_name = "lsp-num-level1"];
                     uint32 lsp_num_level2 = 4 [json_name = "lsp-num-level2"];
                     uint32 max_timer_level1 = 5 [json_name = "max-timer-level1"];
                     uint32 max_timer_level2 = 6 [json_name = "max-timer-level2"];
                  }
                  FlashFlood flash_flood = 7 [json_name = "flash-flood"];
                  message SetOverload {
                     enum Type {
                        Type_NOX_SET = 0;
                        Type_ONX_STARTUP = 1;
                        Type_MAUNAL = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     enum WaitType {
                        INVALID_ENUM_VALUE_WaitType = 0;
                        WaitType_WAITX_FORX_BGP = 1;
                        WaitType_STARTX_FROMX_NBR = 2;
                        WaitType_NOX_WAIT = 3;
                     };
                     WaitType wait_type = 2 [json_name = "wait-type"];
                     string nbr_system_id = 3 [json_name = "nbr-system-id"];
                     uint32 timeout1 = 4 [json_name = "timeout1"];
                     uint32 timeout2 = 5 [json_name = "timeout2"];
                     bool inter_level = 6 [json_name = "inter-level"];
                     bool external = 7 [json_name = "external"];
                     bool send_sa_bit = 8 [json_name = "send-sa-bit"];
                     uint32 sa_bit_time = 9 [json_name = "sa-bit-time"];
                     uint32 rt_delay_time = 10 [json_name = "rt-delay-time"];
                  }
                  SetOverload set_overload = 8 [json_name = "set-overload"];
                  message NetEntitys {
                     message NetEntity {
                        string value = 1 [json_name = "value"];
                     }
                     repeated NetEntity net_entity = 1 [json_name = "net-entity"];
                  }
                  NetEntitys net_entitys = 9 [json_name = "net-entitys"];
                  message LspAuths {
                     message LspAuth {
                        enum CmdType {
                           INVALID_ENUM_VALUE_CmdType = 0;
                           CmdType_AREA = 1;
                           CmdType_DOMAIN = 2;
                        };
                        CmdType cmd_type = 1 [json_name = "cmd-type"];
                        enum PwType {
                           INVALID_ENUM_VALUE_PwType = 0;
                           PwType_SIMPLE = 1;
                           PwType_MD5 = 2;
                           PwType_KEYCHAIN = 3;
                           PwType_HMACX_SHA256 = 4;
                        };
                        PwType pw_type = 2 [json_name = "pw-type"];
                        string simple = 3 [json_name = "simple"];
                        string md5 = 4 [json_name = "md5"];
                        string key_chain = 5 [json_name = "key-chain"];
                        enum Service {
                           INVALID_ENUM_VALUE_Service = 0;
                           Service_IP = 1;
                           Service_OSI = 2;
                        };
                        Service service = 6 [json_name = "service"];
                        enum Usage {
                           Usage_USAGEX_DEFAULT = 0;
                           Usage_AUTHENTICATIONX_AVOID = 1;
                           Usage_SENDX_ONLY = 2;
                           Usage_ALLX_SENDX_ONLY = 3;
                        };
                        Usage usage = 7 [json_name = "usage"];
                        uint32 key_id = 8 [json_name = "key-id"];
                     }
                     repeated LspAuth lsp_auth = 1 [json_name = "lsp-auth"];
                  }
                  LspAuths lsp_auths = 10 [json_name = "lsp-auths"];
                  message Circuits {
                     message Circuit {
                        string name = 1 [json_name = "name"];
                        enum Level {
                           INVALID_ENUM_VALUE_Level = 0;
                           Level_LEVELX_1 = 1;
                           Level_LEVELX_2 = 2;
                           Level_LEVELX_1X_2 = 3;
                        };
                        Level level = 2 [json_name = "level"];
                        bool p2p_enable = 3 [json_name = "p2p-enable"];
                        uint32 peer_hold_max = 4 [json_name = "peer-hold-max"];
                        bool silent_enable = 5 [json_name = "silent-enable"];
                        message HelloAuths {
                           message HelloAuth {
                              enum Level {
                                 INVALID_ENUM_VALUE_Level = 0;
                                 Level_LEVELX_1 = 1;
                                 Level_LEVELX_2 = 2;
                              };
                              Level level = 1 [json_name = "level"];
                              enum PwType {
                                 INVALID_ENUM_VALUE_PwType = 0;
                                 PwType_SIMPLE = 1;
                                 PwType_MD5 = 2;
                                 PwType_KEYCHAIN = 3;
                                 PwType_HMACX_SHA256 = 4;
                              };
                              PwType pw_type = 2 [json_name = "pw-type"];
                              string simple = 3 [json_name = "simple"];
                              string key_chain = 4 [json_name = "key-chain"];
                              string md5 = 5 [json_name = "md5"];
                              enum Service {
                                 INVALID_ENUM_VALUE_Service = 0;
                                 Service_IP = 1;
                                 Service_OSI = 2;
                              };
                              Service service = 6 [json_name = "service"];
                              bool send_only = 7 [json_name = "send-only"];
                              uint32 key_id = 8 [json_name = "key-id"];
                           }
                           repeated HelloAuth hello_auth = 1 [json_name = "hello-auth"];
                        }
                        HelloAuths hello_auths = 6 [json_name = "hello-auths"];
                        message Afs {
                           message Af {
                              enum Type {
                                 INVALID_ENUM_VALUE_Type = 0;
                                 Type_AFIPV4 = 1;
                                 Type_AFIPV6 = 2;
                              };
                              Type type = 1 [json_name = "type"];
                              uint32 cost_level1 = 2 [json_name = "cost-level1"];
                              uint32 cost_level2 = 3 [json_name = "cost-level2"];
                              enum SuppressReach {
                                 SuppressReach_NOX_SET = 0;
                                 SuppressReach_LEVELX_1 = 1;
                                 SuppressReach_LEVELX_2 = 2;
                                 SuppressReach_LEVELX_1X_2 = 3;
                              };
                              SuppressReach suppress_reach = 4 [json_name = "suppress-reach"];
                              message Bfd {
                                 bool enable = 1 [json_name = "enable"];
                                 uint32 min_rx = 2 [json_name = "min-rx"];
                                 uint32 min_tx = 3 [json_name = "min-tx"];
                                 message Type {
                                    message Enable {
                                       bool enable = 1 [json_name = "enable"];
                                    }
                                    Enable enable = 1 [json_name = "enable"];
                                    message Static {
                                       bool static = 1 [json_name = "static"];
                                    }
                                    Static static = 2 [json_name = "static"];
                                    message Block {
                                       bool block = 1 [json_name = "block"];
                                    }
                                    Block block = 3 [json_name = "block"];
                                 }
                                 Type type = 4 [json_name = "type"];
                                 uint32 detect_multiplier = 5 [json_name = "detect-multiplier"];
                                 bool frr_binding = 6 [json_name = "frr-binding"];
                              }
                              Bfd bfd = 5 [json_name = "bfd"];
                              message LdpSync {
                                 enum Enable {
                                    Enable_NONE = 0;
                                    Enable_ENABLE = 1;
                                    Enable_BLOCK = 2;
                                 };
                                 Enable enable = 1 [json_name = "enable"];
                                 uint32 hold_down_timer = 2 [json_name = "hold-down-timer"];
                                 message HoldCostMax {
                                    message Timer {
                                       uint32 timer = 1 [json_name = "timer"];
                                    }
                                    Timer timer = 1 [json_name = "timer"];
                                    message Infinite {
                                       bool infinite = 1 [json_name = "infinite"];
                                    }
                                    Infinite infinite = 2 [json_name = "infinite"];
                                 }
                                 HoldCostMax hold_cost_max = 3 [json_name = "hold-cost-max"];
                              }
                              LdpSync ldp_sync = 6 [json_name = "ldp-sync"];
                              message Topologys {
                                 message Topology {
                                    uint32 mt_id = 1 [json_name = "mt-id"];
                                    uint32 incr_cost = 2 [json_name = "incr-cost"];
                                 }
                                 repeated Topology topology = 1 [json_name = "topology"];
                              }
                              Topologys topologys = 7 [json_name = "topologys"];
                              uint32 tag_level1 = 8 [json_name = "tag-level1"];
                              uint32 tag_level2 = 9 [json_name = "tag-level2"];
                              uint32 incr_cost = 10 [json_name = "incr-cost"];
                              enum BfdBitError {
                                 BfdBitError_NOX_SET = 0;
                                 BfdBitError_ENABLE = 1;
                                 BfdBitError_BLOCK = 2;
                              };
                              BfdBitError bfd_bit_error = 11 [json_name = "bfd-bit-error"];
                              message MplsLdp {
                                 bool auto_flag_block = 1 [json_name = "auto-flag-block"];
                              }
                              MplsLdp mpls_ldp = 12 [json_name = "mpls-ldp"];
                              message Frr {
                                 bool lfa_block_level1 = 1 [json_name = "lfa-block-level1"];
                                 bool lfa_block_level2 = 2 [json_name = "lfa-block-level2"];
                                 bool rlfa_disable_level1 = 3 [json_name = "rlfa-disable-level1"];
                                 bool rlfa_disable_level2 = 4 [json_name = "rlfa-disable-level2"];
                                 bool tilfa_disable_level1 = 5 [json_name = "tilfa-disable-level1"];
                                 bool tilfa_disable_level2 = 6 [json_name = "tilfa-disable-level2"];
                              }
                              Frr frr = 13 [json_name = "frr"];
                              message PrefixSids {
                                 message PrefixSid {
                                    uint32 algorithm = 1 [json_name = "algorithm"];
                                    enum Type {
                                       INVALID_ENUM_VALUE_Type = 0;
                                       Type_ABSOLUTE = 1;
                                       Type_INDEX = 2;
                                    };
                                    Type type = 2 [json_name = "type"];
                                    uint32 label = 3 [json_name = "label"];
                                    bool node_flag = 4 [json_name = "node-flag"];
                                 }
                                 repeated PrefixSid prefix_sid = 1 [json_name = "prefix-sid"];
                              }
                              PrefixSids prefix_sids = 14 [json_name = "prefix-sids"];
                           }
                           repeated Af af = 1 [json_name = "af"];
                        }
                        Afs afs = 7 [json_name = "afs"];
                        enum HelloMode {
                           HelloMode_NORMAL = 0;
                           HelloMode_PADDING = 1;
                           HelloMode_SMALL = 2;
                        };
                        HelloMode hello_mode = 8 [json_name = "hello-mode"];
                        bool purge_source_trace_block = 9 [json_name = "purge-source-trace-block"];
                        bool silent_cost = 10 [json_name = "silent-cost"];
                        string dis_name = 11 [json_name = "dis-name"];
                        message Srlgs {
                           message Srlg {
                              uint32 group_id = 1 [json_name = "group-id"];
                           }
                           repeated Srlg srlg = 1 [json_name = "srlg"];
                        }
                        Srlgs srlgs = 12 [json_name = "srlgs"];
                        message MeshGroup {
                           enum State {
                              INVALID_ENUM_VALUE_State = 0;
                              State_INACTIVE = 1;
                              State_BLOCKED = 2;
                              State_SET = 3;
                           };
                           State state = 1 [json_name = "state"];
                           uint32 number = 2 [json_name = "number"];
                        }
                        MeshGroup mesh_group = 13 [json_name = "mesh-group"];
                        message SuppressFlapping {
                           message Peer {
                              bool enable = 1 [json_name = "enable"];
                              uint32 detect_interval = 2 [json_name = "detect-interval"];
                              uint32 threshold = 3 [json_name = "threshold"];
                              uint32 resume_interval = 4 [json_name = "resume-interval"];
                              uint32 hold_down = 5 [json_name = "hold-down"];
                              bool hold_max_cost = 6 [json_name = "hold-max-cost"];
                           }
                           Peer peer = 1 [json_name = "peer"];
                        }
                        SuppressFlapping suppress_flapping = 14 [json_name = "suppress-flapping"];
                        message Timer {
                           uint32 csnp_interval_level1 = 1 [json_name = "csnp-interval-level1"];
                           uint32 csnp_interval_level2 = 2 [json_name = "csnp-interval-level2"];
                           uint32 throttle_interval = 3 [json_name = "throttle-interval"];
                           uint32 throttle_count = 4 [json_name = "throttle-count"];
                        }
                        Timer timer = 15 [json_name = "timer"];
                        message Broadcast {
                           uint32 dis_priority_level1 = 1 [json_name = "dis-priority-level1"];
                           uint32 dis_priority_level2 = 2 [json_name = "dis-priority-level2"];
                           uint32 hello_timer_level1 = 3 [json_name = "hello-timer-level1"];
                           uint32 hello_timer_level2 = 4 [json_name = "hello-timer-level2"];
                           uint32 hold_multiplier_level1 = 5 [json_name = "hold-multiplier-level1"];
                           uint32 hold_multiplier_level2 = 6 [json_name = "hold-multiplier-level2"];
                           bool conser_level1 = 7 [json_name = "conser-level1"];
                           bool conser_level2 = 8 [json_name = "conser-level2"];
                        }
                        Broadcast broadcast = 16 [json_name = "broadcast"];
                        message P2P {
                           bool snpa_check = 1 [json_name = "snpa-check"];
                           bool peer_ip_ignore = 2 [json_name = "peer-ip-ignore"];
                           enum PppNegotiation {
                              INVALID_ENUM_VALUE_PppNegotiation = 0;
                              PppNegotiation_X_2X_WAY = 1;
                              PppNegotiation_X_3X_WAY = 2;
                              PppNegotiation_X_3X_WAYONLY = 3;
                           };
                           PppNegotiation ppp_negotiation = 3 [json_name = "ppp-negotiation"];
                           uint32 hello_timer = 4 [json_name = "hello-timer"];
                           uint32 hold_multiplier = 5 [json_name = "hold-multiplier"];
                           uint32 lsp_retransmit_interval = 6 [json_name = "lsp-retransmit-interval"];
                           bool ppp_osicp_check = 7 [json_name = "ppp-osicp-check"];
                           bool conser = 8 [json_name = "conser"];
                        }
                        P2P p2p = 17 [json_name = "p2p"];
                        message DispData {
                           uint32 index = 1 [json_name = "index"];
                           uint32 mtu = 2 [json_name = "mtu"];
                           bool dis_level1 = 3 [json_name = "dis-level1"];
                           bool dis_level2 = 4 [json_name = "dis-level2"];
                           string v4_status = 5 [json_name = "v4-status"];
                           bool mtu_state = 6 [json_name = "mtu-state"];
                           bool link_state = 7 [json_name = "link-state"];
                           bool ip_state = 8 [json_name = "ip-state"];
                           string v6_status = 9 [json_name = "v6-status"];
                           bool mtu_v6_state = 10 [json_name = "mtu-v6-state"];
                           bool link_v6_state = 11 [json_name = "link-v6-state"];
                           bool ip_v6_state = 12 [json_name = "ip-v6-state"];
                           bool vc_state = 13 [json_name = "vc-state"];
                           enum PeerFlapStatus {
                              PeerFlapStatus_NO = 0;
                              PeerFlapStatus_YES = 1;
                              PeerFlapStatus_HOLDMAXCOST = 2;
                              PeerFlapStatus_HOLDDOWN = 3;
                           };
                           PeerFlapStatus peer_flap_status = 14 [json_name = "peer-flap-status"];
                           uint32 peer_flap_count = 15 [json_name = "peer-flap-count"];
                           uint32 peer_flap_threshold = 16 [json_name = "peer-flap-threshold"];
                           string peer_flap_timer = 17 [json_name = "peer-flap-timer"];
                           uint32 peer_flap_remain_timer = 18 [json_name = "peer-flap-remain-timer"];
                        }
                        DispData disp_data = 18 [json_name = "disp-data"];
                     }
                     repeated Circuit circuit = 1 [json_name = "circuit"];
                  }
                  Circuits circuits = 11 [json_name = "circuits"];
                  message Afs {
                     message Af {
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_AFIPV4 = 1;
                           Type_AFIPV6 = 2;
                        };
                        Type type = 1 [json_name = "type"];
                        enum Ipv6BaseTopo {
                           Ipv6BaseTopo_STANDARD = 0;
                           Ipv6BaseTopo_COMPATIBLE = 1;
                           Ipv6BaseTopo_IPV6 = 2;
                           Ipv6BaseTopo_CMPTX_IPV6SPF = 3;
                        };
                        Ipv6BaseTopo ipv6_base_topo = 2 [json_name = "ipv6-base-topo"];
                        message TrafficEng {
                           bool enable_level1 = 1 [json_name = "enable-level1"];
                           bool enable_level2 = 2 [json_name = "enable-level2"];
                        }
                        TrafficEng traffic_eng = 3 [json_name = "traffic-eng"];
                        message Bfd {
                           bool enable = 1 [json_name = "enable"];
                           uint32 min_rx = 2 [json_name = "min-rx"];
                           uint32 min_tx = 3 [json_name = "min-tx"];
                           bool frr_binding = 4 [json_name = "frr-binding"];
                           uint32 detect_multiplier = 5 [json_name = "detect-multiplier"];
                        }
                        Bfd bfd = 4 [json_name = "bfd"];
                        message LdpSync {
                           bool enable = 1 [json_name = "enable"];
                           bool mpls_binding = 2 [json_name = "mpls-binding"];
                           uint32 hold_down_timer = 3 [json_name = "hold-down-timer"];
                           message HoldCostMax {
                              message Timer {
                                 uint32 timer = 1 [json_name = "timer"];
                              }
                              Timer timer = 1 [json_name = "timer"];
                              message Infinite {
                                 bool infinite = 1 [json_name = "infinite"];
                              }
                              Infinite infinite = 2 [json_name = "infinite"];
                           }
                           HoldCostMax hold_cost_max = 4 [json_name = "hold-cost-max"];
                        }
                        LdpSync ldp_sync = 5 [json_name = "ldp-sync"];
                        message PrefixPrioritys {
                           message PrefixPriority {
                              enum Level {
                                 INVALID_ENUM_VALUE_Level = 0;
                                 Level_LEVELX_1 = 1;
                                 Level_LEVELX_2 = 2;
                                 Level_LEVELX_1X_2 = 3;
                              };
                              Level level = 1 [json_name = "level"];
                              enum Priority {
                                 INVALID_ENUM_VALUE_Priority = 0;
                                 Priority_MEDIUM = 1;
                                 Priority_HIGH = 2;
                                 Priority_CRITICAL = 3;
                              };
                              Priority priority = 2 [json_name = "priority"];
                              message PolicyFlag {
                                 message Tag {
                                    uint32 tag = 1 [json_name = "tag"];
                                 }
                                 Tag tag = 1 [json_name = "tag"];
                                 message IpPrefix {
                                    string ip_prefix = 1 [json_name = "ip-prefix"];
                                 }
                                 IpPrefix ip_prefix = 2 [json_name = "ip-prefix"];
                                 message Ipv6Prefix {
                                    string ipv6_prefix = 1 [json_name = "ipv6-prefix"];
                                 }
                                 Ipv6Prefix ipv6_prefix = 3 [json_name = "ipv6-prefix"];
                              }
                              PolicyFlag policy_flag = 3 [json_name = "policy-flag"];
                           }
                           repeated PrefixPriority prefix_priority = 1 [json_name = "prefix-priority"];
                        }
                        PrefixPrioritys prefix_prioritys = 6 [json_name = "prefix-prioritys"];
                        message Frr {
                           bool enable = 1 [json_name = "enable"];
                           bool lfa_level1 = 2 [json_name = "lfa-level1"];
                           bool lfa_level2 = 3 [json_name = "lfa-level2"];
                           message RemoteLfa {
                              bool rlfa_level1 = 1 [json_name = "rlfa-level1"];
                              bool rlfa_level2 = 2 [json_name = "rlfa-level2"];
                           }
                           RemoteLfa remote_lfa = 4 [json_name = "remote-lfa"];
                           bool ecmp_level1 = 5 [json_name = "ecmp-level1"];
                           bool ecmp_level2 = 6 [json_name = "ecmp-level2"];
                           message Tilfa {
                              bool enable_level1 = 1 [json_name = "enable-level1"];
                              bool enable_level2 = 2 [json_name = "enable-level2"];
                           }
                           Tilfa tilfa = 7 [json_name = "tilfa"];
                        }
                        Frr frr = 7 [json_name = "frr"];
                        message Topologys {
                           message Topology {
                              uint32 mt_id = 1 [json_name = "mt-id"];
                              string topo_name = 2 [json_name = "topo-name"];
                              message Ipv4Routes {
                                 message Ipv4Route {
                                    enum Level {
                                       INVALID_ENUM_VALUE_Level = 0;
                                       Level_LEVELX_1 = 1;
                                       Level_LEVELX_2 = 2;
                                       Level_LEVELX_1X_2 = 3;
                                    };
                                    Level level = 1 [json_name = "level"];
                                    string address = 2 [json_name = "address"];
                                    uint32 mask = 3 [json_name = "mask"];
                                    string next_hop = 4 [json_name = "next-hop"];
                                    uint32 internal_cost = 5 [json_name = "internal-cost"];
                                    string external_cost = 6 [json_name = "external-cost"];
                                    string interface_name = 7 [json_name = "interface-name"];
                                    string flags = 8 [json_name = "flags"];
                                    string priority = 9 [json_name = "priority"];
                                    string tag = 10 [json_name = "tag"];
                                 }
                                 repeated Ipv4Route ipv4_route = 1 [json_name = "ipv4-route"];
                              }
                              Ipv4Routes ipv4_routes = 3 [json_name = "ipv4-routes"];
                              message Ipv6Routes {
                                 message Ipv6Route {
                                    enum Level {
                                       INVALID_ENUM_VALUE_Level = 0;
                                       Level_LEVELX_1 = 1;
                                       Level_LEVELX_2 = 2;
                                       Level_LEVELX_1X_2 = 3;
                                    };
                                    Level level = 1 [json_name = "level"];
                                    string address = 2 [json_name = "address"];
                                    uint32 mask = 3 [json_name = "mask"];
                                    string next_hop = 4 [json_name = "next-hop"];
                                    string interface_name = 5 [json_name = "interface-name"];
                                    uint32 cost = 6 [json_name = "cost"];
                                    string flags = 7 [json_name = "flags"];
                                    string priority = 8 [json_name = "priority"];
                                    string tag = 9 [json_name = "tag"];
                                 }
                                 repeated Ipv6Route ipv6_route = 1 [json_name = "ipv6-route"];
                              }
                              Ipv6Routes ipv6_routes = 4 [json_name = "ipv6-routes"];
                              uint32 max_load_balancing = 5 [json_name = "max-load-balancing"];
                              bool auto_cost = 6 [json_name = "auto-cost"];
                              uint32 bandwidth = 7 [json_name = "bandwidth"];
                              message AttachBit {
                                 enum AdvControl {
                                    AdvControl_NOX_TYPE = 0;
                                    AdvControl_ALWAYS = 1;
                                    AdvControl_NEVER = 2;
                                 };
                                 AdvControl adv_control = 1 [json_name = "adv-control"];
                                 bool avoid_learn = 2 [json_name = "avoid-learn"];
                              }
                              AttachBit attach_bit = 8 [json_name = "attach-bit"];
                              message Preference {
                                 uint32 value = 1 [json_name = "value"];
                              }
                              Preference preference = 9 [json_name = "preference"];
                              message ImportRoutes {
                                 message ImportRoute {
                                    enum Protocol {
                                       INVALID_ENUM_VALUE_Protocol = 0;
                                       Protocol_DIRECT = 1;
                                       Protocol_OSPF = 2;
                                       Protocol_ISIS = 3;
                                       Protocol_STATIC = 4;
                                       Protocol_RIP = 5;
                                       Protocol_BGP = 6;
                                       Protocol_OSPFV3 = 7;
                                       Protocol_RIPNG = 8;
                                       Protocol_UNR = 11;
                                    };
                                    Protocol protocol = 1 [json_name = "protocol"];
                                    uint32 process_id = 2 [json_name = "process-id"];
                                    uint32 cost = 3 [json_name = "cost"];
                                    uint32 tag = 4 [json_name = "tag"];
                                    message PolicyType {
                                       message RoutePolicyName {
                                          string route_policy_name = 1 [json_name = "route-policy-name"];
                                       }
                                       RoutePolicyName route_policy_name = 1 [json_name = "route-policy-name"];
                                    }
                                    PolicyType policy_type = 5 [json_name = "policy-type"];
                                    enum LevelType {
                                       INVALID_ENUM_VALUE_LevelType = 0;
                                       LevelType_LEVELX_1 = 1;
                                       LevelType_LEVELX_2 = 2;
                                       LevelType_LEVELX_1X_2 = 3;
                                    };
                                    LevelType level_type = 6 [json_name = "level-type"];
                                    bool inherit_cost = 7 [json_name = "inherit-cost"];
                                 }
                                 repeated ImportRoute import_route = 1 [json_name = "import-route"];
                              }
                              ImportRoutes import_routes = 10 [json_name = "import-routes"];
                              message LeakRouteLevel2ToLevel1 {
                                 uint32 tag = 1 [json_name = "tag"];
                                 message PolicyType {
                                    message RoutePolicyName {
                                       string route_policy_name = 1 [json_name = "route-policy-name"];
                                    }
                                    RoutePolicyName route_policy_name = 1 [json_name = "route-policy-name"];
                                 }
                                 PolicyType policy_type = 2 [json_name = "policy-type"];
                                 bool allow_filter = 3 [json_name = "allow-filter"];
                                 bool allow_updown = 4 [json_name = "allow-updown"];
                              }
                              LeakRouteLevel2ToLevel1 leak_route_level2_to_level1 = 11 [json_name = "leak-route-level2-to-level1"];
                              message LeakRouteLevel1ToLevel2 {
                                 bool enable = 1 [json_name = "enable"];
                                 uint32 tag = 2 [json_name = "tag"];
                                 bool allow_filter = 3 [json_name = "allow-filter"];
                              }
                              LeakRouteLevel1ToLevel2 leak_route_level1_to_level2 = 12 [json_name = "leak-route-level1-to-level2"];
                              message Ipv4ImportRoutes {
                                 message Ipv4ImportRoute {
                                    enum Level {
                                       INVALID_ENUM_VALUE_Level = 0;
                                       Level_LEVELX_1 = 1;
                                       Level_LEVELX_2 = 2;
                                       Level_LEVELX_1X_2 = 3;
                                    };
                                    Level level = 1 [json_name = "level"];
                                    string protocol = 2 [json_name = "protocol"];
                                    string address = 3 [json_name = "address"];
                                    uint32 mask = 4 [json_name = "mask"];
                                    uint32 internal_cost = 5 [json_name = "internal-cost"];
                                    string external_cost = 6 [json_name = "external-cost"];
                                    string tag = 7 [json_name = "tag"];
                                 }
                                 repeated Ipv4ImportRoute ipv4_import_route = 1 [json_name = "ipv4-import-route"];
                              }
                              Ipv4ImportRoutes ipv4_import_routes = 13 [json_name = "ipv4-import-routes"];
                              message RouteStatisticss {
                                 message RouteStatistics {
                                    enum Level {
                                       INVALID_ENUM_VALUE_Level = 0;
                                       Level_LEVELX_1 = 1;
                                       Level_LEVELX_2 = 2;
                                       Level_LEVELX_1X_2 = 3;
                                    };
                                    Level level = 1 [json_name = "level"];
                                    uint32 v4_learnt_num = 2 [json_name = "v4-learnt-num"];
                                    uint32 v6_learnt_num = 3 [json_name = "v6-learnt-num"];
                                    uint32 v4_critical_num = 4 [json_name = "v4-critical-num"];
                                    uint32 v4_high_num = 5 [json_name = "v4-high-num"];
                                    uint32 v4_medium_num = 6 [json_name = "v4-medium-num"];
                                    uint32 v4_low_num = 7 [json_name = "v4-low-num"];
                                    uint32 v6_critical_num = 8 [json_name = "v6-critical-num"];
                                    uint32 v6_high_num = 9 [json_name = "v6-high-num"];
                                    uint32 v6_medium_num = 10 [json_name = "v6-medium-num"];
                                    uint32 v6_low_num = 11 [json_name = "v6-low-num"];
                                    uint32 v4_forward_num = 12 [json_name = "v4-forward-num"];
                                    uint32 v6_forward_num = 13 [json_name = "v6-forward-num"];
                                    uint32 v4_added2rm = 14 [json_name = "v4-added2rm"];
                                    uint32 v4_unadded2rm = 15 [json_name = "v4-unadded2rm"];
                                    uint32 v6_added2rm = 16 [json_name = "v6-added2rm"];
                                    uint32 v6_unadded2rm = 17 [json_name = "v6-unadded2rm"];
                                 }
                                 repeated RouteStatistics route_statistics = 1 [json_name = "route-statistics"];
                              }
                              RouteStatisticss route_statisticss = 14 [json_name = "route-statisticss"];
                           }
                           repeated Topology topology = 1 [json_name = "topology"];
                        }
                        Topologys topologys = 8 [json_name = "topologys"];
                        message Ipv4Routes {
                           message Ipv4Route {
                              enum Level {
                                 INVALID_ENUM_VALUE_Level = 0;
                                 Level_LEVELX_1 = 1;
                                 Level_LEVELX_2 = 2;
                                 Level_LEVELX_1X_2 = 3;
                              };
                              Level level = 1 [json_name = "level"];
                              string address = 2 [json_name = "address"];
                              uint32 mask = 3 [json_name = "mask"];
                              string next_hop = 4 [json_name = "next-hop"];
                              uint32 internal_cost = 5 [json_name = "internal-cost"];
                              string external_cost = 6 [json_name = "external-cost"];
                              string interface_name = 7 [json_name = "interface-name"];
                              string flags = 8 [json_name = "flags"];
                              string priority = 9 [json_name = "priority"];
                              string tag = 10 [json_name = "tag"];
                           }
                           repeated Ipv4Route ipv4_route = 1 [json_name = "ipv4-route"];
                        }
                        Ipv4Routes ipv4_routes = 9 [json_name = "ipv4-routes"];
                        message Ipv6Routes {
                           message Ipv6Route {
                              enum Level {
                                 INVALID_ENUM_VALUE_Level = 0;
                                 Level_LEVELX_1 = 1;
                                 Level_LEVELX_2 = 2;
                                 Level_LEVELX_1X_2 = 3;
                              };
                              Level level = 1 [json_name = "level"];
                              string address = 2 [json_name = "address"];
                              uint32 mask = 3 [json_name = "mask"];
                              string next_hop = 4 [json_name = "next-hop"];
                              string interface_name = 5 [json_name = "interface-name"];
                              uint32 cost = 6 [json_name = "cost"];
                              string flags = 7 [json_name = "flags"];
                              string priority = 8 [json_name = "priority"];
                              string tag = 9 [json_name = "tag"];
                           }
                           repeated Ipv6Route ipv6_route = 1 [json_name = "ipv6-route"];
                        }
                        Ipv6Routes ipv6_routes = 10 [json_name = "ipv6-routes"];
                        bool apply_qppb = 11 [json_name = "apply-qppb"];
                        uint32 max_load_balancing = 12 [json_name = "max-load-balancing"];
                        bool auto_cost = 13 [json_name = "auto-cost"];
                        uint32 bandwidth = 14 [json_name = "bandwidth"];
                        uint32 cost_level1 = 15 [json_name = "cost-level1"];
                        uint32 cost_level2 = 16 [json_name = "cost-level2"];
                        bool bfd_bit_error = 17 [json_name = "bfd-bit-error"];
                        message AttachBit {
                           enum AdvControl {
                              AdvControl_NOX_TYPE = 0;
                              AdvControl_ALWAYS = 1;
                              AdvControl_NEVER = 2;
                           };
                           AdvControl adv_control = 1 [json_name = "adv-control"];
                           bool avoid_learn = 2 [json_name = "avoid-learn"];
                        }
                        AttachBit attach_bit = 18 [json_name = "attach-bit"];
                        message Preference {
                           uint32 value = 1 [json_name = "value"];
                        }
                        Preference preference = 19 [json_name = "preference"];
                        message ImportRoutes {
                           message ImportRoute {
                              enum Protocol {
                                 INVALID_ENUM_VALUE_Protocol = 0;
                                 Protocol_DIRECT = 1;
                                 Protocol_OSPF = 2;
                                 Protocol_ISIS = 3;
                                 Protocol_STATIC = 4;
                                 Protocol_RIP = 5;
                                 Protocol_BGP = 6;
                                 Protocol_OSPFV3 = 7;
                                 Protocol_RIPNG = 8;
                                 Protocol_UNR = 11;
                              };
                              Protocol protocol = 1 [json_name = "protocol"];
                              uint32 process_id = 2 [json_name = "process-id"];
                              enum CostType {
                                 INVALID_ENUM_VALUE_CostType = 0;
                                 CostType_EXTERNAL = 1;
                                 CostType_INTERNAL = 2;
                              };
                              CostType cost_type = 3 [json_name = "cost-type"];
                              uint32 cost = 4 [json_name = "cost"];
                              uint32 tag = 5 [json_name = "tag"];
                              message PolicyType {
                                 message RoutePolicyName {
                                    string route_policy_name = 1 [json_name = "route-policy-name"];
                                 }
                                 RoutePolicyName route_policy_name = 1 [json_name = "route-policy-name"];
                              }
                              PolicyType policy_type = 6 [json_name = "policy-type"];
                              enum LevelType {
                                 INVALID_ENUM_VALUE_LevelType = 0;
                                 LevelType_LEVELX_1 = 1;
                                 LevelType_LEVELX_2 = 2;
                                 LevelType_LEVELX_1X_2 = 3;
                              };
                              LevelType level_type = 7 [json_name = "level-type"];
                              bool inherit_cost = 8 [json_name = "inherit-cost"];
                              bool permit_ibgp = 9 [json_name = "permit-ibgp"];
                              bool nosidflag = 10 [json_name = "nosidflag"];
                           }
                           repeated ImportRoute import_route = 1 [json_name = "import-route"];
                        }
                        ImportRoutes import_routes = 20 [json_name = "import-routes"];
                        message LeakRouteLevel2ToLevel1 {
                           uint32 tag = 1 [json_name = "tag"];
                           message PolicyType {
                              message RoutePolicyName {
                                 string route_policy_name = 1 [json_name = "route-policy-name"];
                              }
                              RoutePolicyName route_policy_name = 1 [json_name = "route-policy-name"];
                           }
                           PolicyType policy_type = 2 [json_name = "policy-type"];
                           bool allow_filter = 3 [json_name = "allow-filter"];
                           bool allow_updown = 4 [json_name = "allow-updown"];
                           bool nosidflag = 5 [json_name = "nosidflag"];
                        }
                        LeakRouteLevel2ToLevel1 leak_route_level2_to_level1 = 21 [json_name = "leak-route-level2-to-level1"];
                        message LeakRouteLevel1ToLevel2 {
                           bool enable = 1 [json_name = "enable"];
                           uint32 tag = 2 [json_name = "tag"];
                           bool allow_filter = 3 [json_name = "allow-filter"];
                           bool nosidflag = 4 [json_name = "nosidflag"];
                        }
                        LeakRouteLevel1ToLevel2 leak_route_level1_to_level2 = 22 [json_name = "leak-route-level1-to-level2"];
                        message MplsLdpGlobal {
                           bool auto_flag = 1 [json_name = "auto-flag"];
                        }
                        MplsLdpGlobal mpls_ldp_global = 23 [json_name = "mpls-ldp-global"];
                        message Ipv4ImportRoutes {
                           message Ipv4ImportRoute {
                              enum Level {
                                 INVALID_ENUM_VALUE_Level = 0;
                                 Level_LEVELX_1 = 1;
                                 Level_LEVELX_2 = 2;
                                 Level_LEVELX_1X_2 = 3;
                              };
                              Level level = 1 [json_name = "level"];
                              string protocol = 2 [json_name = "protocol"];
                              string address = 3 [json_name = "address"];
                              uint32 mask = 4 [json_name = "mask"];
                              uint32 internal_cost = 5 [json_name = "internal-cost"];
                              string external_cost = 6 [json_name = "external-cost"];
                              string tag = 7 [json_name = "tag"];
                           }
                           repeated Ipv4ImportRoute ipv4_import_route = 1 [json_name = "ipv4-import-route"];
                        }
                        Ipv4ImportRoutes ipv4_import_routes = 24 [json_name = "ipv4-import-routes"];
                        message RouteStatisticss {
                           message RouteStatistics {
                              enum Level {
                                 INVALID_ENUM_VALUE_Level = 0;
                                 Level_LEVELX_1 = 1;
                                 Level_LEVELX_2 = 2;
                                 Level_LEVELX_1X_2 = 3;
                              };
                              Level level = 1 [json_name = "level"];
                              uint32 v4_learnt_num = 2 [json_name = "v4-learnt-num"];
                              uint32 v6_learnt_num = 3 [json_name = "v6-learnt-num"];
                              uint32 v4_critical_num = 4 [json_name = "v4-critical-num"];
                              uint32 v4_high_num = 5 [json_name = "v4-high-num"];
                              uint32 v4_medium_num = 6 [json_name = "v4-medium-num"];
                              uint32 v4_low_num = 7 [json_name = "v4-low-num"];
                              uint32 v6_critical_num = 8 [json_name = "v6-critical-num"];
                              uint32 v6_high_num = 9 [json_name = "v6-high-num"];
                              uint32 v6_medium_num = 10 [json_name = "v6-medium-num"];
                              uint32 v6_low_num = 11 [json_name = "v6-low-num"];
                              uint32 v4_forward_num = 12 [json_name = "v4-forward-num"];
                              uint32 v6_forward_num = 13 [json_name = "v6-forward-num"];
                              uint32 v4_added2rm = 14 [json_name = "v4-added2rm"];
                              uint32 v4_unadded2rm = 15 [json_name = "v4-unadded2rm"];
                              uint32 v6_added2rm = 16 [json_name = "v6-added2rm"];
                              uint32 v6_unadded2rm = 17 [json_name = "v6-unadded2rm"];
                           }
                           repeated RouteStatistics route_statistics = 1 [json_name = "route-statistics"];
                        }
                        RouteStatisticss route_statisticss = 25 [json_name = "route-statisticss"];
                        message SegmentRouting {
                           bool enable = 1 [json_name = "enable"];
                           bool auto_adj_sid = 2 [json_name = "auto-adj-sid"];
                           bool adv_static_sid = 3 [json_name = "adv-static-sid"];
                           message Binding {
                              bool receive = 1 [json_name = "receive"];
                              bool advertise = 2 [json_name = "advertise"];
                           }
                           Binding binding = 4 [json_name = "binding"];
                           message LspTrigger {
                              enum Type {
                                 Type_HOST = 0;
                                 Type_NONE = 2;
                                 Type_IPX_PREFIX = 4;
                              };
                              Type type = 1 [json_name = "type"];
                              string ip_prefix = 2 [json_name = "ip-prefix"];
                           }
                           LspTrigger lsp_trigger = 5 [json_name = "lsp-trigger"];
                        }
                        SegmentRouting segment_routing = 26 [json_name = "segment-routing"];
                        message Srv6 {
                           message Locators {
                              message Locator {
                                 string locator_name = 1 [json_name = "locator-name"];
                                 bool auto_sid = 2 [json_name = "auto-sid"];
                              }
                              repeated Locator locator = 1 [json_name = "locator"];
                           }
                           Locators locators = 1 [json_name = "locators"];
                           message AvoidMicroloop {
                              bool enable = 1 [json_name = "enable"];
                              uint32 delay_value = 2 [json_name = "delay-value"];
                           }
                           AvoidMicroloop avoid_microloop = 2 [json_name = "avoid-microloop"];
                        }
                        Srv6 srv6 = 27 [json_name = "srv6"];
                     }
                     repeated Af af = 1 [json_name = "af"];
                  }
                  Afs afs = 12 [json_name = "afs"];
                  message AvoidMicroLoop {
                     bool frr_enable = 1 [json_name = "frr-enable"];
                     uint32 frr_rib_update_delay = 2 [json_name = "frr-rib-update-delay"];
                     bool sr_enable = 3 [json_name = "sr-enable"];
                     uint32 sr_rib_update_delay = 4 [json_name = "sr-rib-update-delay"];
                     bool te_tunnel_enable = 5 [json_name = "te-tunnel-enable"];
                     uint32 te_tunnel_delay = 6 [json_name = "te-tunnel-delay"];
                  }
                  AvoidMicroLoop avoid_micro_loop = 13 [json_name = "avoid-micro-loop"];
                  message Peers {
                     message Peer {
                        string system_id = 1 [json_name = "system-id"];
                        enum Level {
                           INVALID_ENUM_VALUE_Level = 0;
                           Level_LEVELX_1 = 1;
                           Level_LEVELX_2 = 2;
                           Level_LEVELX_1X_2 = 3;
                        };
                        Level level = 2 [json_name = "level"];
                        string circuit_id = 3 [json_name = "circuit-id"];
                        string interface_name = 4 [json_name = "interface-name"];
                        string host_name = 5 [json_name = "host-name"];
                        enum Status {
                           INVALID_ENUM_VALUE_Status = 0;
                           Status_INIT = 1;
                           Status_UP = 2;
                        };
                        Status status = 6 [json_name = "status"];
                        uint32 hold_time = 7 [json_name = "hold-time"];
                        string priority = 8 [json_name = "priority"];
                        string area_addr = 9 [json_name = "area-addr"];
                        string up_time = 10 [json_name = "up-time"];
                        string up_time_stamp = 11 [json_name = "up-time-stamp"];
                        string adj_mt_id = 12 [json_name = "adj-mt-id"];
                        string local_mt_id = 13 [json_name = "local-mt-id"];
                        enum Protocol {
                           INVALID_ENUM_VALUE_Protocol = 0;
                           Protocol_IPV4 = 1;
                           Protocol_IPV6 = 2;
                           Protocol_IPV4X_IPV6 = 3;
                        };
                        Protocol protocol = 14 [json_name = "protocol"];
                        string restart_capable = 15 [json_name = "restart-capable"];
                        string suppressed_adj = 16 [json_name = "suppressed-adj"];
                        string adj_sid = 17 [json_name = "adj-sid"];
                        string ipv6_link_local_addr = 18 [json_name = "ipv6-link-local-addr"];
                        message Ipv4Addrs {
                           message Ipv4Addr {
                              string addr = 1 [json_name = "addr"];
                           }
                           repeated Ipv4Addr ipv4_addr = 1 [json_name = "ipv4-addr"];
                        }
                        Ipv4Addrs ipv4_addrs = 19 [json_name = "ipv4-addrs"];
                        message Ipv6GlobalAddrs {
                           message Ipv6GlobalAddr {
                              string addr = 1 [json_name = "addr"];
                           }
                           repeated Ipv6GlobalAddr ipv6_global_addr = 1 [json_name = "ipv6-global-addr"];
                        }
                        Ipv6GlobalAddrs ipv6_global_addrs = 20 [json_name = "ipv6-global-addrs"];
                        message Endxs {
                           message Endx {
                              string sid = 1 [json_name = "sid"];
                              uint32 mask_length = 2 [json_name = "mask-length"];
                              enum Type {
                                 Type_NOX_PSP = 0;
                                 Type_PSP = 1;
                              };
                              Type type = 3 [json_name = "type"];
                           }
                           repeated Endx endx = 1 [json_name = "endx"];
                        }
                        Endxs endxs = 21 [json_name = "endxs"];
                     }
                     repeated Peer peer = 1 [json_name = "peer"];
                  }
                  Peers peers = 14 [json_name = "peers"];
                  message Lsdbs {
                     message Lsdb {
                        enum LspLevel {
                           INVALID_ENUM_VALUE_LspLevel = 0;
                           LspLevel_LEVELX_1 = 1;
                           LspLevel_LEVELX_2 = 2;
                           LspLevel_LEVELX_1X_2 = 3;
                        };
                        LspLevel lsp_level = 1 [json_name = "lsp-level"];
                        string lsp_id = 2 [json_name = "lsp-id"];
                        string seqence_number = 3 [json_name = "seqence-number"];
                        string check_sum = 4 [json_name = "check-sum"];
                        uint32 lsp_length = 5 [json_name = "lsp-length"];
                        uint32 att = 6 [json_name = "att"];
                        uint32 partition = 7 [json_name = "partition"];
                        uint32 overload = 8 [json_name = "overload"];
                        string hold_time = 9 [json_name = "hold-time"];
                        bool local_lsp = 10 [json_name = "local-lsp"];
                     }
                     repeated Lsdb lsdb = 1 [json_name = "lsdb"];
                  }
                  Lsdbs lsdbs = 15 [json_name = "lsdbs"];
                  uint32 multi_iid = 16 [json_name = "multi-iid"];
                  bool shutdown = 17 [json_name = "shutdown"];
                  bool relax_spf_limit = 18 [json_name = "relax-spf-limit"];
                  bool direct_inherit = 19 [json_name = "direct-inherit"];
                  bool adv_one_intf_addr = 20 [json_name = "adv-one-intf-addr"];
                  message LspFragmentsExtend {
                     bool enable_level1 = 1 [json_name = "enable-level1"];
                     bool enable_level2 = 2 [json_name = "enable-level2"];
                  }
                  LspFragmentsExtend lsp_fragments_extend = 21 [json_name = "lsp-fragments-extend"];
                  message PoiTlv {
                     bool enable = 1 [json_name = "enable"];
                     bool always = 2 [json_name = "always"];
                  }
                  PoiTlv poi_tlv = 22 [json_name = "poi-tlv"];
                  message LsdbLimit {
                     bool enable = 1 [json_name = "enable"];
                     uint32 max_number = 2 [json_name = "max-number"];
                     uint32 threshold_upper = 3 [json_name = "threshold-upper"];
                     uint32 threshold_lower = 4 [json_name = "threshold-lower"];
                  }
                  LsdbLimit lsdb_limit = 23 [json_name = "lsdb-limit"];
                  message SuppressFlapping {
                     message Peer {
                        bool enable = 1 [json_name = "enable"];
                     }
                     Peer peer = 1 [json_name = "peer"];
                  }
                  SuppressFlapping suppress_flapping = 24 [json_name = "suppress-flapping"];
                  message LspLifetime {
                     bool enable = 1 [json_name = "enable"];
                     message Refresh {
                        message MaxAge {
                           bool max_age = 1 [json_name = "max-age"];
                        }
                        MaxAge max_age = 1 [json_name = "max-age"];
                        message Value {
                           uint32 value = 1 [json_name = "value"];
                        }
                        Value value = 2 [json_name = "value"];
                     }
                     Refresh refresh = 2 [json_name = "refresh"];
                  }
                  LspLifetime lsp_lifetime = 25 [json_name = "lsp-lifetime"];
                  message BgpLs {
                     bool enable_level1 = 1 [json_name = "enable-level1"];
                     bool enable_level2 = 2 [json_name = "enable-level2"];
                     uint32 identifier = 3 [json_name = "identifier"];
                  }
                  BgpLs bgp_ls = 26 [json_name = "bgp-ls"];
                  message ExternAbility {
                     bool adj_strict_check = 1 [json_name = "adj-strict-check"];
                     enum EcmpPrefer {
                        EcmpPrefer_NONE = 0;
                        EcmpPrefer_TEX_TUNNEL = 2;
                        EcmpPrefer_INTACT = 3;
                     };
                     EcmpPrefer ecmp_prefer = 2 [json_name = "ecmp-prefer"];
                     bool opt_checksum = 3 [json_name = "opt-checksum"];
                     bool virtual_cluster = 4 [json_name = "virtual-cluster"];
                     bool virtual_access = 5 [json_name = "virtual-access"];
                  }
                  ExternAbility extern_ability = 27 [json_name = "extern-ability"];
                  message CircDatas {
                     message CircData {
                        string if_name = 1 [json_name = "if-name"];
                        uint32 v4_cost_level_1 = 2 [json_name = "v4-cost-level-1"];
                        uint32 v4_cost_level_2 = 3 [json_name = "v4-cost-level-2"];
                        uint32 v6_cost_level_1 = 4 [json_name = "v6-cost-level-1"];
                        uint32 v6_cost_level_2 = 5 [json_name = "v6-cost-level-2"];
                     }
                     repeated CircData circ_data = 1 [json_name = "circ-data"];
                  }
                  CircDatas circ_datas = 28 [json_name = "circ-datas"];
                  message BfdSessions {
                     message BfdSession {
                        enum PeerLevel {
                           INVALID_ENUM_VALUE_PeerLevel = 0;
                           PeerLevel_LEVELX_1 = 1;
                           PeerLevel_LEVELX_2 = 2;
                           PeerLevel_LEVELX_1X_2 = 3;
                        };
                        PeerLevel peer_level = 1 [json_name = "peer-level"];
                        string peer_ip = 2 [json_name = "peer-ip"];
                        string local_ip = 3 [json_name = "local-ip"];
                        enum State {
                           State_UNKNOWN = 0;
                           State_DOWN = 1;
                           State_UP = 2;
                        };
                        State state = 4 [json_name = "state"];
                        uint32 min_tx = 5 [json_name = "min-tx"];
                        uint32 min_rx = 6 [json_name = "min-rx"];
                        uint32 mul_number = 7 [json_name = "mul-number"];
                        string system_id = 8 [json_name = "system-id"];
                        string circuit_name = 9 [json_name = "circuit-name"];
                     }
                     repeated BfdSession bfd_session = 1 [json_name = "bfd-session"];
                  }
                  BfdSessions bfd_sessions = 29 [json_name = "bfd-sessions"];
                  message Srgbs {
                     message Srgb {
                        uint32 lower_bound = 1 [json_name = "lower-bound"];
                        uint32 upper_bound = 2 [json_name = "upper-bound"];
                     }
                     repeated Srgb srgb = 1 [json_name = "srgb"];
                  }
                  Srgbs srgbs = 30 [json_name = "srgbs"];
               }
               repeated Site site = 1 [json_name = "site"];
            }
            Sites sites = 1 [json_name = "sites"];
         }
         Isis isis = 12 [json_name = "isis"];
         string sys_router_id = 13 [json_name = "sys-router-id"];
         uint32 vrf_id = 14 [json_name = "vrf-id"];
         message SegmentRouting {
            bool enable = 1 [json_name = "enable"];
            enum TunnelPrefer {
               INVALID_ENUM_VALUE_TunnelPrefer = 0;
               TunnelPrefer_LDP = 1;
               TunnelPrefer_SRX_BE = 2;
            };
            TunnelPrefer tunnel_prefer = 2 [json_name = "tunnel-prefer"];
            message Bfds {
               message Bfd {
                  enum Type {
                     INVALID_ENUM_VALUE_Type = 0;
                     Type_SEAMLESSX_BFD = 1;
                     Type_BFD = 2;
                  };
                  Type type = 1 [json_name = "type"];
                  enum ModeType {
                     INVALID_ENUM_VALUE_ModeType = 0;
                     ModeType_TUNNEL = 1;
                  };
                  ModeType mode_type = 2 [json_name = "mode-type"];
                  string ip_prefix = 3 [json_name = "ip-prefix"];
                  uint32 min_rx = 4 [json_name = "min-rx"];
                  uint32 min_tx = 5 [json_name = "min-tx"];
                  uint32 detect_multiplier = 6 [json_name = "detect-multiplier"];
                  bool effect_sr_lsp = 7 [json_name = "effect-sr-lsp"];
                  bool nil_fec = 8 [json_name = "nil-fec"];
               }
               repeated Bfd bfd = 1 [json_name = "bfd"];
            }
            Bfds bfds = 3 [json_name = "bfds"];
            message TrafficStats {
               enum Mode {
                  Mode_NONE = 0;
                  Mode_HOST = 1;
                  Mode_IPX_PREFIX = 2;
               };
               Mode mode = 1 [json_name = "mode"];
               string prefix_name = 2 [json_name = "prefix-name"];
            }
            TrafficStats traffic_stats = 4 [json_name = "traffic-stats"];
            message Bindings {
               message PrefixSidMappings {
                  message PrefixSidMapping {
                     string ip_address = 1 [json_name = "ip-address"];
                     uint32 mask_length = 2 [json_name = "mask-length"];
                     uint32 start_sid = 3 [json_name = "start-sid"];
                     uint32 range = 4 [json_name = "range"];
                     bool attach_flag = 5 [json_name = "attach-flag"];
                     uint32 algorithm = 6 [json_name = "algorithm"];
                  }
                  repeated PrefixSidMapping prefix_sid_mapping = 1 [json_name = "prefix-sid-mapping"];
               }
               PrefixSidMappings prefix_sid_mappings = 1 [json_name = "prefix-sid-mappings"];
            }
            Bindings bindings = 5 [json_name = "bindings"];
            message StaticLabelBlocks {
               message StaticLabelBlock {
                  uint32 lower_sid = 1 [json_name = "lower-sid"];
                  uint32 upper_sid = 2 [json_name = "upper-sid"];
                  uint32 range = 3 [json_name = "range"];
               }
               repeated StaticLabelBlock static_label_block = 1 [json_name = "static-label-block"];
            }
            StaticLabelBlocks static_label_blocks = 6 [json_name = "static-label-blocks"];
            message Ipv4State {
               message PrefixMplsForwardings {
                  message PrefixMplsForwarding {
                     string ip_address = 1 [json_name = "ip-address"];
                     uint32 mask_length = 2 [json_name = "mask-length"];
                     uint32 in_label = 3 [json_name = "in-label"];
                     string out_label = 4 [json_name = "out-label"];
                     string if_name = 5 [json_name = "if-name"];
                     string next_hop = 6 [json_name = "next-hop"];
                     string lsp_xc_role = 7 [json_name = "lsp-xc-role"];
                     string mpls_mtu = 8 [json_name = "mpls-mtu"];
                     uint32 mtu = 9 [json_name = "mtu"];
                     string state = 10 [json_name = "state"];
                  }
                  repeated PrefixMplsForwarding prefix_mpls_forwarding = 1 [json_name = "prefix-mpls-forwarding"];
               }
               PrefixMplsForwardings prefix_mpls_forwardings = 1 [json_name = "prefix-mpls-forwardings"];
               message BfdStates {
                  message BfdState {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_SEAMLESSX_BFD = 1;
                        Type_BFD = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     enum ModeType {
                        INVALID_ENUM_VALUE_ModeType = 0;
                        ModeType_TUNNEL = 1;
                     };
                     ModeType mode_type = 2 [json_name = "mode-type"];
                     string ip_address = 3 [json_name = "ip-address"];
                     uint32 mask_length = 4 [json_name = "mask-length"];
                     string state = 5 [json_name = "state"];
                     uint32 discriminator = 6 [json_name = "discriminator"];
                  }
                  repeated BfdState bfd_state = 1 [json_name = "bfd-state"];
               }
               BfdStates bfd_states = 2 [json_name = "bfd-states"];
            }
            Ipv4State ipv4_state = 7 [json_name = "ipv4-state"];
            message Srpolicy {
               message PolicyAttributes {
                  uint32 delete_delay = 1 [json_name = "delete-delay"];
                  bool hsb_enable = 2 [json_name = "hsb-enable"];
                  bool traffic_statistics_enable = 3 [json_name = "traffic-statistics-enable"];
                  message Bfd {
                     enum Enable {
                        INVALID_ENUM_VALUE_Enable = 0;
                        Enable_SBFDX_ENABLE = 1;
                        Enable_DISABLE = 2;
                     };
                     Enable enable = 1 [json_name = "enable"];
                     uint32 min_tx = 2 [json_name = "min-tx"];
                     uint32 min_rx = 3 [json_name = "min-rx"];
                     uint32 multi_num = 4 [json_name = "multi-num"];
                  }
                  Bfd bfd = 4 [json_name = "bfd"];
               }
               PolicyAttributes policy_attributes = 1 [json_name = "policy-attributes"];
               message PolicyTrafficStatistics {
                  message PolicyTrafficStatistic {
                     string endpoint = 1 [json_name = "endpoint"];
                     uint32 color = 2 [json_name = "color"];
                     string name = 3 [json_name = "name"];
                     string binding_sid = 4 [json_name = "binding-sid"];
                     uint32 tunnel_id = 5 [json_name = "tunnel-id"];
                     uint32 flow_period = 6 [json_name = "flow-period"];
                     uint64 last_period_byte_rate = 7 [json_name = "last-period-byte-rate"];
                     uint64 last_period_pkt_rate = 8 [json_name = "last-period-pkt-rate"];
                     uint64 display_interval = 9 [json_name = "display-interval"];
                     uint64 interval_byte_rate = 10 [json_name = "interval-byte-rate"];
                     uint64 interval_pkt_rate = 11 [json_name = "interval-pkt-rate"];
                     uint64 total_byte = 12 [json_name = "total-byte"];
                     uint64 total_packet = 13 [json_name = "total-packet"];
                  }
                  repeated PolicyTrafficStatistic policy_traffic_statistic = 1 [json_name = "policy-traffic-statistic"];
               }
               PolicyTrafficStatistics policy_traffic_statistics = 2 [json_name = "policy-traffic-statistics"];
               message ListTrafficStatistics {
                  message ListTrafficStatistic {
                     uint32 segment_list_id = 1 [json_name = "segment-list-id"];
                     uint32 xc_index = 2 [json_name = "xc-index"];
                     string policy_name = 3 [json_name = "policy-name"];
                     string endpoint = 4 [json_name = "endpoint"];
                     uint32 color = 5 [json_name = "color"];
                     string binding_sid = 6 [json_name = "binding-sid"];
                     uint32 tunnel_id = 7 [json_name = "tunnel-id"];
                     uint32 preference = 8 [json_name = "preference"];
                     enum ProtocolOrigin {
                        INVALID_ENUM_VALUE_ProtocolOrigin = 0;
                        ProtocolOrigin_LOCAL = 1;
                        ProtocolOrigin_BGP = 2;
                        ProtocolOrigin_PCEP = 3;
                     };
                     ProtocolOrigin protocol_origin = 9 [json_name = "protocol-origin"];
                     uint32 asn = 10 [json_name = "asn"];
                     string node_address = 11 [json_name = "node-address"];
                     uint32 discriminator = 12 [json_name = "discriminator"];
                     enum PathType {
                        PathType_NOX_ACTIVE = 0;
                        PathType_PRIMARY = 1;
                        PathType_BACKUP = 2;
                     };
                     PathType path_type = 13 [json_name = "path-type"];
                     message Sids {
                        message Sid {
                           uint32 index = 1 [json_name = "index"];
                           string value = 2 [json_name = "value"];
                        }
                        repeated Sid sid = 1 [json_name = "sid"];
                     }
                     Sids sids = 14 [json_name = "sids"];
                     uint32 flow_period = 15 [json_name = "flow-period"];
                     uint64 last_period_byte_rate = 16 [json_name = "last-period-byte-rate"];
                     uint64 last_period_pkt_rate = 17 [json_name = "last-period-pkt-rate"];
                     uint64 display_interval = 18 [json_name = "display-interval"];
                     uint64 interval_byte_rate = 19 [json_name = "interval-byte-rate"];
                     uint64 interval_pkt_rate = 20 [json_name = "interval-pkt-rate"];
                     uint64 total_byte = 21 [json_name = "total-byte"];
                     uint64 total_packet = 22 [json_name = "total-packet"];
                     bool no_resource_flag = 23 [json_name = "no-resource-flag"];
                  }
                  repeated ListTrafficStatistic list_traffic_statistic = 1 [json_name = "list-traffic-statistic"];
               }
               ListTrafficStatistics list_traffic_statistics = 3 [json_name = "list-traffic-statistics"];
            }
            Srpolicy srpolicy = 8 [json_name = "srpolicy"];
         }
         SegmentRouting segment_routing = 15 [json_name = "segment-routing"];
         bool traffic_statistic_enable = 16 [json_name = "traffic-statistic-enable"];
         message Rip {
            message Processs {
               message Process {
                  uint32 id = 1 [json_name = "id"];
                  string description = 2 [json_name = "description"];
                  enum VerifySource {
                     VerifySource_DISABLE = 0;
                     VerifySource_ENABLE = 1;
                  };
                  VerifySource verify_source = 3 [json_name = "verify-source"];
                  uint32 threshold_percent = 4 [json_name = "threshold-percent"];
                  enum Summary {
                     Summary_DISABLE = 0;
                     Summary_ENABLE = 1;
                     Summary_ENABLEX_ALWAYS = 2;
                  };
                  Summary summary = 5 [json_name = "summary"];
                  enum HostRoute {
                     HostRoute_DISABLE = 0;
                     HostRoute_ENABLE = 1;
                  };
                  HostRoute host_route = 6 [json_name = "host-route"];
                  enum CheckZero {
                     CheckZero_DISABLE = 0;
                     CheckZero_ENABLE = 1;
                  };
                  CheckZero check_zero = 7 [json_name = "check-zero"];
                  uint32 version = 8 [json_name = "version"];
                  enum MibBinding {
                     MibBinding_DISABLE = 0;
                     MibBinding_ENABLE = 1;
                  };
                  MibBinding mib_binding = 9 [json_name = "mib-binding"];
                  uint32 maximum_load_balancing = 10 [json_name = "maximum-load-balancing"];
                  enum ZeroMetricCheck {
                     ZeroMetricCheck_DISABLE = 0;
                     ZeroMetricCheck_ENABLE = 1;
                  };
                  ZeroMetricCheck zero_metric_check = 11 [json_name = "zero-metric-check"];
                  uint32 default_cost = 12 [json_name = "default-cost"];
                  enum SilentInterfaceAll {
                     SilentInterfaceAll_DISABLE = 0;
                     SilentInterfaceAll_ENABLE = 1;
                  };
                  SilentInterfaceAll silent_interface_all = 13 [json_name = "silent-interface-all"];
                  uint32 max_routes = 14 [json_name = "max-routes"];
                  message Timer {
                     uint32 garbage = 1 [json_name = "garbage"];
                     uint32 periodic = 2 [json_name = "periodic"];
                     uint32 age = 3 [json_name = "age"];
                     uint32 suppress = 4 [json_name = "suppress"];
                     enum TriggeredFlag {
                        TriggeredFlag_DISABLE = 0;
                        TriggeredFlag_ENABLE = 1;
                     };
                     TriggeredFlag triggered_flag = 5 [json_name = "triggered-flag"];
                     uint32 triggered_min_interval = 6 [json_name = "triggered-min-interval"];
                     uint32 triggered_max_interval = 7 [json_name = "triggered-max-interval"];
                     uint32 triggered_incr_value = 8 [json_name = "triggered-incr-value"];
                  }
                  Timer timer = 15 [json_name = "timer"];
                  message Bfd {
                     enum Enable {
                        Enable_DISABLE = 0;
                        Enable_ENABLE = 1;
                     };
                     Enable enable = 1 [json_name = "enable"];
                     uint32 min_tx = 2 [json_name = "min-tx"];
                     uint32 min_rx = 3 [json_name = "min-rx"];
                     uint32 detect_multiplier = 4 [json_name = "detect-multiplier"];
                  }
                  Bfd bfd = 16 [json_name = "bfd"];
                  message Preference {
                     uint32 value = 1 [json_name = "value"];
                  }
                  Preference preference = 17 [json_name = "preference"];
                  message Interfaces {
                     message Interface {
                        string name = 1 [json_name = "name"];
                        message MaxPacketLength {
                           message Value {
                              uint32 value = 1 [json_name = "value"];
                           }
                           Value value = 1 [json_name = "value"];
                           message Mtu {
                              bool mtu = 1 [json_name = "mtu"];
                           }
                           Mtu mtu = 2 [json_name = "mtu"];
                        }
                        MaxPacketLength max_packet_length = 2 [json_name = "max-packet-length"];
                        uint32 input = 3 [json_name = "input"];
                        uint32 output = 4 [json_name = "output"];
                        enum Version {
                           INVALID_ENUM_VALUE_Version = 0;
                           Version_RIPX_VERSIONX_1 = 1;
                           Version_RIPX_VERSIONX_2 = 2;
                           Version_RIPX_VERSIONX_2X_COMP = 3;
                           Version_RIPX_VERSIONX_DEFAULT = 5;
                        };
                        Version version = 5 [json_name = "version"];
                        uint32 split_horizon = 6 [json_name = "split-horizon"];
                        uint32 poison_reverse = 7 [json_name = "poison-reverse"];
                        uint32 pkt_transmit_interval = 8 [json_name = "pkt-transmit-interval"];
                        uint32 pkt_transmit_bandwidth = 9 [json_name = "pkt-transmit-bandwidth"];
                        uint32 pkt_transmit_number = 10 [json_name = "pkt-transmit-number"];
                        message Authentication {
                           enum Mode {
                              INVALID_ENUM_VALUE_Mode = 0;
                              Mode_NONE = 1;
                              Mode_SIMPLE = 2;
                              Mode_HUAWEI = 3;
                              Mode_MD5X_KEYID = 5;
                              Mode_HMACX_SHA256 = 6;
                           };
                           Mode mode = 1 [json_name = "mode"];
                           string simple = 2 [json_name = "simple"];
                           uint32 key_id = 3 [json_name = "key-id"];
                           string md5 = 4 [json_name = "md5"];
                        }
                        Authentication authentication = 11 [json_name = "authentication"];
                        message Metricin {
                           uint32 value = 1 [json_name = "value"];
                           message PolicyType {
                              message IpPrefix {
                                 string ip_prefix = 1 [json_name = "ip-prefix"];
                              }
                              IpPrefix ip_prefix = 1 [json_name = "ip-prefix"];
                              message AclNumber {
                                 string acl_number = 1 [json_name = "acl-number"];
                              }
                              AclNumber acl_number = 2 [json_name = "acl-number"];
                              message AclName {
                                 string acl_name = 1 [json_name = "acl-name"];
                              }
                              AclName acl_name = 3 [json_name = "acl-name"];
                           }
                           PolicyType policy_type = 2 [json_name = "policy-type"];
                        }
                        Metricin metricin = 12 [json_name = "metricin"];
                        message Metricout {
                           uint32 value = 1 [json_name = "value"];
                           message PolicyType {
                              message IpPrefix {
                                 string ip_prefix = 1 [json_name = "ip-prefix"];
                              }
                              IpPrefix ip_prefix = 1 [json_name = "ip-prefix"];
                              message AclNumber {
                                 string acl_number = 1 [json_name = "acl-number"];
                              }
                              AclNumber acl_number = 2 [json_name = "acl-number"];
                              message AclName {
                                 string acl_name = 1 [json_name = "acl-name"];
                              }
                              AclName acl_name = 3 [json_name = "acl-name"];
                           }
                           PolicyType policy_type = 2 [json_name = "policy-type"];
                        }
                        Metricout metricout = 13 [json_name = "metricout"];
                     }
                     repeated Interface interface = 1 [json_name = "interface"];
                  }
                  Interfaces interfaces = 18 [json_name = "interfaces"];
               }
               repeated Process process = 1 [json_name = "process"];
            }
            Processs processs = 1 [json_name = "processs"];
         }
         Rip rip = 17 [json_name = "rip"];
         message Igmp {
            message Global {
               uint32 query_interval = 1 [json_name = "query-interval"];
               uint32 query_response_interval = 2 [json_name = "query-response-interval"];
               uint32 robustness = 3 [json_name = "robustness"];
               uint32 last_member_query_interval = 4 [json_name = "last-member-query-interval"];
               bool require_router_alert = 5 [json_name = "require-router-alert"];
               bool send_router_alert = 6 [json_name = "send-router-alert"];
               uint32 other_querier_present_time = 7 [json_name = "other-querier-present-time"];
               string ssm_mapping_dns_domain = 8 [json_name = "ssm-mapping-dns-domain"];
               bool ssm_mapping_query_dns = 9 [json_name = "ssm-mapping-query-dns"];
               string ssm_mapping_query_dns_policy = 10 [json_name = "ssm-mapping-query-dns-policy"];
               message SsmMappings {
                  message SsmMapping {
                     string group_address = 1 [json_name = "group-address"];
                     uint32 mask_length = 2 [json_name = "mask-length"];
                     string source_address = 3 [json_name = "source-address"];
                  }
                  repeated SsmMapping ssm_mapping = 1 [json_name = "ssm-mapping"];
               }
               SsmMappings ssm_mappings = 11 [json_name = "ssm-mappings"];
            }
            Global global = 1 [json_name = "global"];
            message Interfaces {
               message Interface {
                  string name = 1 [json_name = "name"];
                  bool enable = 2 [json_name = "enable"];
                  bool ip_source_policy_enable = 3 [json_name = "ip-source-policy-enable"];
                  uint32 query_interval = 4 [json_name = "query-interval"];
                  uint32 query_response_interval = 5 [json_name = "query-response-interval"];
                  uint32 robustness = 6 [json_name = "robustness"];
                  uint32 version = 7 [json_name = "version"];
                  uint32 last_member_query_interval = 8 [json_name = "last-member-query-interval"];
                  bool require_router_alert = 9 [json_name = "require-router-alert"];
                  bool send_router_alert = 10 [json_name = "send-router-alert"];
                  uint32 other_querier_present_time = 11 [json_name = "other-querier-present-time"];
                  bool immediately_leave = 12 [json_name = "immediately-leave"];
                  bool on_demand_enable = 13 [json_name = "on-demand-enable"];
                  uint32 entry_limit = 14 [json_name = "entry-limit"];
                  bool ssm_mapping_enable = 15 [json_name = "ssm-mapping-enable"];
               }
               repeated Interface interface = 1 [json_name = "interface"];
            }
            Interfaces interfaces = 2 [json_name = "interfaces"];
            message StaticGroups {
               message StaticGroup {
                  string interface = 1 [json_name = "interface"];
                  string group_address = 2 [json_name = "group-address"];
                  bool is_source_address = 3 [json_name = "is-source-address"];
                  string source_address = 4 [json_name = "source-address"];
                  bool is_inc_step_group_mask = 5 [json_name = "is-inc-step-group-mask"];
                  string inc_step_group_mask = 6 [json_name = "inc-step-group-mask"];
                  bool is_source_dns_ssm_mapping = 7 [json_name = "is-source-dns-ssm-mapping"];
                  uint32 group_number = 8 [json_name = "group-number"];
               }
               repeated StaticGroup static_group = 1 [json_name = "static-group"];
            }
            StaticGroups static_groups = 3 [json_name = "static-groups"];
            message Dot1QStaticGroups {
               message Dot1QStaticGroup {
                  string interface = 1 [json_name = "interface"];
                  string group_address = 2 [json_name = "group-address"];
                  bool is_source_address = 3 [json_name = "is-source-address"];
                  string source_address = 4 [json_name = "source-address"];
                  bool is_inc_step_group_mask = 5 [json_name = "is-inc-step-group-mask"];
                  string inc_step_group_mask = 6 [json_name = "inc-step-group-mask"];
                  uint32 begin_vid = 7 [json_name = "begin-vid"];
                  uint32 end_vid = 8 [json_name = "end-vid"];
                  uint32 group_number = 9 [json_name = "group-number"];
               }
               repeated Dot1QStaticGroup dot1q_static_group = 1 [json_name = "dot1q-static-group"];
            }
            Dot1QStaticGroups dot1q_static_groups = 4 [json_name = "dot1q-static-groups"];
            message QinqStaticGroups {
               message QinqStaticGroup {
                  string interface = 1 [json_name = "interface"];
                  string group_address = 2 [json_name = "group-address"];
                  bool is_source_address = 3 [json_name = "is-source-address"];
                  string source_address = 4 [json_name = "source-address"];
                  bool is_inc_step_group_mask = 5 [json_name = "is-inc-step-group-mask"];
                  string inc_step_group_mask = 6 [json_name = "inc-step-group-mask"];
                  uint32 pe_vid = 7 [json_name = "pe-vid"];
                  uint32 ce_begin_vid = 8 [json_name = "ce-begin-vid"];
                  uint32 ce_end_vid = 9 [json_name = "ce-end-vid"];
                  uint32 group_number = 10 [json_name = "group-number"];
               }
               repeated QinqStaticGroup qinq_static_group = 1 [json_name = "qinq-static-group"];
            }
            QinqStaticGroups qinq_static_groups = 5 [json_name = "qinq-static-groups"];
         }
         Igmp igmp = 18 [json_name = "igmp"];
         message Mld {
            message Global {
               uint32 query_interval = 1 [json_name = "query-interval"];
               uint32 query_response_interval = 2 [json_name = "query-response-interval"];
               uint32 robustness = 3 [json_name = "robustness"];
               uint32 last_member_query_interval = 4 [json_name = "last-member-query-interval"];
               bool require_router_alert = 5 [json_name = "require-router-alert"];
               bool send_router_alert = 6 [json_name = "send-router-alert"];
               uint32 other_querier_present_time = 7 [json_name = "other-querier-present-time"];
               message SsmMappings {
                  message SsmMapping {
                     string group_address = 1 [json_name = "group-address"];
                     uint32 mask_length = 2 [json_name = "mask-length"];
                     string source_address = 3 [json_name = "source-address"];
                  }
                  repeated SsmMapping ssm_mapping = 1 [json_name = "ssm-mapping"];
               }
               SsmMappings ssm_mappings = 8 [json_name = "ssm-mappings"];
            }
            Global global = 1 [json_name = "global"];
            message Interfaces {
               message Interface {
                  string name = 1 [json_name = "name"];
                  bool enable = 2 [json_name = "enable"];
                  bool ip_source_policy_enable = 3 [json_name = "ip-source-policy-enable"];
                  uint32 query_interval = 4 [json_name = "query-interval"];
                  uint32 query_response_interval = 5 [json_name = "query-response-interval"];
                  uint32 robustness = 6 [json_name = "robustness"];
                  uint32 version = 7 [json_name = "version"];
                  uint32 last_member_query_interval = 8 [json_name = "last-member-query-interval"];
                  bool require_router_alert = 9 [json_name = "require-router-alert"];
                  bool send_router_alert = 10 [json_name = "send-router-alert"];
                  uint32 other_querier_present_time = 11 [json_name = "other-querier-present-time"];
                  bool immediately_leave = 12 [json_name = "immediately-leave"];
                  bool on_demand_enable = 13 [json_name = "on-demand-enable"];
                  bool ssm_mapping_enable = 14 [json_name = "ssm-mapping-enable"];
               }
               repeated Interface interface = 1 [json_name = "interface"];
            }
            Interfaces interfaces = 2 [json_name = "interfaces"];
            message StaticGroups {
               message StaticGroup {
                  string interface = 1 [json_name = "interface"];
                  string group_address = 2 [json_name = "group-address"];
                  bool is_source_address = 3 [json_name = "is-source-address"];
                  string source_address = 4 [json_name = "source-address"];
                  bool is_mask_length = 5 [json_name = "is-mask-length"];
                  uint32 mask_length = 6 [json_name = "mask-length"];
                  uint32 total_number = 7 [json_name = "total-number"];
               }
               repeated StaticGroup static_group = 1 [json_name = "static-group"];
            }
            StaticGroups static_groups = 3 [json_name = "static-groups"];
            message Dot1QStaticGroups {
               message Dot1QStaticGroup {
                  string interface = 1 [json_name = "interface"];
                  string group_address = 2 [json_name = "group-address"];
                  bool is_source_address = 3 [json_name = "is-source-address"];
                  string source_address = 4 [json_name = "source-address"];
                  bool is_mask_length = 5 [json_name = "is-mask-length"];
                  uint32 mask_length = 6 [json_name = "mask-length"];
                  uint32 begin_vid = 7 [json_name = "begin-vid"];
                  uint32 end_vid = 8 [json_name = "end-vid"];
                  uint32 group_number = 9 [json_name = "group-number"];
               }
               repeated Dot1QStaticGroup dot1q_static_group = 1 [json_name = "dot1q-static-group"];
            }
            Dot1QStaticGroups dot1q_static_groups = 4 [json_name = "dot1q-static-groups"];
            message QinqStaticGroups {
               message QinqStaticGroup {
                  string interface = 1 [json_name = "interface"];
                  string group_address = 2 [json_name = "group-address"];
                  bool is_source_address = 3 [json_name = "is-source-address"];
                  string source_address = 4 [json_name = "source-address"];
                  bool is_mask_length = 5 [json_name = "is-mask-length"];
                  uint32 mask_length = 6 [json_name = "mask-length"];
                  uint32 pe_vid = 7 [json_name = "pe-vid"];
                  uint32 ce_begin_vid = 8 [json_name = "ce-begin-vid"];
                  uint32 ce_end_vid = 9 [json_name = "ce-end-vid"];
                  uint32 group_number = 10 [json_name = "group-number"];
               }
               repeated QinqStaticGroup qinq_static_group = 1 [json_name = "qinq-static-group"];
            }
            QinqStaticGroups qinq_static_groups = 5 [json_name = "qinq-static-groups"];
         }
         Mld mld = 19 [json_name = "mld"];
         message Flowspec {
            message FlowRoutes {
               message FlowRoute {
                  string name = 1 [json_name = "name"];
                  enum AddressFamily {
                     INVALID_ENUM_VALUE_AddressFamily = 0;
                     AddressFamily_IPV4FLOW = 7;
                     AddressFamily_IPV6FLOW = 15;
                  };
                  AddressFamily address_family = 2 [json_name = "address-family"];
                  message Condition {
                     message SourcePrefix {
                        string address = 1 [json_name = "address"];
                        uint32 mask_length = 2 [json_name = "mask-length"];
                     }
                     SourcePrefix source_prefix = 1 [json_name = "source-prefix"];
                  }
                  Condition condition = 3 [json_name = "condition"];
                  message Action {
                     message RemarkDscp {
                        uint32 value = 1 [json_name = "value"];
                     }
                     RemarkDscp remark_dscp = 1 [json_name = "remark-dscp"];
                     message TrafficRate {
                        uint32 value = 1 [json_name = "value"];
                        uint32 valid_value = 2 [json_name = "valid-value"];
                     }
                     TrafficRate traffic_rate = 2 [json_name = "traffic-rate"];
                     message Traffic {
                        bool sample = 1 [json_name = "sample"];
                     }
                     Traffic traffic = 3 [json_name = "traffic"];
                  }
                  Action action = 4 [json_name = "action"];
               }
               repeated FlowRoute flow_route = 1 [json_name = "flow-route"];
            }
            FlowRoutes flow_routes = 1 [json_name = "flow-routes"];
         }
         Flowspec flowspec = 20 [json_name = "flowspec"];
         message Te {
            message Interfaces {
               message Interface {
                  string name = 1 [json_name = "name"];
                  bool mpls_te_enable = 2 [json_name = "mpls-te-enable"];
                  message Attribute {
                     uint32 metric = 1 [json_name = "metric"];
                     string admin_groups = 2 [json_name = "admin-groups"];
                     repeated string admin_groups_name = 3 [json_name = "admin-groups-name"];
                     repeated uint32 srlg_group = 4 [json_name = "srlg-group"];
                     message Bandwidth {
                        uint32 max_reserved = 1 [json_name = "max-reserved"];
                        uint32 bc0 = 2 [json_name = "bc0"];
                        uint32 dynamic_max_reserved_percent = 3 [json_name = "dynamic-max-reserved-percent"];
                        uint32 dynamic_bc0_percent = 4 [json_name = "dynamic-bc0-percent"];
                        int32 change_threshold_down = 5 [json_name = "change-threshold-down"];
                        int32 change_threshold_up = 6 [json_name = "change-threshold-up"];
                     }
                     Bandwidth bandwidth = 5 [json_name = "bandwidth"];
                     message Status {
                        uint32 used_bandwidth = 1 [json_name = "used-bandwidth"];
                        enum LineProtocolState {
                           LineProtocolState_DOWN = 0;
                           LineProtocolState_UP = 1;
                        };
                        LineProtocolState line_protocol_state = 2 [json_name = "line-protocol-state"];
                     }
                     Status status = 6 [json_name = "status"];
                  }
                  Attribute attribute = 3 [json_name = "attribute"];
                  message MplsTeAttribute {
                     enum AutoFrrMode {
                        AutoFrrMode_DEFAULT = 0;
                        AutoFrrMode_LINK = 1;
                        AutoFrrMode_NODE = 2;
                        AutoFrrMode_SELFX_ADAPTING = 3;
                        AutoFrrMode_DISABLE = 4;
                     };
                     AutoFrrMode auto_frr_mode = 1 [json_name = "auto-frr-mode"];
                     message AutoFrrAttributes {
                        uint32 bandwidth = 1 [json_name = "bandwidth"];
                        uint32 setup_priority = 2 [json_name = "setup-priority"];
                        uint32 hold_priority = 3 [json_name = "hold-priority"];
                        uint32 hop_limit = 4 [json_name = "hop-limit"];
                        string include_any = 5 [json_name = "include-any"];
                        string exclude_any = 6 [json_name = "exclude-any"];
                        string include_all = 7 [json_name = "include-all"];
                        repeated string include_any_affinity_name = 8 [json_name = "include-any-affinity-name"];
                        repeated string exclude_any_affinity_name = 9 [json_name = "exclude-any-affinity-name"];
                        repeated string include_all_affinity_name = 10 [json_name = "include-all-affinity-name"];
                     }
                     AutoFrrAttributes auto_frr_attributes = 2 [json_name = "auto-frr-attributes"];
                  }
                  MplsTeAttribute mpls_te_attribute = 4 [json_name = "mpls-te-attribute"];
               }
               repeated Interface interface = 1 [json_name = "interface"];
            }
            Interfaces interfaces = 1 [json_name = "interfaces"];
         }
         Te te = 21 [json_name = "te"];
         message Srv6 {
            bool enable = 1 [json_name = "enable"];
            bool te_frr_enable = 2 [json_name = "te-frr-enable"];
            message Encapsulation {
               string source_address = 1 [json_name = "source-address"];
               uint32 hop_limit = 2 [json_name = "hop-limit"];
            }
            Encapsulation encapsulation = 3 [json_name = "encapsulation"];
            message Locators {
               message Locator {
                  string name = 1 [json_name = "name"];
                  string prefix = 2 [json_name = "prefix"];
                  uint32 prefix_length = 3 [json_name = "prefix-length"];
                  uint32 static_length = 4 [json_name = "static-length"];
                  uint32 args_length = 5 [json_name = "args-length"];
                  message Opcodes {
                     message Ends {
                        message End {
                           string value = 1 [json_name = "value"];
                        }
                        repeated End end = 1 [json_name = "end"];
                     }
                     Ends ends = 1 [json_name = "ends"];
                     message EndPsps {
                        message EndPsp {
                           string value = 1 [json_name = "value"];
                        }
                        repeated EndPsp end_psp = 1 [json_name = "end-psp"];
                     }
                     EndPsps end_psps = 2 [json_name = "end-psps"];
                     message EndOps {
                        message EndOp {
                           string value = 1 [json_name = "value"];
                        }
                        repeated EndOp end_op = 1 [json_name = "end-op"];
                     }
                     EndOps end_ops = 3 [json_name = "end-ops"];
                     message EndXs {
                        message EndX {
                           string value = 1 [json_name = "value"];
                           string if_name = 2 [json_name = "if-name"];
                           string next_hop = 3 [json_name = "next-hop"];
                        }
                        repeated EndX end_x = 1 [json_name = "end-x"];
                     }
                     EndXs end_xs = 4 [json_name = "end-xs"];
                     message EndXPsps {
                        message EndXPsp {
                           string value = 1 [json_name = "value"];
                           string if_name = 2 [json_name = "if-name"];
                           string next_hop = 3 [json_name = "next-hop"];
                        }
                        repeated EndXPsp end_x_psp = 1 [json_name = "end-x-psp"];
                     }
                     EndXPsps end_x_psps = 5 [json_name = "end-x-psps"];
                     message EndDt4S {
                        message EndDt4 {
                           string value = 1 [json_name = "value"];
                           string vpn_name = 2 [json_name = "vpn-name"];
                        }
                        repeated EndDt4 end_dt4 = 1 [json_name = "end-dt4"];
                     }
                     EndDt4S end_dt4s = 6 [json_name = "end-dt4s"];
                  }
                  Opcodes opcodes = 6 [json_name = "opcodes"];
               }
               repeated Locator locator = 1 [json_name = "locator"];
            }
            Locators locators = 4 [json_name = "locators"];
            message LocalSids {
               message Ends {
                  message End {
                     string value = 1 [json_name = "value"];
                     string locator_name = 2 [json_name = "locator-name"];
                  }
                  repeated End end = 1 [json_name = "end"];
               }
               Ends ends = 1 [json_name = "ends"];
               message EndPsps {
                  message EndPsp {
                     string value = 1 [json_name = "value"];
                     string locator_name = 2 [json_name = "locator-name"];
                  }
                  repeated EndPsp end_psp = 1 [json_name = "end-psp"];
               }
               EndPsps end_psps = 2 [json_name = "end-psps"];
               message EndOps {
                  message EndOp {
                     string value = 1 [json_name = "value"];
                     string locator_name = 2 [json_name = "locator-name"];
                  }
                  repeated EndOp end_op = 1 [json_name = "end-op"];
               }
               EndOps end_ops = 3 [json_name = "end-ops"];
               message EndXs {
                  message EndX {
                     string value = 1 [json_name = "value"];
                     string locator_name = 2 [json_name = "locator-name"];
                     message NextHops {
                        message NextHop {
                           string if_name = 1 [json_name = "if-name"];
                           string next_hop = 2 [json_name = "next-hop"];
                        }
                        repeated NextHop next_hop = 1 [json_name = "next-hop"];
                     }
                     NextHops next_hops = 3 [json_name = "next-hops"];
                  }
                  repeated EndX end_x = 1 [json_name = "end-x"];
               }
               EndXs end_xs = 4 [json_name = "end-xs"];
               message EndXPsps {
                  message EndXPsp {
                     string value = 1 [json_name = "value"];
                     string locator_name = 2 [json_name = "locator-name"];
                     message NextHops {
                        message NextHop {
                           string if_name = 1 [json_name = "if-name"];
                           string next_hop = 2 [json_name = "next-hop"];
                        }
                        repeated NextHop next_hop = 1 [json_name = "next-hop"];
                     }
                     NextHops next_hops = 3 [json_name = "next-hops"];
                  }
                  repeated EndXPsp end_x_psp = 1 [json_name = "end-x-psp"];
               }
               EndXPsps end_x_psps = 5 [json_name = "end-x-psps"];
               message EndDt4S {
                  message EndDt4 {
                     string value = 1 [json_name = "value"];
                     string vpn_name = 2 [json_name = "vpn-name"];
                     string locator_name = 3 [json_name = "locator-name"];
                  }
                  repeated EndDt4 end_dt4 = 1 [json_name = "end-dt4"];
               }
               EndDt4S end_dt4s = 6 [json_name = "end-dt4s"];
            }
            LocalSids local_sids = 5 [json_name = "local-sids"];
         }
         Srv6 srv6 = 22 [json_name = "srv6"];
         message Msdp {
            message Global {
               bool cache_sa_enable = 1 [json_name = "cache-sa-enable"];
               bool encap_data_enable = 2 [json_name = "encap-data-enable"];
               uint32 retry_interval = 3 [json_name = "retry-interval"];
               bool import_source_enable = 4 [json_name = "import-source-enable"];
               message Peers {
                  message Peer {
                     string address = 1 [json_name = "address"];
                     string connect_interface = 2 [json_name = "connect-interface"];
                     uint32 minimum_ttl = 3 [json_name = "minimum-ttl"];
                     string mesh_group_name = 4 [json_name = "mesh-group-name"];
                     bool request_sa_enable = 5 [json_name = "request-sa-enable"];
                     bool is_shutdown = 6 [json_name = "is-shutdown"];
                     message AuthenticationType {
                        message Keychain {
                           string keychain_name = 1 [json_name = "keychain-name"];
                        }
                        Keychain keychain = 1 [json_name = "keychain"];
                        message Md5 {
                           string md5_password = 1 [json_name = "md5-password"];
                           enum Md5SimpleFlag {
                              Md5SimpleFlag_CIPHER = 0;
                              Md5SimpleFlag_SIMPLE = 1;
                           };
                           Md5SimpleFlag md5_simple_flag = 2 [json_name = "md5-simple-flag"];
                        }
                        Md5 md5 = 2 [json_name = "md5"];
                     }
                     AuthenticationType authentication_type = 7 [json_name = "authentication-type"];
                     bool static_rpf_enable = 8 [json_name = "static-rpf-enable"];
                     bool sa_policy_export_enable = 9 [json_name = "sa-policy-export-enable"];
                     bool sa_policy_import_enable = 10 [json_name = "sa-policy-import-enable"];
                     bool sa_request_policy_enable = 11 [json_name = "sa-request-policy-enable"];
                     uint32 holdtime = 12 [json_name = "holdtime"];
                     uint32 keep_alive_interval = 13 [json_name = "keep-alive-interval"];
                     message Status {
                        string as_num = 1 [json_name = "as-num"];
                        enum State {
                           INVALID_ENUM_VALUE_State = 0;
                           State_DOWN = 1;
                           State_SHUTDOWN = 2;
                           State_CONNECT = 3;
                           State_LISTEN = 4;
                           State_UP = 5;
                        };
                        State state = 2 [json_name = "state"];
                        uint32 up_or_down_time = 3 [json_name = "up-or-down-time"];
                        string connection_interface_address = 4 [json_name = "connection-interface-address"];
                        uint32 send_message_count = 5 [json_name = "send-message-count"];
                        uint32 receive_message_count = 6 [json_name = "receive-message-count"];
                        uint32 discard_message_count = 7 [json_name = "discard-message-count"];
                        uint32 elapsed_time = 8 [json_name = "elapsed-time"];
                        uint32 sa_learned_count = 9 [json_name = "sa-learned-count"];
                        uint32 input_queue_size = 10 [json_name = "input-queue-size"];
                        uint32 output_queue_size = 11 [json_name = "output-queue-size"];
                        uint32 rpf_check_fail_count = 12 [json_name = "rpf-check-fail-count"];
                        uint32 receive_sa_message_count = 13 [json_name = "receive-sa-message-count"];
                        uint32 send_sa_message_count = 14 [json_name = "send-sa-message-count"];
                        uint32 receive_sa_requeset_count = 15 [json_name = "receive-sa-requeset-count"];
                        uint32 send_sa_request_count = 16 [json_name = "send-sa-request-count"];
                        uint32 receive_sa_response_count = 17 [json_name = "receive-sa-response-count"];
                        uint32 send_sa_response_count = 18 [json_name = "send-sa-response-count"];
                        uint32 receive_data_packet_count = 19 [json_name = "receive-data-packet-count"];
                        uint32 send_data_packet_count = 20 [json_name = "send-data-packet-count"];
                        uint32 reset_count = 21 [json_name = "reset-count"];
                        uint32 fsm_estab_trans = 22 [json_name = "fsm-estab-trans"];
                        uint32 fsm_estab_time = 23 [json_name = "fsm-estab-time"];
                        uint32 last_receive_message_time = 24 [json_name = "last-receive-message-time"];
                        uint32 remote_port = 25 [json_name = "remote-port"];
                        int32 local_port = 26 [json_name = "local-port"];
                        enum EncapType {
                           EncapType_ENCAPNONE = 0;
                           EncapType_ENCAPTCP = 1;
                        };
                        EncapType encap_type = 27 [json_name = "encap-type"];
                        uint32 connect_attempts = 28 [json_name = "connect-attempts"];
                     }
                     Status status = 14 [json_name = "status"];
                     message ControlMessageCounters {
                        uint32 sa_received = 1 [json_name = "sa-received"];
                        uint32 sa_sent = 2 [json_name = "sa-sent"];
                        uint32 sa_invalid = 3 [json_name = "sa-invalid"];
                        uint32 sa_request_received = 4 [json_name = "sa-request-received"];
                        uint32 sa_request_sent = 5 [json_name = "sa-request-sent"];
                        uint32 sa_request_invalid = 6 [json_name = "sa-request-invalid"];
                        uint32 sa_response_received = 7 [json_name = "sa-response-received"];
                        uint32 sa_response_sent = 8 [json_name = "sa-response-sent"];
                        uint32 sa_response_invalid = 9 [json_name = "sa-response-invalid"];
                        uint32 keep_alive_received = 10 [json_name = "keep-alive-received"];
                        uint32 keep_alive_sent = 11 [json_name = "keep-alive-sent"];
                        uint32 keep_alive_invalid = 12 [json_name = "keep-alive-invalid"];
                        uint32 notification_received = 13 [json_name = "notification-received"];
                        uint32 notification_sent = 14 [json_name = "notification-sent"];
                        uint32 notification_invalid = 15 [json_name = "notification-invalid"];
                        uint32 traceroute_request_received = 16 [json_name = "traceroute-request-received"];
                        uint32 traceroute_request_sent = 17 [json_name = "traceroute-request-sent"];
                        uint32 traceroute_request_invalid = 18 [json_name = "traceroute-request-invalid"];
                        uint32 traceroute_reply_received = 19 [json_name = "traceroute-reply-received"];
                        uint32 traceroute_reply_sent = 20 [json_name = "traceroute-reply-sent"];
                        uint32 traceroute_reply_invalid = 21 [json_name = "traceroute-reply-invalid"];
                        uint32 data_received = 22 [json_name = "data-received"];
                        uint32 data_sent = 23 [json_name = "data-sent"];
                        uint32 data_invalid = 24 [json_name = "data-invalid"];
                        uint32 unknown_received = 25 [json_name = "unknown-received"];
                        uint32 unknown_sent = 26 [json_name = "unknown-sent"];
                        uint32 unknown_invalid = 27 [json_name = "unknown-invalid"];
                     }
                     ControlMessageCounters control_message_counters = 15 [json_name = "control-message-counters"];
                  }
                  repeated Peer peer = 1 [json_name = "peer"];
               }
               Peers peers = 5 [json_name = "peers"];
            }
            Global global = 1 [json_name = "global"];
         }
         Msdp msdp = 23 [json_name = "msdp"];
         message Pim {
            message Rp {
               message StaticRps {
                  message StaticRp {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_IPV4UNICAST = 1;
                        Type_IPV6UNICAST = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     string address = 2 [json_name = "address"];
                     enum Preference {
                        Preference_NOTX_PREFER = 0;
                        Preference_PREFER = 1;
                     };
                     Preference preference = 3 [json_name = "preference"];
                  }
                  repeated StaticRp static_rp = 1 [json_name = "static-rp"];
               }
               StaticRps static_rps = 1 [json_name = "static-rps"];
               message ElectedBsrs {
                  message ElectedBsr {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_IPV4UNICAST = 1;
                        Type_IPV6UNICAST = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     string address = 2 [json_name = "address"];
                     enum Scope {
                        Scope_NOTX_SCOPED = 0;
                        Scope_GLOBAL = 1;
                        Scope_ADMINX_SCOPE = 2;
                     };
                     Scope scope = 3 [json_name = "scope"];
                     string group_addr = 4 [json_name = "group-addr"];
                     uint32 group_mask_length = 5 [json_name = "group-mask-length"];
                     uint32 priority = 6 [json_name = "priority"];
                     uint32 hash_lenth = 7 [json_name = "hash-lenth"];
                     enum FsmState {
                        FsmState_UNKNOWN = 0;
                        FsmState_ACCEPTX_ANY = 1;
                        FsmState_ACCEPTX_PREFERRED = 2;
                        FsmState_CANDIDATE = 3;
                        FsmState_PENDING = 4;
                        FsmState_ELECTED = 5;
                     };
                     FsmState fsm_state = 8 [json_name = "fsm-state"];
                     uint32 up_time = 9 [json_name = "up-time"];
                     uint32 expire_time = 10 [json_name = "expire-time"];
                     uint32 candidate_count = 11 [json_name = "candidate-count"];
                  }
                  repeated ElectedBsr elected_bsr = 1 [json_name = "elected-bsr"];
               }
               ElectedBsrs elected_bsrs = 2 [json_name = "elected-bsrs"];
               message CBsrs {
                  message CBsr {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_IPV4UNICAST = 1;
                        Type_IPV6UNICAST = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     string address = 2 [json_name = "address"];
                     enum Scope {
                        Scope_NOTX_SCOPED = 0;
                        Scope_GLOBAL = 1;
                        Scope_ADMINX_SCOPE = 2;
                     };
                     Scope scope = 3 [json_name = "scope"];
                     string group_addr = 4 [json_name = "group-addr"];
                     uint32 group_mask_length = 5 [json_name = "group-mask-length"];
                     uint32 priority = 6 [json_name = "priority"];
                     uint32 hash_lenth = 7 [json_name = "hash-lenth"];
                     enum FsmState {
                        FsmState_UNKNOWN = 0;
                        FsmState_ACCEPTX_ANY = 1;
                        FsmState_ACCEPTX_PREFERRED = 2;
                        FsmState_CANDIDATE = 3;
                        FsmState_PENDING = 4;
                        FsmState_ELECTED = 5;
                     };
                     FsmState fsm_state = 8 [json_name = "fsm-state"];
                     enum ValidFlag {
                        ValidFlag_VALID = 0;
                        ValidFlag_INVALID = 1;
                     };
                     ValidFlag valid_flag = 9 [json_name = "valid-flag"];
                  }
                  repeated CBsr c_bsr = 1 [json_name = "c-bsr"];
               }
               CBsrs c_bsrs = 3 [json_name = "c-bsrs"];
               message ElectedBsrRps {
                  message ElectedBsrRp {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_IPV4UNICAST = 1;
                        Type_IPV6UNICAST = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     string rp_addr = 2 [json_name = "rp-addr"];
                     bool is_local_addr = 3 [json_name = "is-local-addr"];
                     string group_addr = 4 [json_name = "group-addr"];
                     uint32 group_mask_length = 5 [json_name = "group-mask-length"];
                     uint32 priority = 6 [json_name = "priority"];
                     uint32 up_time = 7 [json_name = "up-time"];
                     uint32 expiry_time = 8 [json_name = "expiry-time"];
                     bool bidir_enable = 9 [json_name = "bidir-enable"];
                  }
                  repeated ElectedBsrRp elected_bsr_rp = 1 [json_name = "elected-bsr-rp"];
               }
               ElectedBsrRps elected_bsr_rps = 4 [json_name = "elected-bsr-rps"];
            }
            Rp rp = 1 [json_name = "rp"];
            message Protocol {
               message Instances {
                  message Instance {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_IPV4UNICAST = 1;
                        Type_IPV6UNICAST = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     uint32 assert_holdtime = 2 [json_name = "assert-holdtime"];
                     uint32 jp_holdtime = 3 [json_name = "jp-holdtime"];
                     uint32 probe_interval = 4 [json_name = "probe-interval"];
                     uint32 jp_timer_interval = 5 [json_name = "jp-timer-interval"];
                     uint32 dr_priority = 6 [json_name = "dr-priority"];
                     uint32 hello_holdtime = 7 [json_name = "hello-holdtime"];
                     uint32 hello_landelay = 8 [json_name = "hello-landelay"];
                     uint32 hello_interval = 9 [json_name = "hello-interval"];
                     uint32 hello_override = 10 [json_name = "hello-override"];
                     bool reg_checksum = 11 [json_name = "reg-checksum"];
                     uint32 reg_suppress_interval = 12 [json_name = "reg-suppress-interval"];
                     bool nbr_check_when_recv = 13 [json_name = "nbr-check-when-recv"];
                     bool nbr_check_when_send = 14 [json_name = "nbr-check-when-send"];
                     string ssm_policy_name = 15 [json_name = "ssm-policy-name"];
                     uint32 source_life_time = 16 [json_name = "source-life-time"];
                     uint32 spt_switch_check_interval = 17 [json_name = "spt-switch-check-interval"];
                     bool packaging_jp_disable = 18 [json_name = "packaging-jp-disable"];
                     uint32 state_refresh_interval = 19 [json_name = "state-refresh-interval"];
                     uint32 state_refresh_rate_limit = 20 [json_name = "state-refresh-rate-limit"];
                     uint32 state_refresh_ttl = 21 [json_name = "state-refresh-ttl"];
                     bool fast_reroute = 22 [json_name = "fast-reroute"];
                     bool hello_join_attr_enable = 23 [json_name = "hello-join-attr-enable"];
                     bool clone_inherit_enable = 24 [json_name = "clone-inherit-enable"];
                     bool gen_id_chang_enable = 25 [json_name = "gen-id-chang-enable"];
                     bool is_backup_rpf_switch_flow_based = 26 [json_name = "is-backup-rpf-switch-flow-based"];
                     message Vector {
                        bool compatible_standard_enable = 1 [json_name = "compatible-standard-enable"];
                     }
                     Vector vector = 27 [json_name = "vector"];
                  }
                  repeated Instance instance = 1 [json_name = "instance"];
               }
               Instances instances = 1 [json_name = "instances"];
               message Interfaces {
                  message Interface {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_IPV4UNICAST = 1;
                        Type_IPV6UNICAST = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     string if_name = 2 [json_name = "if-name"];
                     bool sm_enable = 3 [json_name = "sm-enable"];
                     uint32 dr_priority = 4 [json_name = "dr-priority"];
                     uint32 hello_interval = 5 [json_name = "hello-interval"];
                     uint32 hello_holdtime = 6 [json_name = "hello-holdtime"];
                     uint32 hello_override = 7 [json_name = "hello-override"];
                     uint32 hello_lan_delay = 8 [json_name = "hello-lan-delay"];
                     uint32 jp_timer_interval = 9 [json_name = "jp-timer-interval"];
                     uint32 jp_holdtime = 10 [json_name = "jp-holdtime"];
                     uint32 assert_holdtime = 11 [json_name = "assert-holdtime"];
                     bool require_gen_id = 12 [json_name = "require-gen-id"];
                     enum BsrBoundary {
                        BsrBoundary_NONE = 0;
                        BsrBoundary_BOTH = 1;
                        BsrBoundary_INCOMING = 2;
                     };
                     BsrBoundary bsr_boundary = 13 [json_name = "bsr-boundary"];
                     bool bfd_enable = 14 [json_name = "bfd-enable"];
                     uint32 bfd_multiplier = 15 [json_name = "bfd-multiplier"];
                     bool is_silent = 16 [json_name = "is-silent"];
                     bool dr_swt_delay_enable = 17 [json_name = "dr-swt-delay-enable"];
                     enum Mode {
                        Mode_SPARSE = 0;
                        Mode_DENSE = 1;
                     };
                     Mode mode = 18 [json_name = "mode"];
                     bool state_refresh_capable = 19 [json_name = "state-refresh-capable"];
                     uint32 graft_retry = 20 [json_name = "graft-retry"];
                     bool ignore_dr = 21 [json_name = "ignore-dr"];
                     bool ignore_assert = 22 [json_name = "ignore-assert"];
                     bool single_tag_fwd_enable = 23 [json_name = "single-tag-fwd-enable"];
                     message IfInfos {
                        uint32 pim_version = 1 [json_name = "pim-version"];
                        enum State {
                           State_DOWN = 0;
                           State_UP = 1;
                           State_BACKUP = 2;
                        };
                        State state = 2 [json_name = "state"];
                        uint32 nbr_count = 3 [json_name = "nbr-count"];
                        uint32 dr_priority = 4 [json_name = "dr-priority"];
                        string dr_addr = 5 [json_name = "dr-addr"];
                        uint32 hello_interval = 6 [json_name = "hello-interval"];
                        uint32 hello_holdtime = 7 [json_name = "hello-holdtime"];
                        uint32 assert_holdtime = 8 [json_name = "assert-holdtime"];
                        uint32 jp_interval = 9 [json_name = "jp-interval"];
                        uint32 jp_holdtime = 10 [json_name = "jp-holdtime"];
                        uint32 negotiated_msg_delay = 11 [json_name = "negotiated-msg-delay"];
                        uint32 negotiated_override_interval = 12 [json_name = "negotiated-override-interval"];
                        string gen_id = 13 [json_name = "gen-id"];
                        uint32 non_dr_nbr_count = 14 [json_name = "non-dr-nbr-count"];
                        uint32 non_landelay_nbr_count = 15 [json_name = "non-landelay-nbr-count"];
                        uint32 non_join_attribute_nbr_sount = 16 [json_name = "non-join-attribute-nbr-sount"];
                        bool join_attribute = 17 [json_name = "join-attribute"];
                        uint32 offer_interval = 18 [json_name = "offer-interval"];
                        uint32 election_robust_count = 19 [json_name = "election-robust-count"];
                        uint32 backoff_interval = 20 [json_name = "backoff-interval"];
                        string ipsec_name = 21 [json_name = "ipsec-name"];
                        enum IpsecType {
                           IpsecType_FORX_ALL = 0;
                           IpsecType_FORX_HELLO = 1;
                        };
                        IpsecType ipsec_type = 22 [json_name = "ipsec-type"];
                        enum PimMode {
                           PimMode_SPARSE = 0;
                           PimMode_DENSE = 1;
                        };
                        PimMode pim_mode = 23 [json_name = "pim-mode"];
                        bool state_refresh_enable = 24 [json_name = "state-refresh-enable"];
                        uint32 state_refresh_interval = 25 [json_name = "state-refresh-interval"];
                        uint32 graft_retry = 26 [json_name = "graft-retry"];
                        bool negotiated_state_refresh = 27 [json_name = "negotiated-state-refresh"];
                        bool ignore_dr_state = 28 [json_name = "ignore-dr-state"];
                        bool ignore_assert = 29 [json_name = "ignore-assert"];
                        bool snooping_enable = 30 [json_name = "snooping-enable"];
                     }
                     IfInfos if_infos = 24 [json_name = "if-infos"];
                     message Nbrs {
                        message Nbr {
                           string nbr_addr = 1 [json_name = "nbr-addr"];
                           uint32 up_time = 2 [json_name = "up-time"];
                           uint32 expire_time = 3 [json_name = "expire-time"];
                           bool dr_priority_existence = 4 [json_name = "dr-priority-existence"];
                           uint32 dr_priority = 5 [json_name = "dr-priority"];
                           bool gen_id_existence = 6 [json_name = "gen-id-existence"];
                           string gen_id = 7 [json_name = "gen-id"];
                           uint32 holdtime = 8 [json_name = "holdtime"];
                           bool lan_delay_existence = 9 [json_name = "lan-delay-existence"];
                           uint32 lan_delay = 10 [json_name = "lan-delay"];
                           uint32 override_interval = 11 [json_name = "override-interval"];
                           bool join_attribute = 12 [json_name = "join-attribute"];
                           bool bidir_enable = 13 [json_name = "bidir-enable"];
                           uint32 state_refresh_interval = 14 [json_name = "state-refresh-interval"];
                           message SecondAddrs {
                              message SecondAddr {
                                 string address = 1 [json_name = "address"];
                              }
                              repeated SecondAddr second_addr = 1 [json_name = "second-addr"];
                           }
                           SecondAddrs second_addrs = 15 [json_name = "second-addrs"];
                        }
                        repeated Nbr nbr = 1 [json_name = "nbr"];
                     }
                     Nbrs nbrs = 25 [json_name = "nbrs"];
                     message BfdSessions {
                        message BfdSession {
                           string nbr_addr = 1 [json_name = "nbr-addr"];
                           uint32 actual_minimum_tx_interval = 2 [json_name = "actual-minimum-tx-interval"];
                           uint32 actual_minimum_rx_interval = 3 [json_name = "actual-minimum-rx-interval"];
                           uint32 actual_multiplier = 4 [json_name = "actual-multiplier"];
                           uint32 local_port = 5 [json_name = "local-port"];
                           uint32 remote_port = 6 [json_name = "remote-port"];
                           enum BfdStatus {
                              BfdStatus_ADMINX_DOWN = 0;
                              BfdStatus_DOWN = 1;
                              BfdStatus_INIT = 2;
                              BfdStatus_UP = 3;
                              BfdStatus_BFDX_SESSIONX_NUMBERX_EXCEED = 4;
                           };
                           BfdStatus bfd_status = 7 [json_name = "bfd-status"];
                        }
                        repeated BfdSession bfd_session = 1 [json_name = "bfd-session"];
                     }
                     BfdSessions bfd_sessions = 26 [json_name = "bfd-sessions"];
                  }
                  repeated Interface interface = 1 [json_name = "interface"];
               }
               Interfaces interfaces = 2 [json_name = "interfaces"];
               message Routings {
                  message Routing {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_IPV4UNICAST = 1;
                        Type_IPV6UNICAST = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     string src_addr = 2 [json_name = "src-addr"];
                     string grp_addr = 3 [json_name = "grp-addr"];
                     enum Protocol {
                        INVALID_ENUM_VALUE_Protocol = 0;
                        Protocol_NONE = 1;
                        Protocol_PIMX_ASM = 2;
                        Protocol_PIMX_DM = 3;
                        Protocol_PIMX_BIDIR = 4;
                        Protocol_PIMX_SSM = 5;
                        Protocol_OTHER = 6;
                     };
                     Protocol protocol = 4 [json_name = "protocol"];
                     enum RpModeType {
                        INVALID_ENUM_VALUE_RpModeType = 0;
                        RpModeType_FIXED = 1;
                        RpModeType_STATIC = 2;
                        RpModeType_CONFIGX_SSM = 3;
                        RpModeType_BSR = 4;
                        RpModeType_AUTOX_RP = 5;
                        RpModeType_EMBEDDED = 6;
                        RpModeType_OTHER = 7;
                     };
                     RpModeType rp_mode_type = 5 [json_name = "rp-mode-type"];
                     string rp_addr = 6 [json_name = "rp-addr"];
                     bool rp_is_local_addr = 7 [json_name = "rp-is-local-addr"];
                     string dg_flag = 8 [json_name = "dg-flag"];
                     uint32 sg_uptime = 9 [json_name = "sg-uptime"];
                     string inbound_interface = 10 [json_name = "inbound-interface"];
                     string src_vrf_name = 11 [json_name = "src-vrf-name"];
                     string rpf_vector_rd = 12 [json_name = "rpf-vector-rd"];
                     string rpf_vector_addr = 13 [json_name = "rpf-vector-addr"];
                     string elected_vector_rd = 14 [json_name = "elected-vector-rd"];
                     string elected_vector_addr = 15 [json_name = "elected-vector-addr"];
                     string up_nbr_addr = 16 [json_name = "up-nbr-addr"];
                     string rpf_addr = 17 [json_name = "rpf-addr"];
                     string reference_addr = 18 [json_name = "reference-addr"];
                     uint32 rpf_mask_len = 19 [json_name = "rpf-mask-len"];
                     uint32 rpf_metric = 20 [json_name = "rpf-metric"];
                     uint32 rpf_metric_priority = 21 [json_name = "rpf-metric-priority"];
                     string backup_inbound_if = 22 [json_name = "backup-inbound-if"];
                     string backup_nbr_addr = 23 [json_name = "backup-nbr-addr"];
                     string backup_rpf_addr = 24 [json_name = "backup-rpf-addr"];
                     enum UpStatus {
                        INVALID_ENUM_VALUE_UpStatus = 0;
                        UpStatus_NOTX_JOINED = 1;
                        UpStatus_JOINED = 2;
                        UpStatus_FORWARD = 3;
                        UpStatus_PRUNED = 4;
                        UpStatus_ACKX_PEND = 5;
                     };
                     UpStatus up_status = 25 [json_name = "up-status"];
                     uint32 upstream_expiration_time = 26 [json_name = "upstream-expiration-time"];
                     enum RptStatus {
                        INVALID_ENUM_VALUE_RptStatus = 0;
                        RptStatus_NOTX_PRUNED = 1;
                        RptStatus_NOTX_JOINED = 2;
                        RptStatus_PRUNED = 3;
                        RptStatus_MAX = 4;
                     };
                     RptStatus rpt_status = 27 [json_name = "rpt-status"];
                     uint32 rpt_timeout_period = 28 [json_name = "rpt-timeout-period"];
                     enum RegistrationStatus {
                        INVALID_ENUM_VALUE_RegistrationStatus = 0;
                        RegistrationStatus_NOINFO = 1;
                        RegistrationStatus_JOIN = 2;
                        RegistrationStatus_JOINX_PENDING = 3;
                        RegistrationStatus_PRUNE = 4;
                     };
                     RegistrationStatus registration_status = 29 [json_name = "registration-status"];
                     uint32 registration_stop_time = 30 [json_name = "registration-stop-time"];
                     uint32 graft_retry_expiration_time = 31 [json_name = "graft-retry-expiration-time"];
                     uint32 prune_limit_expiration_time = 32 [json_name = "prune-limit-expiration-time"];
                     uint32 override_expiration_time = 33 [json_name = "override-expiration-time"];
                     uint32 backup_upstream_expiration_time = 34 [json_name = "backup-upstream-expiration-time"];
                     uint32 user_id = 35 [json_name = "user-id"];
                     string original_src_addr = 36 [json_name = "original-src-addr"];
                     message Downstreams {
                        message Downstream {
                           string if_name = 1 [json_name = "if-name"];
                           string protocl_type = 2 [json_name = "protocl-type"];
                           uint32 up_time = 3 [json_name = "up-time"];
                           uint32 timeout_period = 4 [json_name = "timeout-period"];
                           bool dr_status = 5 [json_name = "dr-status"];
                           enum Downstream {
                              INVALID_ENUM_VALUE_Downstream = 0;
                              Downstream_NOINFO = 1;
                              Downstream_PRUNEX_PENDING = 2;
                              Downstream_JOINED = 3;
                              Downstream_PRUNED = 4;
                           };
                           Downstream downstream = 6 [json_name = "downstream"];
                           uint32 downstream_ppt = 7 [json_name = "downstream-ppt"];
                           enum AssertStateMachine {
                              INVALID_ENUM_VALUE_AssertStateMachine = 0;
                              AssertStateMachine_NOINFO = 1;
                              AssertStateMachine_WINNER = 2;
                              AssertStateMachine_LOSER = 3;
                           };
                           AssertStateMachine assert_state_machine = 8 [json_name = "assert-state-machine"];
                           uint32 assert_timeout_period = 9 [json_name = "assert-timeout-period"];
                           string assert_winner_addr = 10 [json_name = "assert-winner-addr"];
                           uint32 assert_winner_metric = 11 [json_name = "assert-winner-metric"];
                           uint32 assert_winner_metric_priority = 12 [json_name = "assert-winner-metric-priority"];
                           bool local_receiver_exist = 13 [json_name = "local-receiver-exist"];
                           enum RptStatus {
                              INVALID_ENUM_VALUE_RptStatus = 0;
                              RptStatus_NOINFO = 1;
                              RptStatus_PRUNED = 2;
                              RptStatus_PRUNEX_PENDING = 3;
                              RptStatus_MAX = 4;
                           };
                           RptStatus rpt_status = 14 [json_name = "rpt-status"];
                           uint32 rpt_state_machine_ppt = 15 [json_name = "rpt-state-machine-ppt"];
                           uint32 rpt_timeout_period = 16 [json_name = "rpt-timeout-period"];
                           enum VectorAttributeStatus {
                              VectorAttributeStatus_UNSAFE = 0;
                              VectorAttributeStatus_SAFE = 1;
                           };
                           VectorAttributeStatus vector_attribute_status = 17 [json_name = "vector-attribute-status"];
                           string elected_vector = 18 [json_name = "elected-vector"];
                           string elected_vector_nbr = 19 [json_name = "elected-vector-nbr"];
                           uint32 vector_num = 20 [json_name = "vector-num"];
                           bool ignore_dr_status = 21 [json_name = "ignore-dr-status"];
                           message Vectors {
                              message Vector {
                                 string nbr_addr = 1 [json_name = "nbr-addr"];
                                 string vector_addr = 2 [json_name = "vector-addr"];
                                 string vector_rd = 3 [json_name = "vector-rd"];
                                 uint32 timeout_period = 4 [json_name = "timeout-period"];
                                 message VectorHopAddrs {
                                    message VectorHopAddr {
                                       string vector_addr = 1 [json_name = "vector-addr"];
                                       uint32 sequence_num = 2 [json_name = "sequence-num"];
                                    }
                                    repeated VectorHopAddr vector_hop_addr = 1 [json_name = "vector-hop-addr"];
                                 }
                                 VectorHopAddrs vector_hop_addrs = 5 [json_name = "vector-hop-addrs"];
                              }
                              repeated Vector vector = 1 [json_name = "vector"];
                           }
                           Vectors vectors = 22 [json_name = "vectors"];
                        }
                        repeated Downstream downstream = 1 [json_name = "downstream"];
                     }
                     Downstreams downstreams = 37 [json_name = "downstreams"];
                     message RecvVrfs {
                        message RecvVrf {
                           string vrf_name = 1 [json_name = "vrf-name"];
                        }
                        repeated RecvVrf recv_vrf = 1 [json_name = "recv-vrf"];
                     }
                     RecvVrfs recv_vrfs = 38 [json_name = "recv-vrfs"];
                  }
                  repeated Routing routing = 1 [json_name = "routing"];
               }
               Routings routings = 3 [json_name = "routings"];
            }
            Protocol protocol = 2 [json_name = "protocol"];
         }
         Pim pim = 24 [json_name = "pim"];
         message Ospfv2 {
            message Sites {
               message Site {
                  uint32 process_id = 1 [json_name = "process-id"];
                  string router_id = 2 [json_name = "router-id"];
                  bool opaque = 3 [json_name = "opaque"];
                  bool rfc1583_compatible = 4 [json_name = "rfc1583-compatible"];
                  bool silent_all_interface = 5 [json_name = "silent-all-interface"];
                  bool retransmission_limit = 6 [json_name = "retransmission-limit"];
                  uint32 retransmission_limit_value = 7 [json_name = "retransmission-limit-value"];
                  bool safe_sync = 8 [json_name = "safe-sync"];
                  bool traffic_adj = 9 [json_name = "traffic-adj"];
                  bool traffic_adv = 10 [json_name = "traffic-adv"];
                  bool local_mt = 11 [json_name = "local-mt"];
                  bool advertise_mpls_lsr_id = 12 [json_name = "advertise-mpls-lsr-id"];
                  uint32 advertise_mpls_lsr_id_cost = 13 [json_name = "advertise-mpls-lsr-id-cost"];
                  bool suppress_reachability = 14 [json_name = "suppress-reachability"];
                  bool lsa_refresh = 15 [json_name = "lsa-refresh"];
                  enum MplsLdpAutoFlag {
                     MplsLdpAutoFlag_NONE = 0;
                     MplsLdpAutoFlag_ENABLE = 1;
                  };
                  MplsLdpAutoFlag mpls_ldp_auto_flag = 16 [json_name = "mpls-ldp-auto-flag"];
                  uint32 lsdb_overflow_limit = 17 [json_name = "lsdb-overflow-limit"];
                  bool peer_flapping_suppress = 18 [json_name = "peer-flapping-suppress"];
                  message PrivateNet {
                     bool eca_route = 1 [json_name = "eca-route"];
                     message RouteTag {
                        message Disable {
                           bool disable = 1 [json_name = "disable"];
                        }
                        Disable disable = 1 [json_name = "disable"];
                        message Value {
                           uint32 value = 1 [json_name = "value"];
                        }
                        Value value = 2 [json_name = "value"];
                     }
                     RouteTag route_tag = 2 [json_name = "route-tag"];
                     bool vpn_capability = 3 [json_name = "vpn-capability"];
                  }
                  PrivateNet private_net = 19 [json_name = "private-net"];
                  message Bandwidth {
                     bool config_bw_enable = 1 [json_name = "config-bw-enable"];
                     uint32 reference_value = 2 [json_name = "reference-value"];
                  }
                  Bandwidth bandwidth = 20 [json_name = "bandwidth"];
                  message Timer {
                     message LsaArrival {
                        message TimerType {
                           message Timer {
                              uint32 interval = 1 [json_name = "interval"];
                           }
                           Timer timer = 1 [json_name = "timer"];
                           message IntelligentTimer {
                              uint32 max_interval = 1 [json_name = "max-interval"];
                              uint32 start_interval = 2 [json_name = "start-interval"];
                              uint32 hold_interval = 3 [json_name = "hold-interval"];
                           }
                           IntelligentTimer intelligent_timer = 2 [json_name = "intelligent-timer"];
                        }
                        TimerType timer_type = 1 [json_name = "timer-type"];
                     }
                     LsaArrival lsa_arrival = 1 [json_name = "lsa-arrival"];
                     message LsaOriginate {
                        uint32 other_type_interval = 1 [json_name = "other-type-interval"];
                        message TimerType {
                           message IntelligentTimer {
                              uint32 max_interval = 1 [json_name = "max-interval"];
                              uint32 start_interval = 2 [json_name = "start-interval"];
                              uint32 hold_interval = 3 [json_name = "hold-interval"];
                           }
                           IntelligentTimer intelligent_timer = 1 [json_name = "intelligent-timer"];
                        }
                        TimerType timer_type = 2 [json_name = "timer-type"];
                     }
                     LsaOriginate lsa_originate = 2 [json_name = "lsa-originate"];
                     message SpfSchedule {
                        message ScheduleType {
                           message Timer {
                              uint32 interval = 1 [json_name = "interval"];
                           }
                           Timer timer = 1 [json_name = "timer"];
                           message IntelligentTimer {
                              uint32 max_interval = 1 [json_name = "max-interval"];
                              uint32 start_interval = 2 [json_name = "start-interval"];
                              uint32 hold_interval = 3 [json_name = "hold-interval"];
                              bool conserv_flag = 4 [json_name = "conserv-flag"];
                           }
                           IntelligentTimer intelligent_timer = 2 [json_name = "intelligent-timer"];
                           message Millisecond {
                              uint32 millisecond = 1 [json_name = "millisecond"];
                           }
                           Millisecond millisecond = 3 [json_name = "millisecond"];
                        }
                        ScheduleType schedule_type = 1 [json_name = "schedule-type"];
                     }
                     SpfSchedule spf_schedule = 3 [json_name = "spf-schedule"];
                  }
                  Timer timer = 21 [json_name = "timer"];
                  message Bfd {
                     bool enable = 1 [json_name = "enable"];
                     uint32 min_rx = 2 [json_name = "min-rx"];
                     uint32 min_tx = 3 [json_name = "min-tx"];
                     uint32 detect_multiplier = 4 [json_name = "detect-multiplier"];
                     bool frr_binding = 5 [json_name = "frr-binding"];
                  }
                  Bfd bfd = 22 [json_name = "bfd"];
                  message StubRouter {
                     enum Flag {
                        Flag_NOX_CONFIG = 0;
                        Flag_STUBX_ONX_HAND = 1;
                        Flag_STUBX_ONX_BOOT = 2;
                     };
                     Flag flag = 1 [json_name = "flag"];
                     uint32 interval = 2 [json_name = "interval"];
                     bool include_stub = 3 [json_name = "include-stub"];
                     bool external_lsa = 4 [json_name = "external-lsa"];
                     uint32 external_cost = 5 [json_name = "external-cost"];
                     bool summary_lsa = 6 [json_name = "summary-lsa"];
                     uint32 summary_cost = 7 [json_name = "summary-cost"];
                  }
                  StubRouter stub_router = 23 [json_name = "stub-router"];
                  message BgpLs {
                     bool enable = 1 [json_name = "enable"];
                     uint32 identifier = 2 [json_name = "identifier"];
                  }
                  BgpLs bgp_ls = 24 [json_name = "bgp-ls"];
                  message ImportLimit {
                     uint32 max_number = 1 [json_name = "max-number"];
                     uint32 threshold_upper = 2 [json_name = "threshold-upper"];
                     uint32 threshold_lower = 3 [json_name = "threshold-lower"];
                  }
                  ImportLimit import_limit = 25 [json_name = "import-limit"];
                  message SpfControl {
                     uint32 max_load_balancing = 1 [json_name = "max-load-balancing"];
                  }
                  SpfControl spf_control = 26 [json_name = "spf-control"];
                  message DefaultPara {
                     message Cost {
                        message CostValue {
                           uint32 cost_value = 1 [json_name = "cost-value"];
                        }
                        CostValue cost_value = 1 [json_name = "cost-value"];
                        message CostInheritMetric {
                           bool cost_inherit_metric = 1 [json_name = "cost-inherit-metric"];
                        }
                        CostInheritMetric cost_inherit_metric = 2 [json_name = "cost-inherit-metric"];
                     }
                     Cost cost = 1 [json_name = "cost"];
                     uint32 tag = 2 [json_name = "tag"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_TYPE1 = 1;
                        Type_TYPE2 = 2;
                     };
                     Type type = 3 [json_name = "type"];
                  }
                  DefaultPara default_para = 27 [json_name = "default-para"];
                  message AvoidMicroLoop {
                     bool frr_enable = 1 [json_name = "frr-enable"];
                     uint32 frr_rib_update_delay = 2 [json_name = "frr-rib-update-delay"];
                     bool te_tunnel_enable = 3 [json_name = "te-tunnel-enable"];
                     uint32 te_tunnel_rib_update_delay = 4 [json_name = "te-tunnel-rib-update-delay"];
                  }
                  AvoidMicroLoop avoid_micro_loop = 28 [json_name = "avoid-micro-loop"];
                  message DefaultRoute {
                     message Summary {
                        message Summary {
                           uint32 cost = 1 [json_name = "cost"];
                        }
                        Summary summary = 1 [json_name = "summary"];
                     }
                     Summary summary = 1 [json_name = "summary"];
                     message NoSummary {
                        message NoSummary {
                           bool enable = 1 [json_name = "enable"];
                           uint32 cost = 2 [json_name = "cost"];
                           enum Type {
                              INVALID_ENUM_VALUE_Type = 0;
                              Type_TYPE1 = 1;
                              Type_TYPE2 = 2;
                           };
                           Type type = 3 [json_name = "type"];
                           uint32 distribute_delay = 4 [json_name = "distribute-delay"];
                           message Mode {
                              message PermitCalculateOther {
                                 bool permit_calculate_other = 1 [json_name = "permit-calculate-other"];
                              }
                              PermitCalculateOther permit_calculate_other = 1 [json_name = "permit-calculate-other"];
                              message Always {
                                 bool always = 1 [json_name = "always"];
                              }
                              Always always = 2 [json_name = "always"];
                           }
                           Mode mode = 5 [json_name = "mode"];
                           message PolicyType {
                              message RoutePolicyName {
                                 string route_policy_name = 1 [json_name = "route-policy-name"];
                              }
                              RoutePolicyName route_policy_name = 1 [json_name = "route-policy-name"];
                              message RouteFilterName {
                                 string route_filter_name = 1 [json_name = "route-filter-name"];
                              }
                              RouteFilterName route_filter_name = 2 [json_name = "route-filter-name"];
                           }
                           PolicyType policy_type = 6 [json_name = "policy-type"];
                        }
                        NoSummary no_summary = 1 [json_name = "no-summary"];
                     }
                     NoSummary no_summary = 2 [json_name = "no-summary"];
                  }
                  DefaultRoute default_route = 29 [json_name = "default-route"];
                  message RoutePreferences {
                     message RoutePreference {
                        enum RouteType {
                           INVALID_ENUM_VALUE_RouteType = 0;
                           RouteType_DEFAULT = 1;
                           RouteType_ASE = 2;
                           RouteType_INTRA = 3;
                           RouteType_INTER = 4;
                        };
                        RouteType route_type = 1 [json_name = "route-type"];
                        uint32 preference = 2 [json_name = "preference"];
                        message PolicyType {
                           message RoutePolicyName {
                              string route_policy_name = 1 [json_name = "route-policy-name"];
                           }
                           RoutePolicyName route_policy_name = 1 [json_name = "route-policy-name"];
                           message RouteFilterName {
                              string route_filter_name = 1 [json_name = "route-filter-name"];
                           }
                           RouteFilterName route_filter_name = 2 [json_name = "route-filter-name"];
                        }
                        PolicyType policy_type = 3 [json_name = "policy-type"];
                     }
                     repeated RoutePreference route_preference = 1 [json_name = "route-preference"];
                  }
                  RoutePreferences route_preferences = 30 [json_name = "route-preferences"];
                  message EcmpPrefer {
                     bool te_tunnel = 1 [json_name = "te-tunnel"];
                     bool intact = 2 [json_name = "intact"];
                  }
                  EcmpPrefer ecmp_prefer = 31 [json_name = "ecmp-prefer"];
                  message Frr {
                     bool enable = 1 [json_name = "enable"];
                     bool lfa_enable = 2 [json_name = "lfa-enable"];
                     bool tilfa_enable = 3 [json_name = "tilfa-enable"];
                     message Tiebreaker {
                        uint32 node_protect = 1 [json_name = "node-protect"];
                        uint32 lowest_cost = 2 [json_name = "lowest-cost"];
                     }
                     Tiebreaker tiebreaker = 4 [json_name = "tiebreaker"];
                  }
                  Frr frr = 32 [json_name = "frr"];
                  message GracefulRestart {
                     message GrIetf {
                        message GrIetf {
                           message HelperRoleMode {
                              message Never {
                                 bool never = 1 [json_name = "never"];
                              }
                              Never never = 1 [json_name = "never"];
                              message WorkMode {
                                 bool planned_only = 1 [json_name = "planned-only"];
                                 bool ignore_external_lsa = 2 [json_name = "ignore-external-lsa"];
                                 message MatchMode {
                                    message AclNameOrNum {
                                       string acl_name_or_num = 1 [json_name = "acl-name-or-num"];
                                    }
                                    AclNameOrNum acl_name_or_num = 1 [json_name = "acl-name-or-num"];
                                    message IpPrefixName {
                                       string ip_prefix_name = 1 [json_name = "ip-prefix-name"];
                                    }
                                    IpPrefixName ip_prefix_name = 2 [json_name = "ip-prefix-name"];
                                 }
                                 MatchMode match_mode = 3 [json_name = "match-mode"];
                              }
                              WorkMode work_mode = 2 [json_name = "work-mode"];
                           }
                           HelperRoleMode helper_role_mode = 1 [json_name = "helper-role-mode"];
                        }
                        GrIetf gr_ietf = 1 [json_name = "gr-ietf"];
                     }
                     GrIetf gr_ietf = 1 [json_name = "gr-ietf"];
                     message GrNonIetf {
                        message GrNonIetf {
                        }
                        GrNonIetf gr_non_ietf = 1 [json_name = "gr-non-ietf"];
                     }
                     GrNonIetf gr_non_ietf = 2 [json_name = "gr-non-ietf"];
                  }
                  GracefulRestart graceful_restart = 33 [json_name = "graceful-restart"];
                  message FloodControl {
                     uint32 number = 1 [json_name = "number"];
                     uint32 interval = 2 [json_name = "interval"];
                  }
                  FloodControl flood_control = 34 [json_name = "flood-control"];
                  message DnBit {
                     bool set_ase = 1 [json_name = "set-ase"];
                     bool set_nssa = 2 [json_name = "set-nssa"];
                     bool set_summary = 3 [json_name = "set-summary"];
                     bool check_ase = 4 [json_name = "check-ase"];
                     bool check_nssa = 5 [json_name = "check-nssa"];
                     bool check_summary = 6 [json_name = "check-summary"];
                     message SummaryRouterIds {
                        message SummaryRouterId {
                           string router_id = 1 [json_name = "router-id"];
                        }
                        repeated SummaryRouterId summary_router_id = 1 [json_name = "summary-router-id"];
                     }
                     SummaryRouterIds summary_router_ids = 7 [json_name = "summary-router-ids"];
                  }
                  DnBit dn_bit = 35 [json_name = "dn-bit"];
                  message ImportRoutes {
                     message ImportRoute {
                        enum Protocol {
                           INVALID_ENUM_VALUE_Protocol = 0;
                           Protocol_DIRECT = 1;
                           Protocol_OSPF = 2;
                           Protocol_ISIS = 3;
                           Protocol_STATIC = 4;
                           Protocol_RIP = 5;
                           Protocol_BGP = 6;
                           Protocol_UNR = 11;
                        };
                        Protocol protocol = 1 [json_name = "protocol"];
                        uint32 process_id = 2 [json_name = "process-id"];
                        uint32 cost = 3 [json_name = "cost"];
                        uint32 tag = 4 [json_name = "tag"];
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_TYPE1 = 1;
                           Type_TYPE2 = 2;
                        };
                        Type type = 5 [json_name = "type"];
                        bool permit_ibgp = 6 [json_name = "permit-ibgp"];
                        message PolicyType {
                           message RoutePolicyName {
                              string route_policy_name = 1 [json_name = "route-policy-name"];
                           }
                           RoutePolicyName route_policy_name = 1 [json_name = "route-policy-name"];
                        }
                        PolicyType policy_type = 7 [json_name = "policy-type"];
                     }
                     repeated ImportRoute import_route = 1 [json_name = "import-route"];
                  }
                  ImportRoutes import_routes = 36 [json_name = "import-routes"];
                  message Areas {
                     message Area {
                        string area_id = 1 [json_name = "area-id"];
                        enum AreaType {
                           INVALID_ENUM_VALUE_AreaType = 0;
                           AreaType_NORMAL = 1;
                           AreaType_STUB = 2;
                           AreaType_NSSA = 3;
                        };
                        AreaType area_type = 2 [json_name = "area-type"];
                        string description = 3 [json_name = "description"];
                        message Networks {
                           message Network {
                              string ip_address = 1 [json_name = "ip-address"];
                              string mask = 2 [json_name = "mask"];
                              string description = 3 [json_name = "description"];
                           }
                           repeated Network network = 1 [json_name = "network"];
                        }
                        Networks networks = 4 [json_name = "networks"];
                        message LdpSync {
                           bool enable = 1 [json_name = "enable"];
                           message HoldCostMax {
                              message Timer {
                                 uint32 timer = 1 [json_name = "timer"];
                              }
                              Timer timer = 1 [json_name = "timer"];
                              message Infinite {
                                 bool infinite = 1 [json_name = "infinite"];
                              }
                              Infinite infinite = 2 [json_name = "infinite"];
                           }
                           HoldCostMax hold_cost_max = 2 [json_name = "hold-cost-max"];
                        }
                        LdpSync ldp_sync = 5 [json_name = "ldp-sync"];
                        message MplsTe {
                           bool enable = 1 [json_name = "enable"];
                           bool standard_complying = 2 [json_name = "standard-complying"];
                        }
                        MplsTe mpls_te = 6 [json_name = "mpls-te"];
                        message Authentication {
                           enum Mode {
                              Mode_NONE = 0;
                              Mode_KEYCHAIN = 1;
                              Mode_HMACX_SHA256 = 2;
                              Mode_SIMPLE = 32;
                              Mode_MD5 = 64;
                              Mode_HMACX_MD5 = 128;
                           };
                           Mode mode = 1 [json_name = "mode"];
                           string auth_text_simple = 2 [json_name = "auth-text-simple"];
                           uint32 key_id = 3 [json_name = "key-id"];
                           string auth_text_md5 = 4 [json_name = "auth-text-md5"];
                           string key_chain_name = 5 [json_name = "key-chain-name"];
                        }
                        Authentication authentication = 7 [json_name = "authentication"];
                        message Interfaces {
                           message Interface {
                              string name = 1 [json_name = "name"];
                              enum NetworkType {
                                 INVALID_ENUM_VALUE_NetworkType = 0;
                                 NetworkType_BROADCAST = 1;
                                 NetworkType_NBMA = 2;
                                 NetworkType_P2P = 3;
                                 NetworkType_P2MP = 5;
                              };
                              NetworkType network_type = 2 [json_name = "network-type"];
                              enum PeerIpIgnore {
                                 PeerIpIgnore_DISABLE = 0;
                                 PeerIpIgnore_ENABLE = 1;
                              };
                              PeerIpIgnore peer_ip_ignore = 3 [json_name = "peer-ip-ignore"];
                              int32 transmit_delay = 4 [json_name = "transmit-delay"];
                              bool mtu_enable = 5 [json_name = "mtu-enable"];
                              int32 dr_priority = 6 [json_name = "dr-priority"];
                              uint32 cost = 7 [json_name = "cost"];
                              bool smart_discover = 8 [json_name = "smart-discover"];
                              bool p2mp_mask_ignore = 9 [json_name = "p2mp-mask-ignore"];
                              bool ldp_sync_block = 10 [json_name = "ldp-sync-block"];
                              bool ldp_sync_enable = 11 [json_name = "ldp-sync-enable"];
                              enum SuppressReachability {
                                 SuppressReachability_DISABLE = 0;
                                 SuppressReachability_ENABLE = 1;
                                 SuppressReachability_NOTX_CONFIGURED = 2;
                              };
                              SuppressReachability suppress_reachability = 12 [json_name = "suppress-reachability"];
                              enum MplsLdpAutoFlag {
                                 MplsLdpAutoFlag_DISABLE = 0;
                                 MplsLdpAutoFlag_NONE = 1;
                              };
                              MplsLdpAutoFlag mpls_ldp_auto_flag = 13 [json_name = "mpls-ldp-auto-flag"];
                              uint32 peer_hold_max_timer = 14 [json_name = "peer-hold-max-timer"];
                              message Frr {
                                 bool frr_disable = 1 [json_name = "frr-disable"];
                                 bool rlfa_disable = 2 [json_name = "rlfa-disable"];
                                 message TiLfa {
                                    bool disable = 1 [json_name = "disable"];
                                 }
                                 TiLfa ti_lfa = 3 [json_name = "ti-lfa"];
                              }
                              Frr frr = 15 [json_name = "frr"];
                              message Timer {
                                 int32 hello_interval = 1 [json_name = "hello-interval"];
                                 int32 dead_interval = 2 [json_name = "dead-interval"];
                                 uint32 wait_interval = 3 [json_name = "wait-interval"];
                                 int32 poll_interval = 4 [json_name = "poll-interval"];
                                 int32 retransmit_interval = 5 [json_name = "retransmit-interval"];
                              }
                              Timer timer = 16 [json_name = "timer"];
                              message LdpSync {
                                 uint32 hold_down_timer = 1 [json_name = "hold-down-timer"];
                                 message HoldCostMax {
                                    message Timer {
                                       uint32 timer = 1 [json_name = "timer"];
                                    }
                                    Timer timer = 1 [json_name = "timer"];
                                    message Infinite {
                                       bool infinite = 1 [json_name = "infinite"];
                                    }
                                    Infinite infinite = 2 [json_name = "infinite"];
                                 }
                                 HoldCostMax hold_cost_max = 2 [json_name = "hold-cost-max"];
                              }
                              LdpSync ldp_sync = 17 [json_name = "ldp-sync"];
                              message Bfd {
                                 bool enable = 1 [json_name = "enable"];
                                 bool block = 2 [json_name = "block"];
                                 uint32 detect_multiplier = 3 [json_name = "detect-multiplier"];
                                 uint32 min_tx = 4 [json_name = "min-tx"];
                                 uint32 min_rx = 5 [json_name = "min-rx"];
                                 bool frr_binding = 6 [json_name = "frr-binding"];
                                 message IncrCost {
                                    message IncrCostBlock {
                                       bool incr_cost_block = 1 [json_name = "incr-cost-block"];
                                    }
                                    IncrCostBlock incr_cost_block = 1 [json_name = "incr-cost-block"];
                                    message IncrCostValue {
                                       uint32 incr_cost_value = 1 [json_name = "incr-cost-value"];
                                    }
                                    IncrCostValue incr_cost_value = 2 [json_name = "incr-cost-value"];
                                 }
                                 IncrCost incr_cost = 7 [json_name = "incr-cost"];
                                 bool per_link_flag = 8 [json_name = "per-link-flag"];
                                 bool one_arm_echo_flag = 9 [json_name = "one-arm-echo-flag"];
                              }
                              Bfd bfd = 18 [json_name = "bfd"];
                              message Authentication {
                                 enum Mode {
                                    Mode_NONE = 0;
                                    Mode_KEYCHAIN = 1;
                                    Mode_HMACX_SHA256 = 2;
                                    Mode_NULL = 16;
                                    Mode_SIMPLE = 32;
                                    Mode_MD5 = 64;
                                    Mode_HMACX_MD5 = 128;
                                 };
                                 Mode mode = 1 [json_name = "mode"];
                                 string auth_text_simple = 2 [json_name = "auth-text-simple"];
                                 uint32 key_id = 3 [json_name = "key-id"];
                                 string auth_text_md5 = 4 [json_name = "auth-text-md5"];
                                 string key_chain_name = 5 [json_name = "key-chain-name"];
                              }
                              Authentication authentication = 19 [json_name = "authentication"];
                              message FilterLsaOut {
                                 message Type {
                                    message Total {
                                       bool all_flag = 1 [json_name = "all-flag"];
                                    }
                                    Total total = 1 [json_name = "total"];
                                    message Other {
                                       bool sum_flag = 1 [json_name = "sum-flag"];
                                       message SumFilter {
                                          message Acl {
                                             string sum_name = 1 [json_name = "sum-name"];
                                          }
                                          Acl acl = 1 [json_name = "acl"];
                                       }
                                       SumFilter sum_filter = 2 [json_name = "sum-filter"];
                                       bool ase_flag = 3 [json_name = "ase-flag"];
                                       message AseFilter {
                                          message Acl {
                                             string ase_name = 1 [json_name = "ase-name"];
                                          }
                                          Acl acl = 1 [json_name = "acl"];
                                       }
                                       AseFilter ase_filter = 4 [json_name = "ase-filter"];
                                       bool nssa_flag = 5 [json_name = "nssa-flag"];
                                       message NssaFilter {
                                          message Acl {
                                             string nssa_name = 1 [json_name = "nssa-name"];
                                          }
                                          Acl acl = 1 [json_name = "acl"];
                                       }
                                       NssaFilter nssa_filter = 6 [json_name = "nssa-filter"];
                                    }
                                    Other other = 2 [json_name = "other"];
                                 }
                                 Type type = 1 [json_name = "type"];
                              }
                              FilterLsaOut filter_lsa_out = 20 [json_name = "filter-lsa-out"];
                              message SuppressFlapping {
                                 message Peer {
                                    bool enable = 1 [json_name = "enable"];
                                    uint32 detect_interval = 2 [json_name = "detect-interval"];
                                    uint32 threshold = 3 [json_name = "threshold"];
                                    uint32 resume_interval = 4 [json_name = "resume-interval"];
                                    uint32 hold_down_interval = 5 [json_name = "hold-down-interval"];
                                    bool hold_max_cost = 6 [json_name = "hold-max-cost"];
                                 }
                                 Peer peer = 1 [json_name = "peer"];
                              }
                              SuppressFlapping suppress_flapping = 21 [json_name = "suppress-flapping"];
                              message DispData {
                                 bool suppress_reach_block = 1 [json_name = "suppress-reach-block"];
                                 bool silent_enable = 2 [json_name = "silent-enable"];
                                 string dr = 3 [json_name = "dr"];
                                 string bdr = 4 [json_name = "bdr"];
                                 enum State {
                                    State_DOWN = 0;
                                    State_WAITING = 1;
                                    State_P2P = 2;
                                    State_DR = 3;
                                    State_BDR = 4;
                                    State_DRX_OTHER = 5;
                                    State_LOOPBACK = 6;
                                 };
                                 State state = 5 [json_name = "state"];
                                 uint32 mtu = 6 [json_name = "mtu"];
                                 string ip = 7 [json_name = "ip"];
                                 int32 cost = 8 [json_name = "cost"];
                                 enum GrState {
                                    GrState_NORMAL = 0;
                                    GrState_HELPER = 1;
                                    GrState_NULL = 2;
                                    GrState_NONE = 3;
                                 };
                                 GrState gr_state = 9 [json_name = "gr-state"];
                                 enum PreviousState {
                                    PreviousState_DOWN = 0;
                                    PreviousState_WAITING = 1;
                                    PreviousState_P2P = 2;
                                    PreviousState_DR = 3;
                                    PreviousState_BDR = 4;
                                    PreviousState_DRX_OTHER = 5;
                                    PreviousState_LOOPBACK = 6;
                                 };
                                 PreviousState previous_state = 10 [json_name = "previous-state"];
                                 uint32 opaque_id = 11 [json_name = "opaque-id"];
                                 bool mpls_te_link = 12 [json_name = "mpls-te-link"];
                                 enum PeerFlapStatus {
                                    PeerFlapStatus_DISABLE = 0;
                                    PeerFlapStatus_ENABLE = 1;
                                    PeerFlapStatus_HOLDX_MAXX_COST = 2;
                                    PeerFlapStatus_HOLDX_DOWN = 3;
                                 };
                                 PeerFlapStatus peer_flap_status = 13 [json_name = "peer-flap-status"];
                                 uint32 peer_flap_count = 14 [json_name = "peer-flap-count"];
                                 uint32 peer_flap_threshold = 15 [json_name = "peer-flap-threshold"];
                                 string peer_flap_timer = 16 [json_name = "peer-flap-timer"];
                                 uint32 peer_flap_remain_timer = 17 [json_name = "peer-flap-remain-timer"];
                                 uint32 bandwidth = 18 [json_name = "bandwidth"];
                              }
                              DispData disp_data = 22 [json_name = "disp-data"];
                              message NbrStatistics {
                                 message NbrStatistic {
                                    string router_id = 1 [json_name = "router-id"];
                                    string ip = 2 [json_name = "ip"];
                                    string intf_ip = 3 [json_name = "intf-ip"];
                                    enum GrState {
                                       GrState_NORMAL = 0;
                                       GrState_DOINGX_GR = 1;
                                       GrState_HELPER = 2;
                                       GrState_NONE = 3;
                                    };
                                    GrState gr_state = 4 [json_name = "gr-state"];
                                    enum State {
                                       State_DOWN = 0;
                                       State_INIT = 1;
                                       State_ATTEMPT = 2;
                                       State_X_2X_WAY = 3;
                                       State_EXSTART = 4;
                                       State_EXCHANGE = 5;
                                       State_LOADING = 6;
                                       State_FULL = 7;
                                    };
                                    State state = 5 [json_name = "state"];
                                    enum Mode {
                                       Mode_SLAVE = 0;
                                       Mode_MASTER = 1;
                                    };
                                    Mode mode = 6 [json_name = "mode"];
                                    int32 priority = 7 [json_name = "priority"];
                                    string dr = 8 [json_name = "dr"];
                                    string bdr = 9 [json_name = "bdr"];
                                    uint32 intf_mtu = 10 [json_name = "intf-mtu"];
                                    string dead_due_timer = 11 [json_name = "dead-due-timer"];
                                    uint32 retran_intv = 12 [json_name = "retran-intv"];
                                    string up_time = 13 [json_name = "up-time"];
                                    string up_time_stamp = 14 [json_name = "up-time-stamp"];
                                    uint32 auth_sequence = 15 [json_name = "auth-sequence"];
                                    uint32 adj_sid = 16 [json_name = "adj-sid"];
                                    uint32 adj_weight = 17 [json_name = "adj-weight"];
                                    string adj_flags = 18 [json_name = "adj-flags"];
                                 }
                                 repeated NbrStatistic nbr_statistic = 1 [json_name = "nbr-statistic"];
                              }
                              NbrStatistics nbr_statistics = 23 [json_name = "nbr-statistics"];
                              message ErrorData {
                                 string router_id = 1 [json_name = "router-id"];
                                 uint32 same_ip_pkt_cnt = 2 [json_name = "same-ip-pkt-cnt"];
                                 uint32 bad_pkt_cnt = 3 [json_name = "bad-pkt-cnt"];
                                 uint32 bad_ver_cnt = 4 [json_name = "bad-ver-cnt"];
                                 uint32 bad_chksum_pkt_cnt = 5 [json_name = "bad-chksum-pkt-cnt"];
                                 uint32 bad_area_pkt_cnt = 6 [json_name = "bad-area-pkt-cnt"];
                                 uint32 pkt_rcv_unnumber = 7 [json_name = "pkt-rcv-unnumber"];
                                 uint32 bad_virt_link_cnt = 8 [json_name = "bad-virt-link-cnt"];
                                 uint32 auth_type_fail_cnt = 9 [json_name = "auth-type-fail-cnt"];
                                 uint32 auth_key_fail_cnt = 10 [json_name = "auth-key-fail-cnt"];
                                 uint32 short_pkt_cnt = 11 [json_name = "short-pkt-cnt"];
                                 uint32 long_pkt_cnt = 12 [json_name = "long-pkt-cnt"];
                                 uint32 tx_err_cnt = 13 [json_name = "tx-err-cnt"];
                                 uint32 if_down_cnt = 14 [json_name = "if-down-cnt"];
                                 uint32 no_nbr = 15 [json_name = "no-nbr"];
                                 uint32 mis_netmask_cnt = 16 [json_name = "mis-netmask-cnt"];
                                 uint32 mis_hello_intl_cnt = 17 [json_name = "mis-hello-intl-cnt"];
                                 uint32 mis_dead_intl_cnt = 18 [json_name = "mis-dead-intl-cnt"];
                                 uint32 mis_ext_cnt = 19 [json_name = "mis-ext-cnt"];
                                 uint32 router_id_confusion = 20 [json_name = "router-id-confusion"];
                                 uint32 vlink_nbr_mis_cnt = 21 [json_name = "vlink-nbr-mis-cnt"];
                                 uint32 nbma_nbr_err_cnt = 22 [json_name = "nbma-nbr-err-cnt"];
                                 uint32 inval_src_hello_cnt = 23 [json_name = "inval-src-hello-cnt"];
                                 uint32 dd_nbr_low_cnt = 24 [json_name = "dd-nbr-low-cnt"];
                                 uint32 dd_rtrid_cnt = 25 [json_name = "dd-rtrid-cnt"];
                                 uint32 dd_opt_mismatch_cnt = 26 [json_name = "dd-opt-mismatch-cnt"];
                                 uint32 dd_unknwn_lsa_cnt = 27 [json_name = "dd-unknwn-lsa-cnt"];
                                 uint32 dd_mtu_mismatch_cnt = 28 [json_name = "dd-mtu-mismatch-cnt"];
                                 uint32 ack_nbr_low_cnt = 29 [json_name = "ack-nbr-low-cnt"];
                                 uint32 ack_bad_cnt = 30 [json_name = "ack-bad-cnt"];
                                 uint32 ack_duplicate_cnt = 31 [json_name = "ack-duplicate-cnt"];
                                 uint32 ack_unknwn_lsa_cnt = 32 [json_name = "ack-unknwn-lsa-cnt"];
                                 uint32 req_nbr_low_cnt = 33 [json_name = "req-nbr-low-cnt"];
                                 uint32 req_empty_cnt = 34 [json_name = "req-empty-cnt"];
                                 uint32 req_bad_cnt = 35 [json_name = "req-bad-cnt"];
                                 uint32 upd_nbr_low_cnt = 36 [json_name = "upd-nbr-low-cnt"];
                                 uint32 upd_self_newr_cnt = 37 [json_name = "upd-self-newr-cnt"];
                                 uint32 upd_min_lsarr_cnt = 38 [json_name = "upd-min-lsarr-cnt"];
                                 uint32 upd_ls_chksum_cnt = 39 [json_name = "upd-ls-chksum-cnt"];
                                 uint32 upd_les_recent_cnt = 40 [json_name = "upd-les-recent-cnt"];
                                 uint32 upd_unknw_lsa_cnt = 41 [json_name = "upd-unknw-lsa-cnt"];
                                 uint32 opq9_flood_cnt = 42 [json_name = "opq9-flood-cnt"];
                                 uint32 opq10_flood_cnt = 43 [json_name = "opq10-flood-cnt"];
                                 uint32 opq11_flood_cnt = 44 [json_name = "opq11-flood-cnt"];
                                 uint32 rxmt_dd_err_cnt = 45 [json_name = "rxmt-dd-err-cnt"];
                                 uint32 rxmt_req_err_cnt = 46 [json_name = "rxmt-req-err-cnt"];
                                 uint32 rxmt_upd_err_cnt = 47 [json_name = "rxmt-upd-err-cnt"];
                                 uint32 gr_invalid_lsa_cnt = 48 [json_name = "gr-invalid-lsa-cnt"];
                                 uint32 gr_invalid_pol_cnt = 49 [json_name = "gr-invalid-pol-cnt"];
                                 uint32 gr_invalid_prd_cnt = 50 [json_name = "gr-invalid-prd-cnt"];
                                 uint32 tunnel_cost_cnt = 51 [json_name = "tunnel-cost-cnt"];
                                 uint32 peer_net_type_cnt = 52 [json_name = "peer-net-type-cnt"];
                                 uint32 hello_dr_mis_cnt = 53 [json_name = "hello-dr-mis-cnt"];
                              }
                              ErrorData error_data = 24 [json_name = "error-data"];
                              message PrefixSids {
                                 message PrefixSid {
                                    uint32 algorithm = 1 [json_name = "algorithm"];
                                    enum Type {
                                       INVALID_ENUM_VALUE_Type = 0;
                                       Type_ABSOLUTE = 1;
                                       Type_INDEX = 2;
                                    };
                                    Type type = 2 [json_name = "type"];
                                    uint32 label = 3 [json_name = "label"];
                                    bool node_flag = 4 [json_name = "node-flag"];
                                 }
                                 repeated PrefixSid prefix_sid = 1 [json_name = "prefix-sid"];
                              }
                              PrefixSids prefix_sids = 25 [json_name = "prefix-sids"];
                           }
                           repeated Interface interface = 1 [json_name = "interface"];
                        }
                        Interfaces interfaces = 8 [json_name = "interfaces"];
                        message DispData {
                           uint32 spf_schedule_times = 1 [json_name = "spf-schedule-times"];
                           uint32 interface_count = 2 [json_name = "interface-count"];
                           uint32 exchange_and_loading_nbr = 3 [json_name = "exchange-and-loading-nbr"];
                           enum RouterIdConflict {
                              RouterIdConflict_NORMAL = 0;
                              RouterIdConflict_WAITX_SELECT = 1;
                              RouterIdConflict_SELECTING = 2;
                              RouterIdConflict_CHANGED = 3;
                              RouterIdConflict_SUSPEND = 4;
                              RouterIdConflict_NONE = 5;
                           };
                           RouterIdConflict router_id_conflict = 4 [json_name = "router-id-conflict"];
                           enum ImportLimitStatus {
                              ImportLimitStatus_DISABLE = 0;
                              ImportLimitStatus_ENABLE = 1;
                              ImportLimitStatus_ALARM = 2;
                              ImportLimitStatus_OVERX_LIMIT = 3;
                           };
                           ImportLimitStatus import_limit_status = 5 [json_name = "import-limit-status"];
                           uint32 self_nssa_lsa_count = 6 [json_name = "self-nssa-lsa-count"];
                           enum NssaTransState {
                              NssaTransState_NONE = 0;
                              NssaTransState_ENABLED = 1;
                              NssaTransState_ELECTED = 2;
                              NssaTransState_DISABLED = 3;
                           };
                           NssaTransState nssa_trans_state = 7 [json_name = "nssa-trans-state"];
                           enum NssaTransRole {
                              NssaTransRole_NONE = 0;
                              NssaTransRole_ALWAYS = 1;
                              NssaTransRole_CANDIDATE = 2;
                           };
                           NssaTransRole nssa_trans_role = 8 [json_name = "nssa-trans-role"];
                           bool nssa_trans_stab_intv = 9 [json_name = "nssa-trans-stab-intv"];
                        }
                        DispData disp_data = 9 [json_name = "disp-data"];
                     }
                     repeated Area area = 1 [json_name = "area"];
                  }
                  Areas areas = 37 [json_name = "areas"];
                  message DispData {
                     enum BorderRouter {
                        BorderRouter_NORMAL = 0;
                        BorderRouter_AREA = 1;
                        BorderRouter_AS = 2;
                        BorderRouter_AREAX_AS = 3;
                        BorderRouter_NSSA = 4;
                        BorderRouter_AREAX_NSSA = 5;
                        BorderRouter_ASX_NSSA = 6;
                        BorderRouter_AREAX_ASX_NSSA = 7;
                     };
                     BorderRouter border_router = 1 [json_name = "border-router"];
                     enum IetfMode {
                        IetfMode_NONX_STANDARD = 0;
                        IetfMode_STANDARD = 1;
                     };
                     IetfMode ietf_mode = 2 [json_name = "ietf-mode"];
                     uint32 spf_count = 3 [json_name = "spf-count"];
                     uint32 area_count = 4 [json_name = "area-count"];
                     uint32 nssa_count = 5 [json_name = "nssa-count"];
                     uint32 exchange_and_loading_nbr = 6 [json_name = "exchange-and-loading-nbr"];
                     enum LsdbOverflowStatus {
                        LsdbOverflowStatus_NORMAL = 0;
                        LsdbOverflowStatus_APPROACH = 1;
                        LsdbOverflowStatus_OVERFLOW = 2;
                     };
                     LsdbOverflowStatus lsdb_overflow_status = 7 [json_name = "lsdb-overflow-status"];
                     uint32 non_default_ase_lsa_count = 8 [json_name = "non-default-ase-lsa-count"];
                     uint32 lsdb_overflow_remain = 9 [json_name = "lsdb-overflow-remain"];
                     enum ImportLimitStatus {
                        ImportLimitStatus_DISABLE = 0;
                        ImportLimitStatus_ENABLE = 1;
                        ImportLimitStatus_ALARM = 2;
                        ImportLimitStatus_OVERX_LIMIT = 3;
                     };
                     ImportLimitStatus import_limit_status = 10 [json_name = "import-limit-status"];
                     uint32 self_ase_lsa_count = 11 [json_name = "self-ase-lsa-count"];
                  }
                  DispData disp_data = 38 [json_name = "disp-data"];
                  message AbrAsbrStatistics {
                     message AbrAsbrStatistic {
                        uint32 if_index = 1 [json_name = "if-index"];
                        string nexthop_ip = 2 [json_name = "nexthop-ip"];
                        string area_id = 3 [json_name = "area-id"];
                        string destination_id = 4 [json_name = "destination-id"];
                        string if_name = 5 [json_name = "if-name"];
                        string router_id = 6 [json_name = "router-id"];
                        enum PathType {
                           PathType_UNKNOW = 0;
                           PathType_INTRAX_AREA = 1;
                           PathType_TRANSIT = 2;
                           PathType_STUB = 3;
                           PathType_INTERX_AREA = 4;
                           PathType_DIRECT = 5;
                           PathType_TYPE1 = 6;
                           PathType_TYPE2 = 7;
                        };
                        PathType path_type = 7 [json_name = "path-type"];
                        uint32 cost = 8 [json_name = "cost"];
                        enum RouterType {
                           RouterType_NORMAL = 0;
                           RouterType_ASBR = 2;
                           RouterType_ABR = 4;
                           RouterType_ABRX_ASBR = 6;
                        };
                        RouterType router_type = 9 [json_name = "router-type"];
                     }
                     repeated AbrAsbrStatistic abr_asbr_statistic = 1 [json_name = "abr-asbr-statistic"];
                  }
                  AbrAsbrStatistics abr_asbr_statistics = 39 [json_name = "abr-asbr-statistics"];
                  message NexthopParas {
                     message NexthopPara {
                        string addr = 1 [json_name = "addr"];
                        enum RtSourceType {
                           RtSourceType_LOCAL = 0;
                           RtSourceType_UNKNOW = 1;
                        };
                        RtSourceType rt_source_type = 2 [json_name = "rt-source-type"];
                        string if_addr = 3 [json_name = "if-addr"];
                        string if_name = 4 [json_name = "if-name"];
                        uint32 referece_count = 5 [json_name = "referece-count"];
                        string router_id = 6 [json_name = "router-id"];
                     }
                     repeated NexthopPara nexthop_para = 1 [json_name = "nexthop-para"];
                  }
                  NexthopParas nexthop_paras = 40 [json_name = "nexthop-paras"];
                  message LsdbStatistics {
                     message LsdbStatistic {
                        string area_id = 1 [json_name = "area-id"];
                        enum LsaType {
                           INVALID_ENUM_VALUE_LsaType = 0;
                           LsaType_ROUTER = 1;
                           LsaType_NETWORK = 2;
                           LsaType_SUMX_NET = 3;
                           LsaType_SUMX_ASBR = 4;
                           LsaType_EXTERNAL = 5;
                           LsaType_LSAX_TYPEX_6 = 6;
                           LsaType_NSSA = 7;
                           LsaType_LSAX_TYPEX_8 = 8;
                           LsaType_OPQX_LINK = 9;
                           LsaType_OPQX_AREA = 10;
                           LsaType_OPQX_AS = 11;
                        };
                        LsaType lsa_type = 2 [json_name = "lsa-type"];
                        string link_state_id = 3 [json_name = "link-state-id"];
                        string adv_router_id = 4 [json_name = "adv-router-id"];
                        int32 lsa_age = 5 [json_name = "lsa-age"];
                        string lsa_sequence_num = 6 [json_name = "lsa-sequence-num"];
                        string check_sum = 7 [json_name = "check-sum"];
                        uint32 lsa_length = 8 [json_name = "lsa-length"];
                        enum Options {
                           Options_NONE = 0;
                           Options_E = 2;
                           Options_MC = 4;
                           Options_MCX_E = 6;
                           Options_NP = 8;
                           Options_NPX_E = 10;
                           Options_NPX_MC = 12;
                           Options_NPX_MCX_E = 14;
                           Options_EA = 16;
                           Options_EAX_E = 18;
                           Options_EAX_MC = 20;
                           Options_EAX_MCX_E = 22;
                           Options_EAX_NP = 24;
                           Options_EAX_NPX_E = 26;
                           Options_EAX_NPX_MC = 28;
                           Options_EAX_NPX_MCX_E = 30;
                           Options_DC = 32;
                           Options_DCX_E = 34;
                           Options_DCX_MC = 36;
                           Options_DCX_MCX_E = 38;
                           Options_DCX_NP = 40;
                           Options_DCX_NPX_E = 42;
                           Options_DCX_NPX_MC = 44;
                           Options_DCX_NPX_MCX_E = 46;
                           Options_DCX_EA = 48;
                           Options_DCX_EAX_E = 50;
                           Options_DCX_EAX_MC = 52;
                           Options_DCX_EAX_MCX_E = 54;
                           Options_DCX_EAX_NP = 56;
                           Options_DCX_EAX_NPX_E = 58;
                           Options_DCX_EAX_NPX_MC = 60;
                           Options_DCX_EAX_NPX_MCX_E = 62;
                           Options_DN = 128;
                           Options_EX_DN = 130;
                           Options_NPX_DN = 136;
                        };
                        Options options = 9 [json_name = "options"];
                        enum OptionFlag {
                           OptionFlag_NULL = 0;
                           OptionFlag_ABR = 256;
                           OptionFlag_ASBR = 512;
                           OptionFlag_ASBRX_ABR = 768;
                           OptionFlag_VIRTUAL = 1024;
                           OptionFlag_ABRX_VIRTUAL = 1280;
                           OptionFlag_ASBRX_VIRTUAL = 1536;
                           OptionFlag_ASBRX_ABRX_VIRTUAL = 1792;
                           OptionFlag_NT = 4096;
                           OptionFlag_ABRX_NT = 4352;
                           OptionFlag_ASBRX_NT = 4608;
                           OptionFlag_ASBRX_ABRX_NT = 4864;
                           OptionFlag_VIRTUALX_NT = 5120;
                           OptionFlag_ABRX_VIRTUALX_NT = 5376;
                           OptionFlag_ASBRX_VIRTUALX_NT = 5632;
                           OptionFlag_ASBRX_ABRX_VIRTUALX_NT = 5888;
                        };
                        OptionFlag option_flag = 10 [json_name = "option-flag"];
                        uint32 link_count = 11 [json_name = "link-count"];
                        string network_mask = 12 [json_name = "network-mask"];
                        string host_name = 13 [json_name = "host-name"];
                        message Lsabodys {
                           message Lsabody {
                              string link_id = 1 [json_name = "link-id"];
                              string link_data = 2 [json_name = "link-data"];
                              enum LinkType {
                                 LinkType_NONE = 0;
                                 LinkType_P2P = 1;
                                 LinkType_TRANSX_NET = 2;
                                 LinkType_STUBX_NET = 3;
                                 LinkType_VIRTUAL = 4;
                              };
                              LinkType link_type = 3 [json_name = "link-type"];
                              string attach_router = 4 [json_name = "attach-router"];
                              string forward_ip = 5 [json_name = "forward-ip"];
                              uint32 tos_id = 6 [json_name = "tos-id"];
                              uint32 tos_metric = 7 [json_name = "tos-metric"];
                              uint32 route_tag = 8 [json_name = "route-tag"];
                              uint32 opaque_type = 9 [json_name = "opaque-type"];
                              uint32 opaque_id = 10 [json_name = "opaque-id"];
                              uint32 ext_metric_type = 11 [json_name = "ext-metric-type"];
                           }
                           repeated Lsabody lsabody = 1 [json_name = "lsabody"];
                        }
                        Lsabodys lsabodys = 14 [json_name = "lsabodys"];
                        message Rilsa {
                           string host_name = 1 [json_name = "host-name"];
                           string algorithm = 2 [json_name = "algorithm"];
                        }
                        Rilsa rilsa = 15 [json_name = "rilsa"];
                     }
                     repeated LsdbStatistic lsdb_statistic = 1 [json_name = "lsdb-statistic"];
                  }
                  LsdbStatistics lsdb_statistics = 41 [json_name = "lsdb-statistics"];
                  message LsdbBriefs {
                     message LsdbBrief {
                        string area_id = 1 [json_name = "area-id"];
                        string router_id = 2 [json_name = "router-id"];
                        uint32 stub = 3 [json_name = "stub"];
                        uint32 router = 4 [json_name = "router"];
                        uint32 network = 5 [json_name = "network"];
                        uint32 summary_net = 6 [json_name = "summary-net"];
                        uint32 asbr = 7 [json_name = "asbr"];
                        uint32 type7 = 8 [json_name = "type7"];
                        uint32 opaque9 = 9 [json_name = "opaque9"];
                        uint32 opaque10 = 10 [json_name = "opaque10"];
                        uint32 sub_total = 11 [json_name = "sub-total"];
                     }
                     repeated LsdbBrief lsdb_brief = 1 [json_name = "lsdb-brief"];
                  }
                  LsdbBriefs lsdb_briefs = 42 [json_name = "lsdb-briefs"];
                  message LastDownNbrs {
                     message LastDownNbr {
                        uint32 list_index = 1 [json_name = "list-index"];
                        string area_id = 2 [json_name = "area-id"];
                        string ip_addr = 3 [json_name = "ip-addr"];
                        string router_id = 4 [json_name = "router-id"];
                        string if_name = 5 [json_name = "if-name"];
                        enum ImmediateReason {
                           ImmediateReason_NEIGHBORX_DOWNX_DUEX_TOX_INACTIVITY = 0;
                           ImmediateReason_NEIGHBORX_DOWNX_DUEX_TOX_LLX_DOWN = 1;
                           ImmediateReason_NEIGHBORX_DOWNX_DUEX_TOX_KILLX_NEIGHBOR = 2;
                           ImmediateReason_NEIGHBORX_DOWNX_DUEX_TOX_1X_WAYHELLOX_RECEIVED = 3;
                           ImmediateReason_NEIGHBORX_DOWNX_DUEX_TOX_ADJOK = 4;
                           ImmediateReason_NEIGHBORX_DOWNX_DUEX_TOX_SEQUENCEX_NUMX_MISMATCH = 5;
                           ImmediateReason_NEIGHBORX_DOWNX_DUEX_TOX_BADX_LSX_REQ = 6;
                        };
                        ImmediateReason immediate_reason = 6 [json_name = "immediate-reason"];
                        enum PrimaryReason {
                           PrimaryReason_DOWNX_REASONX_INITX_VALUE = 0;
                           PrimaryReason_HELLOX_NOTX_SEEN = 1;
                           PrimaryReason_INTERFACEX_PARAMETERX_MISMATCH = 2;
                           PrimaryReason_LOGICALX_INTERFACEX_STATEX_CHANGE = 3;
                           PrimaryReason_LINKX_FAULTX_ORX_INTERFACEX_CONFIGURATIONX_CHANGE = 4;
                           PrimaryReason_OSPFX_PROCESSX_RESET = 5;
                           PrimaryReason_AREAX_RESET = 6;
                           PrimaryReason_AREAX_OPTIONX_MISX_MATCH = 7;
                           PrimaryReason_VLINKX_PEERX_NOTX_REACHABLE = 8;
                           PrimaryReason_SHAMX_LINKX_UNREACHABLE = 9;
                           PrimaryReason_UNDOX_NETWORKX_COMMAND = 10;
                           PrimaryReason_UNDOX_NBMAX_PEER = 11;
                           PrimaryReason_PASSIVEX_INTERFACEX_DOWN = 12;
                           PrimaryReason_OPAQUEX_CAPABILITYX_ENABLED = 13;
                           PrimaryReason_OPAQUEX_CAPABILITYX_DISABLED = 14;
                           PrimaryReason_VIRTUALX_INTERFACEX_STATEX_CHANGE = 15;
                           PrimaryReason_BFDX_SESSIONX_DOWN = 16;
                           PrimaryReason_RETRANSMISSIONX_LIMITX_EXCEED = 17;
                           PrimaryReason_X_1X_WAYHELLOX_RECEIVED = 18;
                           PrimaryReason_ROUTERX_STATEX_CHANGEX_FROMX_DRX_ORX_BDRX_TOX_DROTHER = 19;
                           PrimaryReason_NEIGHBORX_STATEX_CHANGEX_FROMX_DRX_ORX_BDRX_TOX_DROTHER = 20;
                           PrimaryReason_NSSAX_AREAX_CONFIGUREX_CHANGE = 21;
                           PrimaryReason_STUBX_AREAX_CONFIGUREX_CHANGE = 22;
                           PrimaryReason_RECEIVEDX_INVALIDX_DDX_PACKET = 23;
                           PrimaryReason_NOTX_RECEIVEDX_DDX_DURINGX_ROUTERX_DEADX_INTERVAL = 24;
                           PrimaryReason_MX_IX_MSX_BITX_ORX_SEQUENCEX_NUMX_INCORRECT = 25;
                           PrimaryReason_UNABLEX_OPAQUEX_CAPABILITYX_FINDX_9X_10X_11X_TYPEX_LSA = 26;
                           PrimaryReason_NOTX_NSSAX_FINDX_7X_TYPEX_LSAX_INX_SUMMARYX_LIST = 27;
                           PrimaryReason_LSX_REQUESTX_PACKETX_UNKNOWNX_REASON = 28;
                           PrimaryReason_NSSAX_ORX_STUBX_AREAX_FINDX_5X_11X_TYPEX_LSA = 29;
                           PrimaryReason_LSX_REQUESTX_PACKETX_REQUESTX_LSAX_ISX_NOTX_INX_THEX_LSDB = 30;
                           PrimaryReason_LSX_REQUESTX_PACKETX_EXISTX_SAMEX_LSAX_INX_THEX_LSDB = 31;
                           PrimaryReason_LSX_REQUESTX_PACKETX_EXISTX_NEWERX_LSAX_INX_THEX_LSDB = 32;
                           PrimaryReason_NEIGHBORX_STATEX_WASX_NOTX_FULLX_WHENX_LSDBX_OVERFLOW = 33;
                           PrimaryReason_FILTERX_LSAX_CONFIGURATIONX_CHANGE = 34;
                           PrimaryReason_ACLX_CHANGEDX_FORX_FILTERX_LSA = 35;
                           PrimaryReason_RESETX_OSPFX_PEER = 36;
                           PrimaryReason_INTERFACEX_RESET = 37;
                           PrimaryReason_UNDOX_OSPFX_INTERFACEX_UNDOX_AREAX_UNDOX_NETWORK = 38;
                           PrimaryReason_UNDOX_OSPFX_AREA = 39;
                           PrimaryReason_CPUX_OVERLOAD = 40;
                           PrimaryReason_INTERFACEX_STATEX_CHANGEDX_TOX_STANDBY = 41;
                           PrimaryReason_UNDOX_ROUTERX_ID = 42;
                           PrimaryReason_NEIGHBORX_ROUTERX_IDX_CHANGEDX_ORX_IPX_CONFLICTED = 43;
                           PrimaryReason_COMPONENTX_ISX_INX_IMPLEMENTX_STAT = 44;
                           PrimaryReason_SEQEUNCEX_NUMBERX_MISMATCHED = 45;
                           PrimaryReason_IX_BITX_INCORRECTX_INX_DD = 46;
                           PrimaryReason_MSX_BITX_INCORRECTX_INX_DD = 47;
                           PrimaryReason_OPTIONSX_INCORRECTX_INX_DD = 48;
                           PrimaryReason_RECEIVEDX_MTUX_MISMATCHEDX_DDX_PACKET = 49;
                           PrimaryReason_OSPFX_PROCESSX_SHUTDOWN = 51;
                           PrimaryReason_OSPFX_MAXX_NBRX_INX_ADJ = 52;
                           PrimaryReason_OSPFX_DCNX_INTFX_PARAX_MISX_MATCH = 53;
                           PrimaryReason_OSPFX_GRX_MASTERX_FORCEX_DOWN = 54;
                           PrimaryReason_DDX_RETRANSX_TIMESX_UPTOX_LIMIT = 55;
                           PrimaryReason_OSPFX_OVERFLOW = 56;
                           PrimaryReason_UNDOX_OSPFX_INTERFACEX_UNDOX_AREA = 100;
                        };
                        PrimaryReason primary_reason = 7 [json_name = "primary-reason"];
                        string time = 8 [json_name = "time"];
                        string local_router_id = 9 [json_name = "local-router-id"];
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_NORMAL = 1;
                           Type_VLINK = 2;
                           Type_SLINK = 3;
                        };
                        Type type = 10 [json_name = "type"];
                     }
                     repeated LastDownNbr last_down_nbr = 1 [json_name = "last-down-nbr"];
                  }
                  LastDownNbrs last_down_nbrs = 43 [json_name = "last-down-nbrs"];
                  message DispGracefulRestart {
                     enum Capability {
                        Capability_DISABLED = 0;
                        Capability_ENABLED = 1;
                     };
                     Capability capability = 1 [json_name = "capability"];
                     enum HelpRole {
                        HelpRole_NONE = 0;
                        HelpRole_PLANNEDX_STRICTX_LSAX_CHECK = 1;
                        HelpRole_UNX_PLANNEDX_STRICTX_LSAX_CHECK = 2;
                        HelpRole_PLANNEDX_UNX_PLANNEDX_STRICTX_LSAX_CHECK = 3;
                        HelpRole_IGNOREX_EXTERNALX_LSAX_CHECK = 4;
                        HelpRole_PLANNEDX_IGNOREX_EXTERNALX_LSAX_CHECK = 5;
                        HelpRole_UNX_PLANNEDX_IGNOREX_EXTERNALX_LSAX_CHECK = 6;
                        HelpRole_PLANNEDX_UNX_PLANNEDX_IGNOREX_EXTERNALX_LSAX_CHECK = 7;
                        HelpRole_NEVER = 8;
                        HelpRole_PLANNEDX_UNX_PLANNEDX_NONX_IETF = 35;
                     };
                     HelpRole help_role = 2 [json_name = "help-role"];
                     enum CurrentState {
                        CurrentState_NORMAL = 0;
                        CurrentState_HELPER = 1;
                        CurrentState_NULL = 2;
                        CurrentState_NONE = 3;
                     };
                     CurrentState current_state = 3 [json_name = "current-state"];
                     enum OnHelper {
                        OnHelper_NONE = 0;
                        OnHelper_SUCCESSFULX_EXIT = 1;
                        OnHelper_GRACEX_PERIODX_EXPIRED = 2;
                        OnHelper_RECEIVEDX_FLUSHEDX_GRACEX_LSA = 3;
                        OnHelper_FLOODINGX_CHANGEDX_LSA = 4;
                        OnHelper_POLICYX_CHECKX_FAILEDX_FORX_RECEIVEDX_GRACEX_LSA = 6;
                        OnHelper_NEIGHBORX_RESET = 7;
                        OnHelper_INTERFACEX_STATUSX_CHANGED = 8;
                        OnHelper_GRACEFULX_RESTARTX_UNCONFIGUREDX_ATX_PROCESSX_LEVEL = 9;
                        OnHelper_GRACEX_LSAX_NOTX_FOUND = 10;
                     };
                     OnHelper on_helper = 4 [json_name = "on-helper"];
                     uint32 nbr_num = 5 [json_name = "nbr-num"];
                  }
                  DispGracefulRestart disp_graceful_restart = 44 [json_name = "disp-graceful-restart"];
                  message ErrorProcessData {
                     string router_id = 1 [json_name = "router-id"];
                     uint32 same_ip_pkt_cnt = 2 [json_name = "same-ip-pkt-cnt"];
                     uint32 bad_pkt_cnt = 3 [json_name = "bad-pkt-cnt"];
                     uint32 bad_ver_cnt = 4 [json_name = "bad-ver-cnt"];
                     uint32 bad_chk_sum_pkt_cnt = 5 [json_name = "bad-chk-sum-pkt-cnt"];
                     uint32 bad_area_pkt_cnt = 6 [json_name = "bad-area-pkt-cnt"];
                     uint32 pkt_rcv_unnumber = 7 [json_name = "pkt-rcv-unnumber"];
                     uint32 bad_virt_link_cnt = 8 [json_name = "bad-virt-link-cnt"];
                     uint32 auth_type_fail_cnt = 9 [json_name = "auth-type-fail-cnt"];
                     uint32 auth_key_fail_cnt = 10 [json_name = "auth-key-fail-cnt"];
                     uint32 short_pkt_cnt = 11 [json_name = "short-pkt-cnt"];
                     uint32 long_pkt_cnt = 12 [json_name = "long-pkt-cnt"];
                     uint32 tx_err_cnt = 13 [json_name = "tx-err-cnt"];
                     uint32 if_down_cnt = 14 [json_name = "if-down-cnt"];
                     uint32 no_nbr = 15 [json_name = "no-nbr"];
                     uint32 mis_netmask_cnt = 16 [json_name = "mis-netmask-cnt"];
                     uint32 mis_hello_intl_cnt = 17 [json_name = "mis-hello-intl-cnt"];
                     uint32 mis_dead_intl_cnt = 18 [json_name = "mis-dead-intl-cnt"];
                     uint32 mis_ext_rou_cap_cnt = 19 [json_name = "mis-ext-rou-cap-cnt"];
                     uint32 router_id_confusion = 20 [json_name = "router-id-confusion"];
                     uint32 vlink_nbr_mis_cnt = 21 [json_name = "vlink-nbr-mis-cnt"];
                     uint32 nbma_nbr_err_cnt = 22 [json_name = "nbma-nbr-err-cnt"];
                     uint32 inval_src_helo_cnt = 23 [json_name = "inval-src-helo-cnt"];
                     uint32 dd_nbr_low_cnt = 24 [json_name = "dd-nbr-low-cnt"];
                     uint32 dd_router_id_cnt = 25 [json_name = "dd-router-id-cnt"];
                     uint32 dd_opt_mismatch_cnt = 26 [json_name = "dd-opt-mismatch-cnt"];
                     uint32 dd_unknwn_lsa_cnt = 27 [json_name = "dd-unknwn-lsa-cnt"];
                     uint32 dd_mtu_mismatch_cnt = 28 [json_name = "dd-mtu-mismatch-cnt"];
                     uint32 ack_nbr_low_cnt = 29 [json_name = "ack-nbr-low-cnt"];
                     uint32 ack_bad_cnt = 30 [json_name = "ack-bad-cnt"];
                     uint32 ack_duplicate_cnt = 31 [json_name = "ack-duplicate-cnt"];
                     uint32 ack_unknown_lsa_cnt = 32 [json_name = "ack-unknown-lsa-cnt"];
                     uint32 req_nbr_low_cnt = 33 [json_name = "req-nbr-low-cnt"];
                     uint32 req_empty_cnt = 34 [json_name = "req-empty-cnt"];
                     uint32 req_bad_cnt = 35 [json_name = "req-bad-cnt"];
                     uint32 upd_nbr_low_cnt = 36 [json_name = "upd-nbr-low-cnt"];
                     uint32 upd_self_newr_cnt = 37 [json_name = "upd-self-newr-cnt"];
                     uint32 upd_min_lsa_lsarr_cnt = 38 [json_name = "upd-min-lsa-lsarr-cnt"];
                     uint32 upd_ls_checksum_cnt = 39 [json_name = "upd-ls-checksum-cnt"];
                     uint32 upd_les_recent_cnt = 40 [json_name = "upd-les-recent-cnt"];
                     uint32 upd_unknow_lsa_cnt = 41 [json_name = "upd-unknow-lsa-cnt"];
                     uint32 opq9_flood_cnt = 42 [json_name = "opq9-flood-cnt"];
                     uint32 opq10_flood_cnt = 43 [json_name = "opq10-flood-cnt"];
                     uint32 opq11_flood_cnt = 44 [json_name = "opq11-flood-cnt"];
                     uint32 unknown_tlv = 45 [json_name = "unknown-tlv"];
                     uint32 rxmt_dd_err_cnt = 46 [json_name = "rxmt-dd-err-cnt"];
                     uint32 rxmt_req_err_cnt = 47 [json_name = "rxmt-req-err-cnt"];
                     uint32 rxmt_upd_err_cnt = 48 [json_name = "rxmt-upd-err-cnt"];
                     uint32 gr_invalid_lsa_cnt = 49 [json_name = "gr-invalid-lsa-cnt"];
                     uint32 gr_invalid_pol_cnt = 50 [json_name = "gr-invalid-pol-cnt"];
                     uint32 gr_invalid_prd_cnt = 51 [json_name = "gr-invalid-prd-cnt"];
                     uint32 tunnel_cost_cnt = 52 [json_name = "tunnel-cost-cnt"];
                     uint32 peer_net_type_cnt = 53 [json_name = "peer-net-type-cnt"];
                     uint32 hello_dr_mis_cnt = 54 [json_name = "hello-dr-mis-cnt"];
                  }
                  ErrorProcessData error_process_data = 45 [json_name = "error-process-data"];
                  message AsLsdbBrief {
                     string router_id = 1 [json_name = "router-id"];
                     uint32 opaque11 = 2 [json_name = "opaque11"];
                     uint32 ase = 3 [json_name = "ase"];
                     uint32 sub_total = 4 [json_name = "sub-total"];
                  }
                  AsLsdbBrief as_lsdb_brief = 46 [json_name = "as-lsdb-brief"];
                  message Neighbors {
                     message Neighbor {
                        string area_id = 1 [json_name = "area-id"];
                        string if_name = 2 [json_name = "if-name"];
                        string router_id = 3 [json_name = "router-id"];
                        string ip_addr = 4 [json_name = "ip-addr"];
                        bool multi_area_flag = 5 [json_name = "multi-area-flag"];
                        enum State {
                           State_DOWN = 0;
                           State_INIT = 1;
                           State_ATTEMPT = 2;
                           State_X_2X_WAY = 3;
                           State_EXSTART = 4;
                           State_EXCHANGE = 5;
                           State_LOADING = 6;
                           State_FULL = 7;
                        };
                        State state = 6 [json_name = "state"];
                        string host_name = 7 [json_name = "host-name"];
                        message Datas {
                           message Data {
                              string if_ip = 1 [json_name = "if-ip"];
                              enum GrState {
                                 GrState_NORMAL = 0;
                                 GrState_DOINGX_GR = 1;
                                 GrState_HELPER = 2;
                                 GrState_NONE = 3;
                              };
                              GrState gr_state = 2 [json_name = "gr-state"];
                              enum Mode {
                                 Mode_SLAVE = 0;
                                 Mode_MASTER = 1;
                              };
                              Mode mode = 3 [json_name = "mode"];
                              int32 priority = 4 [json_name = "priority"];
                              string dr = 5 [json_name = "dr"];
                              string bdr = 6 [json_name = "bdr"];
                              uint32 if_mtu = 7 [json_name = "if-mtu"];
                              string dead_due_timer = 8 [json_name = "dead-due-timer"];
                              uint32 retran_interval = 9 [json_name = "retran-interval"];
                              string up_time = 10 [json_name = "up-time"];
                              string up_time_stamp = 11 [json_name = "up-time-stamp"];
                              uint32 auth_sequence = 12 [json_name = "auth-sequence"];
                           }
                           repeated Data data = 1 [json_name = "data"];
                        }
                        Datas datas = 8 [json_name = "datas"];
                     }
                     repeated Neighbor neighbor = 1 [json_name = "neighbor"];
                  }
                  Neighbors neighbors = 47 [json_name = "neighbors"];
                  message Routings {
                     message Routing {
                        string dest_ip = 1 [json_name = "dest-ip"];
                        uint32 mask_length = 2 [json_name = "mask-length"];
                        string path_type = 3 [json_name = "path-type"];
                        uint32 cost = 4 [json_name = "cost"];
                        enum PrefixPriority {
                           PrefixPriority_CRITICAL = 0;
                           PrefixPriority_HIGH = 1;
                           PrefixPriority_MEDIUM = 2;
                           PrefixPriority_LOW = 3;
                        };
                        PrefixPriority prefix_priority = 5 [json_name = "prefix-priority"];
                        message NexthopDatas {
                           message NexthopData {
                              string ip_addr = 1 [json_name = "ip-addr"];
                              string adv_router_id = 2 [json_name = "adv-router-id"];
                              string area_id = 3 [json_name = "area-id"];
                              string if_name = 4 [json_name = "if-name"];
                              string flags_disp = 5 [json_name = "flags-disp"];
                              uint32 tag = 6 [json_name = "tag"];
                              string bak_if_name = 7 [json_name = "bak-if-name"];
                              string bak_next_ip = 8 [json_name = "bak-next-ip"];
                              enum BackupType {
                                 INVALID_ENUM_VALUE_BackupType = 0;
                                 BackupType_LFAX_LINK = 1;
                                 BackupType_LFAX_LINKX_NODE = 2;
                                 BackupType_REMOTEX_LFAX_LINK = 5;
                                 BackupType_REMOTEX_LFAX_LINKX_NODE = 6;
                                 BackupType_TILFAX_LINK = 7;
                                 BackupType_TILFAX_LINKX_NODE = 8;
                              };
                              BackupType backup_type = 9 [json_name = "backup-type"];
                              string tunnel_dest = 10 [json_name = "tunnel-dest"];
                              enum TunnelType {
                                 INVALID_ENUM_VALUE_TunnelType = 0;
                                 TunnelType_LDP = 1;
                              };
                              TunnelType tunnel_type = 11 [json_name = "tunnel-type"];
                           }
                           repeated NexthopData nexthop_data = 1 [json_name = "nexthop-data"];
                        }
                        NexthopDatas nexthop_datas = 6 [json_name = "nexthop-datas"];
                     }
                     repeated Routing routing = 1 [json_name = "routing"];
                  }
                  Routings routings = 48 [json_name = "routings"];
                  message SegmentRouting {
                     bool enable = 1 [json_name = "enable"];
                     message Binding {
                        bool receive = 1 [json_name = "receive"];
                        bool advertise = 2 [json_name = "advertise"];
                     }
                     Binding binding = 2 [json_name = "binding"];
                     message LspTrigger {
                        enum Type {
                           Type_IPX_PREFIX = 0;
                           Type_NONE = 1;
                           Type_HOST = 2;
                        };
                        Type type = 1 [json_name = "type"];
                        string ip_prefix = 2 [json_name = "ip-prefix"];
                     }
                     LspTrigger lsp_trigger = 3 [json_name = "lsp-trigger"];
                  }
                  SegmentRouting segment_routing = 49 [json_name = "segment-routing"];
                  message Srgbs {
                     message Srgb {
                        uint32 lower_bound = 1 [json_name = "lower-bound"];
                        uint32 upper_bound = 2 [json_name = "upper-bound"];
                     }
                     repeated Srgb srgb = 1 [json_name = "srgb"];
                  }
                  Srgbs srgbs = 50 [json_name = "srgbs"];
                  message SrAvoidMicroLoop {
                     bool enable = 1 [json_name = "enable"];
                     uint32 rib_update_delay = 2 [json_name = "rib-update-delay"];
                  }
                  SrAvoidMicroLoop sr_avoid_micro_loop = 51 [json_name = "sr-avoid-micro-loop"];
               }
               repeated Site site = 1 [json_name = "site"];
            }
            Sites sites = 1 [json_name = "sites"];
         }
         Ospfv2 ospfv2 = 25 [json_name = "ospfv2"];
         message Nvo3 {
            message VniList {
               uint32 vni = 1 [json_name = "vni"];
            }
            repeated VniList vni_list = 1 [json_name = "vni-list"];
         }
         Nvo3 nvo3 = 26 [json_name = "nvo3"];
         message Ospfv3 {
            message Sites {
               message Site {
                  uint32 process_id = 1 [json_name = "process-id"];
                  string router_id = 2 [json_name = "router-id"];
                  string description = 3 [json_name = "description"];
                  bool rfc1583_compatible = 4 [json_name = "rfc1583-compatible"];
                  bool retransmission_limit = 5 [json_name = "retransmission-limit"];
                  uint32 retransmission_limit_value = 6 [json_name = "retransmission-limit-value"];
                  bool lsa_refresh = 7 [json_name = "lsa-refresh"];
                  bool peer_flapping_suppress = 8 [json_name = "peer-flapping-suppress"];
                  bool qppb_enable = 9 [json_name = "qppb-enable"];
                  message PrivateNet {
                     message RouteTag {
                        message Value {
                           uint32 value = 1 [json_name = "value"];
                        }
                        Value value = 1 [json_name = "value"];
                     }
                     RouteTag route_tag = 1 [json_name = "route-tag"];
                     bool vpn_capability = 2 [json_name = "vpn-capability"];
                  }
                  PrivateNet private_net = 10 [json_name = "private-net"];
                  message Timer {
                     message LsaArrival {
                        message TimerType {
                           message Timer {
                              uint32 interval = 1 [json_name = "interval"];
                           }
                           Timer timer = 1 [json_name = "timer"];
                           message IntelligentTimer {
                              uint32 max_interval = 1 [json_name = "max-interval"];
                              uint32 start_interval = 2 [json_name = "start-interval"];
                              uint32 hold_interval = 3 [json_name = "hold-interval"];
                           }
                           IntelligentTimer intelligent_timer = 2 [json_name = "intelligent-timer"];
                        }
                        TimerType timer_type = 1 [json_name = "timer-type"];
                     }
                     LsaArrival lsa_arrival = 1 [json_name = "lsa-arrival"];
                     message LsaOriginate {
                        uint32 other_type_interval = 1 [json_name = "other-type-interval"];
                        message TimerType {
                           message Interval {
                              uint32 max_interval = 1 [json_name = "max-interval"];
                              uint32 start_interval = 2 [json_name = "start-interval"];
                              uint32 hold_interval = 3 [json_name = "hold-interval"];
                           }
                           Interval interval = 1 [json_name = "interval"];
                        }
                        TimerType timer_type = 2 [json_name = "timer-type"];
                     }
                     LsaOriginate lsa_originate = 2 [json_name = "lsa-originate"];
                     message SpfSchedule {
                        message ScheduleType {
                           message Timer {
                              uint32 delay_interval = 1 [json_name = "delay-interval"];
                              uint32 hold_interval_timer = 2 [json_name = "hold-interval-timer"];
                           }
                           Timer timer = 1 [json_name = "timer"];
                           message IntelligentTimer {
                              uint32 max_interval = 1 [json_name = "max-interval"];
                              uint32 start_interval = 2 [json_name = "start-interval"];
                              uint32 hold_interval = 3 [json_name = "hold-interval"];
                           }
                           IntelligentTimer intelligent_timer = 2 [json_name = "intelligent-timer"];
                           message Millisecond {
                              uint32 millisecond = 1 [json_name = "millisecond"];
                           }
                           Millisecond millisecond = 3 [json_name = "millisecond"];
                        }
                        ScheduleType schedule_type = 1 [json_name = "schedule-type"];
                     }
                     SpfSchedule spf_schedule = 3 [json_name = "spf-schedule"];
                  }
                  Timer timer = 11 [json_name = "timer"];
                  message Bfd {
                     bool enable = 1 [json_name = "enable"];
                     uint32 min_rx = 2 [json_name = "min-rx"];
                     uint32 min_tx = 3 [json_name = "min-tx"];
                     uint32 detect_multiplier = 4 [json_name = "detect-multiplier"];
                     bool frr_binding = 5 [json_name = "frr-binding"];
                  }
                  Bfd bfd = 12 [json_name = "bfd"];
                  message ImportLimit {
                     uint32 max_number = 1 [json_name = "max-number"];
                     uint32 threshold_upper = 2 [json_name = "threshold-upper"];
                     uint32 threshold_lower = 3 [json_name = "threshold-lower"];
                  }
                  ImportLimit import_limit = 13 [json_name = "import-limit"];
                  message DefaultPara {
                     uint32 cost = 1 [json_name = "cost"];
                     uint32 tag = 2 [json_name = "tag"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_TYPE1 = 1;
                        Type_TYPE2 = 2;
                     };
                     Type type = 3 [json_name = "type"];
                  }
                  DefaultPara default_para = 14 [json_name = "default-para"];
                  message ImportRoutes {
                     message ImportRoute {
                        enum Protocol {
                           INVALID_ENUM_VALUE_Protocol = 0;
                           Protocol_DIRECT = 1;
                           Protocol_ISIS = 3;
                           Protocol_STATIC = 4;
                           Protocol_BGP = 6;
                           Protocol_OSPFV3 = 7;
                           Protocol_RIPNG = 8;
                           Protocol_UNR = 11;
                        };
                        Protocol protocol = 1 [json_name = "protocol"];
                        uint32 process_id = 2 [json_name = "process-id"];
                        uint32 tag = 3 [json_name = "tag"];
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_TYPE1 = 1;
                           Type_TYPE2 = 2;
                        };
                        Type type = 4 [json_name = "type"];
                        bool permit_ibgp = 5 [json_name = "permit-ibgp"];
                        message Cost {
                           message InheritCost {
                              bool inherit_cost = 1 [json_name = "inherit-cost"];
                           }
                           InheritCost inherit_cost = 1 [json_name = "inherit-cost"];
                           message CostValue {
                              uint32 cost_value = 1 [json_name = "cost-value"];
                           }
                           CostValue cost_value = 2 [json_name = "cost-value"];
                        }
                        Cost cost = 6 [json_name = "cost"];
                        message PolicyType {
                           message RoutePolicyName {
                              string route_policy_name = 1 [json_name = "route-policy-name"];
                           }
                           RoutePolicyName route_policy_name = 1 [json_name = "route-policy-name"];
                           message RouteFilterName {
                              string route_filter_name = 1 [json_name = "route-filter-name"];
                           }
                           RouteFilterName route_filter_name = 2 [json_name = "route-filter-name"];
                        }
                        PolicyType policy_type = 7 [json_name = "policy-type"];
                     }
                     repeated ImportRoute import_route = 1 [json_name = "import-route"];
                  }
                  ImportRoutes import_routes = 15 [json_name = "import-routes"];
                  message Areas {
                     message Area {
                        string area_id = 1 [json_name = "area-id"];
                        enum AreaType {
                           INVALID_ENUM_VALUE_AreaType = 0;
                           AreaType_NORMAL = 1;
                           AreaType_STUB = 2;
                           AreaType_NSSA = 3;
                        };
                        AreaType area_type = 2 [json_name = "area-type"];
                        string description = 3 [json_name = "description"];
                        message Interfaces {
                           message Interface {
                              string name = 1 [json_name = "name"];
                              uint32 instance_id = 2 [json_name = "instance-id"];
                              enum NetworkType {
                                 INVALID_ENUM_VALUE_NetworkType = 0;
                                 NetworkType_BROADCAST = 1;
                                 NetworkType_NBMA = 2;
                                 NetworkType_P2P = 3;
                                 NetworkType_P2MP = 5;
                                 NetworkType_P2MPX_NONBROADCAST = 7;
                                 NetworkType_LOOPBACK = 22;
                              };
                              NetworkType network_type = 3 [json_name = "network-type"];
                           }
                           repeated Interface interface = 1 [json_name = "interface"];
                        }
                        Interfaces interfaces = 4 [json_name = "interfaces"];
                     }
                     repeated Area area = 1 [json_name = "area"];
                  }
                  Areas areas = 16 [json_name = "areas"];
               }
               repeated Site site = 1 [json_name = "site"];
            }
            Sites sites = 1 [json_name = "sites"];
         }
         Ospfv3 ospfv3 = 27 [json_name = "ospfv3"];
      }
      repeated Instance instance = 1 [json_name = "instance"];
   }
   Instances instances = 1 [json_name = "instances"];
   message Global {
      string cfg_router_id = 1 [json_name = "cfg-router-id"];
      bool as_notation_plain = 2 [json_name = "as-notation-plain"];
   }
   Global global = 2 [json_name = "global"];
}

